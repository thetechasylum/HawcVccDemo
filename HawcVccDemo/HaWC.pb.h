// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HaWC.proto

#ifndef PROTOBUF_INCLUDED_HaWC_2eproto
#define PROTOBUF_INCLUDED_HaWC_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_HaWC_2eproto 

namespace protobuf_HaWC_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[74];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_HaWC_2eproto
namespace HaWC {
class CmdMsg;
class CmdMsgDefaultTypeInternal;
extern CmdMsgDefaultTypeInternal _CmdMsg_default_instance_;
class CmdMsg_AppManagerCmd;
class CmdMsg_AppManagerCmdDefaultTypeInternal;
extern CmdMsg_AppManagerCmdDefaultTypeInternal _CmdMsg_AppManagerCmd_default_instance_;
class CmdMsg_CircleProperties;
class CmdMsg_CirclePropertiesDefaultTypeInternal;
extern CmdMsg_CirclePropertiesDefaultTypeInternal _CmdMsg_CircleProperties_default_instance_;
class CmdMsg_CircleProperty;
class CmdMsg_CirclePropertyDefaultTypeInternal;
extern CmdMsg_CirclePropertyDefaultTypeInternal _CmdMsg_CircleProperty_default_instance_;
class CmdMsg_CloseCmd;
class CmdMsg_CloseCmdDefaultTypeInternal;
extern CmdMsg_CloseCmdDefaultTypeInternal _CmdMsg_CloseCmd_default_instance_;
class CmdMsg_Component;
class CmdMsg_ComponentDefaultTypeInternal;
extern CmdMsg_ComponentDefaultTypeInternal _CmdMsg_Component_default_instance_;
class CmdMsg_ComponentList;
class CmdMsg_ComponentListDefaultTypeInternal;
extern CmdMsg_ComponentListDefaultTypeInternal _CmdMsg_ComponentList_default_instance_;
class CmdMsg_DisplayCmd;
class CmdMsg_DisplayCmdDefaultTypeInternal;
extern CmdMsg_DisplayCmdDefaultTypeInternal _CmdMsg_DisplayCmd_default_instance_;
class CmdMsg_FileListProperties;
class CmdMsg_FileListPropertiesDefaultTypeInternal;
extern CmdMsg_FileListPropertiesDefaultTypeInternal _CmdMsg_FileListProperties_default_instance_;
class CmdMsg_FileListProperty;
class CmdMsg_FileListPropertyDefaultTypeInternal;
extern CmdMsg_FileListPropertyDefaultTypeInternal _CmdMsg_FileListProperty_default_instance_;
class CmdMsg_GetDisplayCfgCmd;
class CmdMsg_GetDisplayCfgCmdDefaultTypeInternal;
extern CmdMsg_GetDisplayCfgCmdDefaultTypeInternal _CmdMsg_GetDisplayCfgCmd_default_instance_;
class CmdMsg_GetFileHashCmd;
class CmdMsg_GetFileHashCmdDefaultTypeInternal;
extern CmdMsg_GetFileHashCmdDefaultTypeInternal _CmdMsg_GetFileHashCmd_default_instance_;
class CmdMsg_GetParamsCfgnCmd;
class CmdMsg_GetParamsCfgnCmdDefaultTypeInternal;
extern CmdMsg_GetParamsCfgnCmdDefaultTypeInternal _CmdMsg_GetParamsCfgnCmd_default_instance_;
class CmdMsg_GetParamsCmd;
class CmdMsg_GetParamsCmdDefaultTypeInternal;
extern CmdMsg_GetParamsCmdDefaultTypeInternal _CmdMsg_GetParamsCmd_default_instance_;
class CmdMsg_IO_Cmd;
class CmdMsg_IO_CmdDefaultTypeInternal;
extern CmdMsg_IO_CmdDefaultTypeInternal _CmdMsg_IO_Cmd_default_instance_;
class CmdMsg_ImageProperties;
class CmdMsg_ImagePropertiesDefaultTypeInternal;
extern CmdMsg_ImagePropertiesDefaultTypeInternal _CmdMsg_ImageProperties_default_instance_;
class CmdMsg_ImageProperty;
class CmdMsg_ImagePropertyDefaultTypeInternal;
extern CmdMsg_ImagePropertyDefaultTypeInternal _CmdMsg_ImageProperty_default_instance_;
class CmdMsg_LabelProperties;
class CmdMsg_LabelPropertiesDefaultTypeInternal;
extern CmdMsg_LabelPropertiesDefaultTypeInternal _CmdMsg_LabelProperties_default_instance_;
class CmdMsg_LabelProperty;
class CmdMsg_LabelPropertyDefaultTypeInternal;
extern CmdMsg_LabelPropertyDefaultTypeInternal _CmdMsg_LabelProperty_default_instance_;
class CmdMsg_LineProperties;
class CmdMsg_LinePropertiesDefaultTypeInternal;
extern CmdMsg_LinePropertiesDefaultTypeInternal _CmdMsg_LineProperties_default_instance_;
class CmdMsg_LineProperty;
class CmdMsg_LinePropertyDefaultTypeInternal;
extern CmdMsg_LinePropertyDefaultTypeInternal _CmdMsg_LineProperty_default_instance_;
class CmdMsg_ListProperties;
class CmdMsg_ListPropertiesDefaultTypeInternal;
extern CmdMsg_ListPropertiesDefaultTypeInternal _CmdMsg_ListProperties_default_instance_;
class CmdMsg_ListProperty;
class CmdMsg_ListPropertyDefaultTypeInternal;
extern CmdMsg_ListPropertyDefaultTypeInternal _CmdMsg_ListProperty_default_instance_;
class CmdMsg_LoadConfigFromFileCmd;
class CmdMsg_LoadConfigFromFileCmdDefaultTypeInternal;
extern CmdMsg_LoadConfigFromFileCmdDefaultTypeInternal _CmdMsg_LoadConfigFromFileCmd_default_instance_;
class CmdMsg_LoadDisplayFromFileCmd;
class CmdMsg_LoadDisplayFromFileCmdDefaultTypeInternal;
extern CmdMsg_LoadDisplayFromFileCmdDefaultTypeInternal _CmdMsg_LoadDisplayFromFileCmd_default_instance_;
class CmdMsg_LoadFontsCmd;
class CmdMsg_LoadFontsCmdDefaultTypeInternal;
extern CmdMsg_LoadFontsCmdDefaultTypeInternal _CmdMsg_LoadFontsCmd_default_instance_;
class CmdMsg_LoadOverlayFromFileCmd;
class CmdMsg_LoadOverlayFromFileCmdDefaultTypeInternal;
extern CmdMsg_LoadOverlayFromFileCmdDefaultTypeInternal _CmdMsg_LoadOverlayFromFileCmd_default_instance_;
class CmdMsg_MenuProperties;
class CmdMsg_MenuPropertiesDefaultTypeInternal;
extern CmdMsg_MenuPropertiesDefaultTypeInternal _CmdMsg_MenuProperties_default_instance_;
class CmdMsg_MenuProperty;
class CmdMsg_MenuPropertyDefaultTypeInternal;
extern CmdMsg_MenuPropertyDefaultTypeInternal _CmdMsg_MenuProperty_default_instance_;
class CmdMsg_OverlayCmd;
class CmdMsg_OverlayCmdDefaultTypeInternal;
extern CmdMsg_OverlayCmdDefaultTypeInternal _CmdMsg_OverlayCmd_default_instance_;
class CmdMsg_ParamLoc;
class CmdMsg_ParamLocDefaultTypeInternal;
extern CmdMsg_ParamLocDefaultTypeInternal _CmdMsg_ParamLoc_default_instance_;
class CmdMsg_ParamSet;
class CmdMsg_ParamSetDefaultTypeInternal;
extern CmdMsg_ParamSetDefaultTypeInternal _CmdMsg_ParamSet_default_instance_;
class CmdMsg_RectangleProperties;
class CmdMsg_RectanglePropertiesDefaultTypeInternal;
extern CmdMsg_RectanglePropertiesDefaultTypeInternal _CmdMsg_RectangleProperties_default_instance_;
class CmdMsg_RectangleProperty;
class CmdMsg_RectanglePropertyDefaultTypeInternal;
extern CmdMsg_RectanglePropertyDefaultTypeInternal _CmdMsg_RectangleProperty_default_instance_;
class CmdMsg_RestoreFactoryConfigCmd;
class CmdMsg_RestoreFactoryConfigCmdDefaultTypeInternal;
extern CmdMsg_RestoreFactoryConfigCmdDefaultTypeInternal _CmdMsg_RestoreFactoryConfigCmd_default_instance_;
class CmdMsg_RestoreFactoryDisplayCmd;
class CmdMsg_RestoreFactoryDisplayCmdDefaultTypeInternal;
extern CmdMsg_RestoreFactoryDisplayCmdDefaultTypeInternal _CmdMsg_RestoreFactoryDisplayCmd_default_instance_;
class CmdMsg_SaveConfigToFileCmd;
class CmdMsg_SaveConfigToFileCmdDefaultTypeInternal;
extern CmdMsg_SaveConfigToFileCmdDefaultTypeInternal _CmdMsg_SaveConfigToFileCmd_default_instance_;
class CmdMsg_SaveDefaultConfigCmd;
class CmdMsg_SaveDefaultConfigCmdDefaultTypeInternal;
extern CmdMsg_SaveDefaultConfigCmdDefaultTypeInternal _CmdMsg_SaveDefaultConfigCmd_default_instance_;
class CmdMsg_SaveDefaultDisplayCmd;
class CmdMsg_SaveDefaultDisplayCmdDefaultTypeInternal;
extern CmdMsg_SaveDefaultDisplayCmdDefaultTypeInternal _CmdMsg_SaveDefaultDisplayCmd_default_instance_;
class CmdMsg_SaveDisplayToFileCmd;
class CmdMsg_SaveDisplayToFileCmdDefaultTypeInternal;
extern CmdMsg_SaveDisplayToFileCmdDefaultTypeInternal _CmdMsg_SaveDisplayToFileCmd_default_instance_;
class CmdMsg_SaveOverlayToFileCmd;
class CmdMsg_SaveOverlayToFileCmdDefaultTypeInternal;
extern CmdMsg_SaveOverlayToFileCmdDefaultTypeInternal _CmdMsg_SaveOverlayToFileCmd_default_instance_;
class CmdMsg_SetDisplayCfgCmd;
class CmdMsg_SetDisplayCfgCmdDefaultTypeInternal;
extern CmdMsg_SetDisplayCfgCmdDefaultTypeInternal _CmdMsg_SetDisplayCfgCmd_default_instance_;
class CmdMsg_SetFeedSourceCmd;
class CmdMsg_SetFeedSourceCmdDefaultTypeInternal;
extern CmdMsg_SetFeedSourceCmdDefaultTypeInternal _CmdMsg_SetFeedSourceCmd_default_instance_;
class CmdMsg_SetParamsCmd;
class CmdMsg_SetParamsCmdDefaultTypeInternal;
extern CmdMsg_SetParamsCmdDefaultTypeInternal _CmdMsg_SetParamsCmd_default_instance_;
class CmdMsg_SetViewFeedCmd;
class CmdMsg_SetViewFeedCmdDefaultTypeInternal;
extern CmdMsg_SetViewFeedCmdDefaultTypeInternal _CmdMsg_SetViewFeedCmd_default_instance_;
class CmdMsg_SetViewWindowCmd;
class CmdMsg_SetViewWindowCmdDefaultTypeInternal;
extern CmdMsg_SetViewWindowCmdDefaultTypeInternal _CmdMsg_SetViewWindowCmd_default_instance_;
class CmdMsg_ToolBarProperties;
class CmdMsg_ToolBarPropertiesDefaultTypeInternal;
extern CmdMsg_ToolBarPropertiesDefaultTypeInternal _CmdMsg_ToolBarProperties_default_instance_;
class CmdMsg_ToolBarProperty;
class CmdMsg_ToolBarPropertyDefaultTypeInternal;
extern CmdMsg_ToolBarPropertyDefaultTypeInternal _CmdMsg_ToolBarProperty_default_instance_;
class RspMsg;
class RspMsgDefaultTypeInternal;
extern RspMsgDefaultTypeInternal _RspMsg_default_instance_;
class RspMsg_AppManagerRsp;
class RspMsg_AppManagerRspDefaultTypeInternal;
extern RspMsg_AppManagerRspDefaultTypeInternal _RspMsg_AppManagerRsp_default_instance_;
class RspMsg_DisplayCfgRsp;
class RspMsg_DisplayCfgRspDefaultTypeInternal;
extern RspMsg_DisplayCfgRspDefaultTypeInternal _RspMsg_DisplayCfgRsp_default_instance_;
class RspMsg_DisplayRsp;
class RspMsg_DisplayRspDefaultTypeInternal;
extern RspMsg_DisplayRspDefaultTypeInternal _RspMsg_DisplayRsp_default_instance_;
class RspMsg_FeedSourceRsp;
class RspMsg_FeedSourceRspDefaultTypeInternal;
extern RspMsg_FeedSourceRspDefaultTypeInternal _RspMsg_FeedSourceRsp_default_instance_;
class RspMsg_FileHashRsp;
class RspMsg_FileHashRspDefaultTypeInternal;
extern RspMsg_FileHashRspDefaultTypeInternal _RspMsg_FileHashRsp_default_instance_;
class RspMsg_IO_Bcast;
class RspMsg_IO_BcastDefaultTypeInternal;
extern RspMsg_IO_BcastDefaultTypeInternal _RspMsg_IO_Bcast_default_instance_;
class RspMsg_IO_Rsp;
class RspMsg_IO_RspDefaultTypeInternal;
extern RspMsg_IO_RspDefaultTypeInternal _RspMsg_IO_Rsp_default_instance_;
class RspMsg_LoadConfigRsp;
class RspMsg_LoadConfigRspDefaultTypeInternal;
extern RspMsg_LoadConfigRspDefaultTypeInternal _RspMsg_LoadConfigRsp_default_instance_;
class RspMsg_LoadDisplayRsp;
class RspMsg_LoadDisplayRspDefaultTypeInternal;
extern RspMsg_LoadDisplayRspDefaultTypeInternal _RspMsg_LoadDisplayRsp_default_instance_;
class RspMsg_LoadFontsRsp;
class RspMsg_LoadFontsRspDefaultTypeInternal;
extern RspMsg_LoadFontsRspDefaultTypeInternal _RspMsg_LoadFontsRsp_default_instance_;
class RspMsg_LoadOverlayFromFileRsp;
class RspMsg_LoadOverlayFromFileRspDefaultTypeInternal;
extern RspMsg_LoadOverlayFromFileRspDefaultTypeInternal _RspMsg_LoadOverlayFromFileRsp_default_instance_;
class RspMsg_OverlayCreateRsp;
class RspMsg_OverlayCreateRspDefaultTypeInternal;
extern RspMsg_OverlayCreateRspDefaultTypeInternal _RspMsg_OverlayCreateRsp_default_instance_;
class RspMsg_OverlayRsp;
class RspMsg_OverlayRspDefaultTypeInternal;
extern RspMsg_OverlayRspDefaultTypeInternal _RspMsg_OverlayRsp_default_instance_;
class RspMsg_OverlayUpdateRsp;
class RspMsg_OverlayUpdateRspDefaultTypeInternal;
extern RspMsg_OverlayUpdateRspDefaultTypeInternal _RspMsg_OverlayUpdateRsp_default_instance_;
class RspMsg_ParamCfgn;
class RspMsg_ParamCfgnDefaultTypeInternal;
extern RspMsg_ParamCfgnDefaultTypeInternal _RspMsg_ParamCfgn_default_instance_;
class RspMsg_ParamDetails;
class RspMsg_ParamDetailsDefaultTypeInternal;
extern RspMsg_ParamDetailsDefaultTypeInternal _RspMsg_ParamDetails_default_instance_;
class RspMsg_ParamsCfgnRsp;
class RspMsg_ParamsCfgnRspDefaultTypeInternal;
extern RspMsg_ParamsCfgnRspDefaultTypeInternal _RspMsg_ParamsCfgnRsp_default_instance_;
class RspMsg_ParamsRsp;
class RspMsg_ParamsRspDefaultTypeInternal;
extern RspMsg_ParamsRspDefaultTypeInternal _RspMsg_ParamsRsp_default_instance_;
class RspMsg_QosBcast;
class RspMsg_QosBcastDefaultTypeInternal;
extern RspMsg_QosBcastDefaultTypeInternal _RspMsg_QosBcast_default_instance_;
class RspMsg_ResetEvt;
class RspMsg_ResetEvtDefaultTypeInternal;
extern RspMsg_ResetEvtDefaultTypeInternal _RspMsg_ResetEvt_default_instance_;
class RspMsg_SaveConfigRsp;
class RspMsg_SaveConfigRspDefaultTypeInternal;
extern RspMsg_SaveConfigRspDefaultTypeInternal _RspMsg_SaveConfigRsp_default_instance_;
class RspMsg_SaveDisplayRsp;
class RspMsg_SaveDisplayRspDefaultTypeInternal;
extern RspMsg_SaveDisplayRspDefaultTypeInternal _RspMsg_SaveDisplayRsp_default_instance_;
class RspMsg_SaveOverlayToFileRsp;
class RspMsg_SaveOverlayToFileRspDefaultTypeInternal;
extern RspMsg_SaveOverlayToFileRspDefaultTypeInternal _RspMsg_SaveOverlayToFileRsp_default_instance_;
class RspMsg_ViewFeedRsp;
class RspMsg_ViewFeedRspDefaultTypeInternal;
extern RspMsg_ViewFeedRspDefaultTypeInternal _RspMsg_ViewFeedRsp_default_instance_;
class RspMsg_ViewWindowRsp;
class RspMsg_ViewWindowRspDefaultTypeInternal;
extern RspMsg_ViewWindowRspDefaultTypeInternal _RspMsg_ViewWindowRsp_default_instance_;
}  // namespace HaWC
namespace google {
namespace protobuf {
template<> ::HaWC::CmdMsg* Arena::CreateMaybeMessage<::HaWC::CmdMsg>(Arena*);
template<> ::HaWC::CmdMsg_AppManagerCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_AppManagerCmd>(Arena*);
template<> ::HaWC::CmdMsg_CircleProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_CircleProperties>(Arena*);
template<> ::HaWC::CmdMsg_CircleProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_CircleProperty>(Arena*);
template<> ::HaWC::CmdMsg_CloseCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_CloseCmd>(Arena*);
template<> ::HaWC::CmdMsg_Component* Arena::CreateMaybeMessage<::HaWC::CmdMsg_Component>(Arena*);
template<> ::HaWC::CmdMsg_ComponentList* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ComponentList>(Arena*);
template<> ::HaWC::CmdMsg_DisplayCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_DisplayCmd>(Arena*);
template<> ::HaWC::CmdMsg_FileListProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_FileListProperties>(Arena*);
template<> ::HaWC::CmdMsg_FileListProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_FileListProperty>(Arena*);
template<> ::HaWC::CmdMsg_GetDisplayCfgCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_GetDisplayCfgCmd>(Arena*);
template<> ::HaWC::CmdMsg_GetFileHashCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_GetFileHashCmd>(Arena*);
template<> ::HaWC::CmdMsg_GetParamsCfgnCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_GetParamsCfgnCmd>(Arena*);
template<> ::HaWC::CmdMsg_GetParamsCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_GetParamsCmd>(Arena*);
template<> ::HaWC::CmdMsg_IO_Cmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_IO_Cmd>(Arena*);
template<> ::HaWC::CmdMsg_ImageProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ImageProperties>(Arena*);
template<> ::HaWC::CmdMsg_ImageProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ImageProperty>(Arena*);
template<> ::HaWC::CmdMsg_LabelProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LabelProperties>(Arena*);
template<> ::HaWC::CmdMsg_LabelProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LabelProperty>(Arena*);
template<> ::HaWC::CmdMsg_LineProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LineProperties>(Arena*);
template<> ::HaWC::CmdMsg_LineProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LineProperty>(Arena*);
template<> ::HaWC::CmdMsg_ListProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ListProperties>(Arena*);
template<> ::HaWC::CmdMsg_ListProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ListProperty>(Arena*);
template<> ::HaWC::CmdMsg_LoadConfigFromFileCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LoadConfigFromFileCmd>(Arena*);
template<> ::HaWC::CmdMsg_LoadDisplayFromFileCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LoadDisplayFromFileCmd>(Arena*);
template<> ::HaWC::CmdMsg_LoadFontsCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LoadFontsCmd>(Arena*);
template<> ::HaWC::CmdMsg_LoadOverlayFromFileCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_LoadOverlayFromFileCmd>(Arena*);
template<> ::HaWC::CmdMsg_MenuProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_MenuProperties>(Arena*);
template<> ::HaWC::CmdMsg_MenuProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_MenuProperty>(Arena*);
template<> ::HaWC::CmdMsg_OverlayCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_OverlayCmd>(Arena*);
template<> ::HaWC::CmdMsg_ParamLoc* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ParamLoc>(Arena*);
template<> ::HaWC::CmdMsg_ParamSet* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ParamSet>(Arena*);
template<> ::HaWC::CmdMsg_RectangleProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_RectangleProperties>(Arena*);
template<> ::HaWC::CmdMsg_RectangleProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_RectangleProperty>(Arena*);
template<> ::HaWC::CmdMsg_RestoreFactoryConfigCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_RestoreFactoryConfigCmd>(Arena*);
template<> ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_RestoreFactoryDisplayCmd>(Arena*);
template<> ::HaWC::CmdMsg_SaveConfigToFileCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SaveConfigToFileCmd>(Arena*);
template<> ::HaWC::CmdMsg_SaveDefaultConfigCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SaveDefaultConfigCmd>(Arena*);
template<> ::HaWC::CmdMsg_SaveDefaultDisplayCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SaveDefaultDisplayCmd>(Arena*);
template<> ::HaWC::CmdMsg_SaveDisplayToFileCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SaveDisplayToFileCmd>(Arena*);
template<> ::HaWC::CmdMsg_SaveOverlayToFileCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SaveOverlayToFileCmd>(Arena*);
template<> ::HaWC::CmdMsg_SetDisplayCfgCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SetDisplayCfgCmd>(Arena*);
template<> ::HaWC::CmdMsg_SetFeedSourceCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SetFeedSourceCmd>(Arena*);
template<> ::HaWC::CmdMsg_SetParamsCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SetParamsCmd>(Arena*);
template<> ::HaWC::CmdMsg_SetViewFeedCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SetViewFeedCmd>(Arena*);
template<> ::HaWC::CmdMsg_SetViewWindowCmd* Arena::CreateMaybeMessage<::HaWC::CmdMsg_SetViewWindowCmd>(Arena*);
template<> ::HaWC::CmdMsg_ToolBarProperties* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ToolBarProperties>(Arena*);
template<> ::HaWC::CmdMsg_ToolBarProperty* Arena::CreateMaybeMessage<::HaWC::CmdMsg_ToolBarProperty>(Arena*);
template<> ::HaWC::RspMsg* Arena::CreateMaybeMessage<::HaWC::RspMsg>(Arena*);
template<> ::HaWC::RspMsg_AppManagerRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_AppManagerRsp>(Arena*);
template<> ::HaWC::RspMsg_DisplayCfgRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_DisplayCfgRsp>(Arena*);
template<> ::HaWC::RspMsg_DisplayRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_DisplayRsp>(Arena*);
template<> ::HaWC::RspMsg_FeedSourceRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_FeedSourceRsp>(Arena*);
template<> ::HaWC::RspMsg_FileHashRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_FileHashRsp>(Arena*);
template<> ::HaWC::RspMsg_IO_Bcast* Arena::CreateMaybeMessage<::HaWC::RspMsg_IO_Bcast>(Arena*);
template<> ::HaWC::RspMsg_IO_Rsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_IO_Rsp>(Arena*);
template<> ::HaWC::RspMsg_LoadConfigRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_LoadConfigRsp>(Arena*);
template<> ::HaWC::RspMsg_LoadDisplayRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_LoadDisplayRsp>(Arena*);
template<> ::HaWC::RspMsg_LoadFontsRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_LoadFontsRsp>(Arena*);
template<> ::HaWC::RspMsg_LoadOverlayFromFileRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_LoadOverlayFromFileRsp>(Arena*);
template<> ::HaWC::RspMsg_OverlayCreateRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_OverlayCreateRsp>(Arena*);
template<> ::HaWC::RspMsg_OverlayRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_OverlayRsp>(Arena*);
template<> ::HaWC::RspMsg_OverlayUpdateRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_OverlayUpdateRsp>(Arena*);
template<> ::HaWC::RspMsg_ParamCfgn* Arena::CreateMaybeMessage<::HaWC::RspMsg_ParamCfgn>(Arena*);
template<> ::HaWC::RspMsg_ParamDetails* Arena::CreateMaybeMessage<::HaWC::RspMsg_ParamDetails>(Arena*);
template<> ::HaWC::RspMsg_ParamsCfgnRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_ParamsCfgnRsp>(Arena*);
template<> ::HaWC::RspMsg_ParamsRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_ParamsRsp>(Arena*);
template<> ::HaWC::RspMsg_QosBcast* Arena::CreateMaybeMessage<::HaWC::RspMsg_QosBcast>(Arena*);
template<> ::HaWC::RspMsg_ResetEvt* Arena::CreateMaybeMessage<::HaWC::RspMsg_ResetEvt>(Arena*);
template<> ::HaWC::RspMsg_SaveConfigRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_SaveConfigRsp>(Arena*);
template<> ::HaWC::RspMsg_SaveDisplayRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_SaveDisplayRsp>(Arena*);
template<> ::HaWC::RspMsg_SaveOverlayToFileRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_SaveOverlayToFileRsp>(Arena*);
template<> ::HaWC::RspMsg_ViewFeedRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_ViewFeedRsp>(Arena*);
template<> ::HaWC::RspMsg_ViewWindowRsp* Arena::CreateMaybeMessage<::HaWC::RspMsg_ViewWindowRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace HaWC {

enum CmdMsg_CloseAction {
  CmdMsg_CloseAction_RestartApp = 0,
  CmdMsg_CloseAction_CloseApp = 1,
  CmdMsg_CloseAction_RestartOS = 2,
  CmdMsg_CloseAction_ShutdownOS = 3,
  CmdMsg_CloseAction_CmdMsg_CloseAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdMsg_CloseAction_CmdMsg_CloseAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdMsg_CloseAction_IsValid(int value);
const CmdMsg_CloseAction CmdMsg_CloseAction_CloseAction_MIN = CmdMsg_CloseAction_RestartApp;
const CmdMsg_CloseAction CmdMsg_CloseAction_CloseAction_MAX = CmdMsg_CloseAction_ShutdownOS;
const int CmdMsg_CloseAction_CloseAction_ARRAYSIZE = CmdMsg_CloseAction_CloseAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdMsg_CloseAction_descriptor();
inline const ::std::string& CmdMsg_CloseAction_Name(CmdMsg_CloseAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdMsg_CloseAction_descriptor(), value);
}
inline bool CmdMsg_CloseAction_Parse(
    const ::std::string& name, CmdMsg_CloseAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdMsg_CloseAction>(
    CmdMsg_CloseAction_descriptor(), name, value);
}
enum CmdMsg_FillMode {
  CmdMsg_FillMode_Stretch = 0,
  CmdMsg_FillMode_PreserveAspect = 1,
  CmdMsg_FillMode_PreserveAspectCrop = 2,
  CmdMsg_FillMode_Tile = 3,
  CmdMsg_FillMode_TileVert = 4,
  CmdMsg_FillMode_TileHoriz = 5,
  CmdMsg_FillMode_Pad = 6,
  CmdMsg_FillMode_CmdMsg_FillMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdMsg_FillMode_CmdMsg_FillMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdMsg_FillMode_IsValid(int value);
const CmdMsg_FillMode CmdMsg_FillMode_FillMode_MIN = CmdMsg_FillMode_Stretch;
const CmdMsg_FillMode CmdMsg_FillMode_FillMode_MAX = CmdMsg_FillMode_Pad;
const int CmdMsg_FillMode_FillMode_ARRAYSIZE = CmdMsg_FillMode_FillMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdMsg_FillMode_descriptor();
inline const ::std::string& CmdMsg_FillMode_Name(CmdMsg_FillMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdMsg_FillMode_descriptor(), value);
}
inline bool CmdMsg_FillMode_Parse(
    const ::std::string& name, CmdMsg_FillMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdMsg_FillMode>(
    CmdMsg_FillMode_descriptor(), name, value);
}
enum CmdMsg_WrapMode {
  CmdMsg_WrapMode_NoWrap = 0,
  CmdMsg_WrapMode_WordWrap = 1,
  CmdMsg_WrapMode_WrapAnywhere = 2,
  CmdMsg_WrapMode_Wrap = 3,
  CmdMsg_WrapMode_CmdMsg_WrapMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdMsg_WrapMode_CmdMsg_WrapMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdMsg_WrapMode_IsValid(int value);
const CmdMsg_WrapMode CmdMsg_WrapMode_WrapMode_MIN = CmdMsg_WrapMode_NoWrap;
const CmdMsg_WrapMode CmdMsg_WrapMode_WrapMode_MAX = CmdMsg_WrapMode_Wrap;
const int CmdMsg_WrapMode_WrapMode_ARRAYSIZE = CmdMsg_WrapMode_WrapMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdMsg_WrapMode_descriptor();
inline const ::std::string& CmdMsg_WrapMode_Name(CmdMsg_WrapMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdMsg_WrapMode_descriptor(), value);
}
inline bool CmdMsg_WrapMode_Parse(
    const ::std::string& name, CmdMsg_WrapMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdMsg_WrapMode>(
    CmdMsg_WrapMode_descriptor(), name, value);
}
enum CmdMsg_TextFormat {
  CmdMsg_TextFormat_AutoText = 0,
  CmdMsg_TextFormat_PlainText = 1,
  CmdMsg_TextFormat_RichText = 2,
  CmdMsg_TextFormat_CmdMsg_TextFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdMsg_TextFormat_CmdMsg_TextFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdMsg_TextFormat_IsValid(int value);
const CmdMsg_TextFormat CmdMsg_TextFormat_TextFormat_MIN = CmdMsg_TextFormat_AutoText;
const CmdMsg_TextFormat CmdMsg_TextFormat_TextFormat_MAX = CmdMsg_TextFormat_RichText;
const int CmdMsg_TextFormat_TextFormat_ARRAYSIZE = CmdMsg_TextFormat_TextFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdMsg_TextFormat_descriptor();
inline const ::std::string& CmdMsg_TextFormat_Name(CmdMsg_TextFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdMsg_TextFormat_descriptor(), value);
}
inline bool CmdMsg_TextFormat_Parse(
    const ::std::string& name, CmdMsg_TextFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdMsg_TextFormat>(
    CmdMsg_TextFormat_descriptor(), name, value);
}
enum RspMsg_DataTypes {
  RspMsg_DataTypes_Bytes = 0,
  RspMsg_DataTypes_Bools = 1,
  RspMsg_DataTypes_UInts = 2,
  RspMsg_DataTypes_Ints = 3,
  RspMsg_DataTypes_Doubles = 4,
  RspMsg_DataTypes_String = 5,
  RspMsg_DataTypes_Unknown = 100,
  RspMsg_DataTypes_RspMsg_DataTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RspMsg_DataTypes_RspMsg_DataTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RspMsg_DataTypes_IsValid(int value);
const RspMsg_DataTypes RspMsg_DataTypes_DataTypes_MIN = RspMsg_DataTypes_Bytes;
const RspMsg_DataTypes RspMsg_DataTypes_DataTypes_MAX = RspMsg_DataTypes_Unknown;
const int RspMsg_DataTypes_DataTypes_ARRAYSIZE = RspMsg_DataTypes_DataTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* RspMsg_DataTypes_descriptor();
inline const ::std::string& RspMsg_DataTypes_Name(RspMsg_DataTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    RspMsg_DataTypes_descriptor(), value);
}
inline bool RspMsg_DataTypes_Parse(
    const ::std::string& name, RspMsg_DataTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RspMsg_DataTypes>(
    RspMsg_DataTypes_descriptor(), name, value);
}
enum Targets {
  App = 0,
  Display = 1,
  IO = 2,
  MsgHandler = 3,
  Serial_RS422_485 = 4,
  Serial_USB = 5,
  CAN = 6,
  Ethernet = 7,
  UnknownTarget = 100,
  Targets_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Targets_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Targets_IsValid(int value);
const Targets Targets_MIN = App;
const Targets Targets_MAX = UnknownTarget;
const int Targets_ARRAYSIZE = Targets_MAX + 1;

const ::google::protobuf::EnumDescriptor* Targets_descriptor();
inline const ::std::string& Targets_Name(Targets value) {
  return ::google::protobuf::internal::NameOfEnum(
    Targets_descriptor(), value);
}
inline bool Targets_Parse(
    const ::std::string& name, Targets* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Targets>(
    Targets_descriptor(), name, value);
}
enum FeedType {
  UnconfigdFeedType = 0,
  StaticImage = 1,
  TestSource = 2,
  Camera = 3,
  H264RTPCamera = 4,
  H264File = 5,
  FeedType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FeedType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FeedType_IsValid(int value);
const FeedType FeedType_MIN = UnconfigdFeedType;
const FeedType FeedType_MAX = H264File;
const int FeedType_ARRAYSIZE = FeedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeedType_descriptor();
inline const ::std::string& FeedType_Name(FeedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeedType_descriptor(), value);
}
inline bool FeedType_Parse(
    const ::std::string& name, FeedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeedType>(
    FeedType_descriptor(), name, value);
}
enum FeedID {
  FirstFeed = 0,
  DefaultFeed = -1,
  UnknownFeed = -2,
  FeedID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FeedID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FeedID_IsValid(int value);
const FeedID FeedID_MIN = UnknownFeed;
const FeedID FeedID_MAX = FirstFeed;
const int FeedID_ARRAYSIZE = FeedID_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeedID_descriptor();
inline const ::std::string& FeedID_Name(FeedID value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeedID_descriptor(), value);
}
inline bool FeedID_Parse(
    const ::std::string& name, FeedID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeedID>(
    FeedID_descriptor(), name, value);
}
enum QosStates {
  QosInit = 0,
  QosStartOfStream = 1,
  QosReceivingFrames = 2,
  QosFrameTimeout = 3,
  QosEndOfStream = 4,
  QosStates_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QosStates_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QosStates_IsValid(int value);
const QosStates QosStates_MIN = QosInit;
const QosStates QosStates_MAX = QosEndOfStream;
const int QosStates_ARRAYSIZE = QosStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* QosStates_descriptor();
inline const ::std::string& QosStates_Name(QosStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    QosStates_descriptor(), value);
}
inline bool QosStates_Parse(
    const ::std::string& name, QosStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QosStates>(
    QosStates_descriptor(), name, value);
}
// ===================================================================

class CmdMsg_CloseCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.CloseCmd) */ {
 public:
  CmdMsg_CloseCmd();
  virtual ~CmdMsg_CloseCmd();

  CmdMsg_CloseCmd(const CmdMsg_CloseCmd& from);

  inline CmdMsg_CloseCmd& operator=(const CmdMsg_CloseCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_CloseCmd(CmdMsg_CloseCmd&& from) noexcept
    : CmdMsg_CloseCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_CloseCmd& operator=(CmdMsg_CloseCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_CloseCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_CloseCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_CloseCmd*>(
               &_CmdMsg_CloseCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CmdMsg_CloseCmd* other);
  friend void swap(CmdMsg_CloseCmd& a, CmdMsg_CloseCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_CloseCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_CloseCmd>(NULL);
  }

  CmdMsg_CloseCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_CloseCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_CloseCmd& from);
  void MergeFrom(const CmdMsg_CloseCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_CloseCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HaWC.CmdMsg.CloseAction closeOption = 1;
  void clear_closeoption();
  static const int kCloseOptionFieldNumber = 1;
  ::HaWC::CmdMsg_CloseAction closeoption() const;
  void set_closeoption(::HaWC::CmdMsg_CloseAction value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.CloseCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int closeoption_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SaveDefaultConfigCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SaveDefaultConfigCmd) */ {
 public:
  CmdMsg_SaveDefaultConfigCmd();
  virtual ~CmdMsg_SaveDefaultConfigCmd();

  CmdMsg_SaveDefaultConfigCmd(const CmdMsg_SaveDefaultConfigCmd& from);

  inline CmdMsg_SaveDefaultConfigCmd& operator=(const CmdMsg_SaveDefaultConfigCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SaveDefaultConfigCmd(CmdMsg_SaveDefaultConfigCmd&& from) noexcept
    : CmdMsg_SaveDefaultConfigCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SaveDefaultConfigCmd& operator=(CmdMsg_SaveDefaultConfigCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SaveDefaultConfigCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SaveDefaultConfigCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SaveDefaultConfigCmd*>(
               &_CmdMsg_SaveDefaultConfigCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CmdMsg_SaveDefaultConfigCmd* other);
  friend void swap(CmdMsg_SaveDefaultConfigCmd& a, CmdMsg_SaveDefaultConfigCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SaveDefaultConfigCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SaveDefaultConfigCmd>(NULL);
  }

  CmdMsg_SaveDefaultConfigCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SaveDefaultConfigCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SaveDefaultConfigCmd& from);
  void MergeFrom(const CmdMsg_SaveDefaultConfigCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SaveDefaultConfigCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool reportErrStr = 1;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 1;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SaveDefaultConfigCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SaveConfigToFileCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SaveConfigToFileCmd) */ {
 public:
  CmdMsg_SaveConfigToFileCmd();
  virtual ~CmdMsg_SaveConfigToFileCmd();

  CmdMsg_SaveConfigToFileCmd(const CmdMsg_SaveConfigToFileCmd& from);

  inline CmdMsg_SaveConfigToFileCmd& operator=(const CmdMsg_SaveConfigToFileCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SaveConfigToFileCmd(CmdMsg_SaveConfigToFileCmd&& from) noexcept
    : CmdMsg_SaveConfigToFileCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SaveConfigToFileCmd& operator=(CmdMsg_SaveConfigToFileCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SaveConfigToFileCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SaveConfigToFileCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SaveConfigToFileCmd*>(
               &_CmdMsg_SaveConfigToFileCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CmdMsg_SaveConfigToFileCmd* other);
  friend void swap(CmdMsg_SaveConfigToFileCmd& a, CmdMsg_SaveConfigToFileCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SaveConfigToFileCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SaveConfigToFileCmd>(NULL);
  }

  CmdMsg_SaveConfigToFileCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SaveConfigToFileCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SaveConfigToFileCmd& from);
  void MergeFrom(const CmdMsg_SaveConfigToFileCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SaveConfigToFileCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SaveConfigToFileCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LoadConfigFromFileCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LoadConfigFromFileCmd) */ {
 public:
  CmdMsg_LoadConfigFromFileCmd();
  virtual ~CmdMsg_LoadConfigFromFileCmd();

  CmdMsg_LoadConfigFromFileCmd(const CmdMsg_LoadConfigFromFileCmd& from);

  inline CmdMsg_LoadConfigFromFileCmd& operator=(const CmdMsg_LoadConfigFromFileCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LoadConfigFromFileCmd(CmdMsg_LoadConfigFromFileCmd&& from) noexcept
    : CmdMsg_LoadConfigFromFileCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LoadConfigFromFileCmd& operator=(CmdMsg_LoadConfigFromFileCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LoadConfigFromFileCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LoadConfigFromFileCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LoadConfigFromFileCmd*>(
               &_CmdMsg_LoadConfigFromFileCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CmdMsg_LoadConfigFromFileCmd* other);
  friend void swap(CmdMsg_LoadConfigFromFileCmd& a, CmdMsg_LoadConfigFromFileCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LoadConfigFromFileCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_LoadConfigFromFileCmd>(NULL);
  }

  CmdMsg_LoadConfigFromFileCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LoadConfigFromFileCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LoadConfigFromFileCmd& from);
  void MergeFrom(const CmdMsg_LoadConfigFromFileCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LoadConfigFromFileCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LoadConfigFromFileCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_RestoreFactoryConfigCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.RestoreFactoryConfigCmd) */ {
 public:
  CmdMsg_RestoreFactoryConfigCmd();
  virtual ~CmdMsg_RestoreFactoryConfigCmd();

  CmdMsg_RestoreFactoryConfigCmd(const CmdMsg_RestoreFactoryConfigCmd& from);

  inline CmdMsg_RestoreFactoryConfigCmd& operator=(const CmdMsg_RestoreFactoryConfigCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_RestoreFactoryConfigCmd(CmdMsg_RestoreFactoryConfigCmd&& from) noexcept
    : CmdMsg_RestoreFactoryConfigCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_RestoreFactoryConfigCmd& operator=(CmdMsg_RestoreFactoryConfigCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_RestoreFactoryConfigCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_RestoreFactoryConfigCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_RestoreFactoryConfigCmd*>(
               &_CmdMsg_RestoreFactoryConfigCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CmdMsg_RestoreFactoryConfigCmd* other);
  friend void swap(CmdMsg_RestoreFactoryConfigCmd& a, CmdMsg_RestoreFactoryConfigCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_RestoreFactoryConfigCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_RestoreFactoryConfigCmd>(NULL);
  }

  CmdMsg_RestoreFactoryConfigCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_RestoreFactoryConfigCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_RestoreFactoryConfigCmd& from);
  void MergeFrom(const CmdMsg_RestoreFactoryConfigCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_RestoreFactoryConfigCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.RestoreFactoryConfigCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ParamSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ParamSet) */ {
 public:
  CmdMsg_ParamSet();
  virtual ~CmdMsg_ParamSet();

  CmdMsg_ParamSet(const CmdMsg_ParamSet& from);

  inline CmdMsg_ParamSet& operator=(const CmdMsg_ParamSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ParamSet(CmdMsg_ParamSet&& from) noexcept
    : CmdMsg_ParamSet() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ParamSet& operator=(CmdMsg_ParamSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ParamSet& default_instance();

  enum DataCase {
    kBoolVal = 10,
    kUintVal = 11,
    kIntVal = 12,
    kDoubleVal = 13,
    kStrVal = 14,
    kDataBytes = 15,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ParamSet* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ParamSet*>(
               &_CmdMsg_ParamSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CmdMsg_ParamSet* other);
  friend void swap(CmdMsg_ParamSet& a, CmdMsg_ParamSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ParamSet* New() const final {
    return CreateMaybeMessage<CmdMsg_ParamSet>(NULL);
  }

  CmdMsg_ParamSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ParamSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ParamSet& from);
  void MergeFrom(const CmdMsg_ParamSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ParamSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paramID = 1;
  void clear_paramid();
  static const int kParamIDFieldNumber = 1;
  const ::std::string& paramid() const;
  void set_paramid(const ::std::string& value);
  #if LANG_CXX11
  void set_paramid(::std::string&& value);
  #endif
  void set_paramid(const char* value);
  void set_paramid(const char* value, size_t size);
  ::std::string* mutable_paramid();
  ::std::string* release_paramid();
  void set_allocated_paramid(::std::string* paramid);

  // uint32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // bool boolVal = 10;
  private:
  bool has_boolval() const;
  public:
  void clear_boolval();
  static const int kBoolValFieldNumber = 10;
  bool boolval() const;
  void set_boolval(bool value);

  // uint32 uintVal = 11;
  private:
  bool has_uintval() const;
  public:
  void clear_uintval();
  static const int kUintValFieldNumber = 11;
  ::google::protobuf::uint32 uintval() const;
  void set_uintval(::google::protobuf::uint32 value);

  // sint32 intVal = 12;
  private:
  bool has_intval() const;
  public:
  void clear_intval();
  static const int kIntValFieldNumber = 12;
  ::google::protobuf::int32 intval() const;
  void set_intval(::google::protobuf::int32 value);

  // double doubleVal = 13;
  private:
  bool has_doubleval() const;
  public:
  void clear_doubleval();
  static const int kDoubleValFieldNumber = 13;
  double doubleval() const;
  void set_doubleval(double value);

  // string strVal = 14;
  private:
  bool has_strval() const;
  public:
  void clear_strval();
  static const int kStrValFieldNumber = 14;
  const ::std::string& strval() const;
  void set_strval(const ::std::string& value);
  #if LANG_CXX11
  void set_strval(::std::string&& value);
  #endif
  void set_strval(const char* value);
  void set_strval(const char* value, size_t size);
  ::std::string* mutable_strval();
  ::std::string* release_strval();
  void set_allocated_strval(::std::string* strval);

  // uint32 dataBytes = 15;
  private:
  bool has_databytes() const;
  public:
  void clear_databytes();
  static const int kDataBytesFieldNumber = 15;
  ::google::protobuf::uint32 databytes() const;
  void set_databytes(::google::protobuf::uint32 value);

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ParamSet)
 private:
  void set_has_boolval();
  void set_has_uintval();
  void set_has_intval();
  void set_has_doubleval();
  void set_has_strval();
  void set_has_databytes();

  inline bool has_Data() const;
  inline void clear_has_Data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr paramid_;
  ::google::protobuf::uint32 offset_;
  union DataUnion {
    DataUnion() {}
    bool boolval_;
    ::google::protobuf::uint32 uintval_;
    ::google::protobuf::int32 intval_;
    double doubleval_;
    ::google::protobuf::internal::ArenaStringPtr strval_;
    ::google::protobuf::uint32 databytes_;
  } Data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SetParamsCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SetParamsCmd) */ {
 public:
  CmdMsg_SetParamsCmd();
  virtual ~CmdMsg_SetParamsCmd();

  CmdMsg_SetParamsCmd(const CmdMsg_SetParamsCmd& from);

  inline CmdMsg_SetParamsCmd& operator=(const CmdMsg_SetParamsCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SetParamsCmd(CmdMsg_SetParamsCmd&& from) noexcept
    : CmdMsg_SetParamsCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SetParamsCmd& operator=(CmdMsg_SetParamsCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SetParamsCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SetParamsCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SetParamsCmd*>(
               &_CmdMsg_SetParamsCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CmdMsg_SetParamsCmd* other);
  friend void swap(CmdMsg_SetParamsCmd& a, CmdMsg_SetParamsCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SetParamsCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SetParamsCmd>(NULL);
  }

  CmdMsg_SetParamsCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SetParamsCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SetParamsCmd& from);
  void MergeFrom(const CmdMsg_SetParamsCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SetParamsCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.ParamSet params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  ::HaWC::CmdMsg_ParamSet* mutable_params(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamSet >*
      mutable_params();
  const ::HaWC::CmdMsg_ParamSet& params(int index) const;
  ::HaWC::CmdMsg_ParamSet* add_params();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamSet >&
      params() const;

  // .HaWC.Targets target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::HaWC::Targets target() const;
  void set_target(::HaWC::Targets value);

  // bool reportParamVals = 3;
  void clear_reportparamvals();
  static const int kReportParamValsFieldNumber = 3;
  bool reportparamvals() const;
  void set_reportparamvals(bool value);

  // bool reportErrStr = 4;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 4;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SetParamsCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamSet > params_;
  int target_;
  bool reportparamvals_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ParamLoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ParamLoc) */ {
 public:
  CmdMsg_ParamLoc();
  virtual ~CmdMsg_ParamLoc();

  CmdMsg_ParamLoc(const CmdMsg_ParamLoc& from);

  inline CmdMsg_ParamLoc& operator=(const CmdMsg_ParamLoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ParamLoc(CmdMsg_ParamLoc&& from) noexcept
    : CmdMsg_ParamLoc() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ParamLoc& operator=(CmdMsg_ParamLoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ParamLoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ParamLoc* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ParamLoc*>(
               &_CmdMsg_ParamLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CmdMsg_ParamLoc* other);
  friend void swap(CmdMsg_ParamLoc& a, CmdMsg_ParamLoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ParamLoc* New() const final {
    return CreateMaybeMessage<CmdMsg_ParamLoc>(NULL);
  }

  CmdMsg_ParamLoc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ParamLoc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ParamLoc& from);
  void MergeFrom(const CmdMsg_ParamLoc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ParamLoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ParamLoc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_GetParamsCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.GetParamsCmd) */ {
 public:
  CmdMsg_GetParamsCmd();
  virtual ~CmdMsg_GetParamsCmd();

  CmdMsg_GetParamsCmd(const CmdMsg_GetParamsCmd& from);

  inline CmdMsg_GetParamsCmd& operator=(const CmdMsg_GetParamsCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_GetParamsCmd(CmdMsg_GetParamsCmd&& from) noexcept
    : CmdMsg_GetParamsCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_GetParamsCmd& operator=(CmdMsg_GetParamsCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_GetParamsCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_GetParamsCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_GetParamsCmd*>(
               &_CmdMsg_GetParamsCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CmdMsg_GetParamsCmd* other);
  friend void swap(CmdMsg_GetParamsCmd& a, CmdMsg_GetParamsCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_GetParamsCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_GetParamsCmd>(NULL);
  }

  CmdMsg_GetParamsCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_GetParamsCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_GetParamsCmd& from);
  void MergeFrom(const CmdMsg_GetParamsCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_GetParamsCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.ParamLoc locations = 2;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 2;
  ::HaWC::CmdMsg_ParamLoc* mutable_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamLoc >*
      mutable_locations();
  const ::HaWC::CmdMsg_ParamLoc& locations(int index) const;
  ::HaWC::CmdMsg_ParamLoc* add_locations();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamLoc >&
      locations() const;

  // .HaWC.Targets target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::HaWC::Targets target() const;
  void set_target(::HaWC::Targets value);

  // bool reportErrStr = 3;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 3;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.GetParamsCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamLoc > locations_;
  int target_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_GetParamsCfgnCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.GetParamsCfgnCmd) */ {
 public:
  CmdMsg_GetParamsCfgnCmd();
  virtual ~CmdMsg_GetParamsCfgnCmd();

  CmdMsg_GetParamsCfgnCmd(const CmdMsg_GetParamsCfgnCmd& from);

  inline CmdMsg_GetParamsCfgnCmd& operator=(const CmdMsg_GetParamsCfgnCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_GetParamsCfgnCmd(CmdMsg_GetParamsCfgnCmd&& from) noexcept
    : CmdMsg_GetParamsCfgnCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_GetParamsCfgnCmd& operator=(CmdMsg_GetParamsCfgnCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_GetParamsCfgnCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_GetParamsCfgnCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_GetParamsCfgnCmd*>(
               &_CmdMsg_GetParamsCfgnCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CmdMsg_GetParamsCfgnCmd* other);
  friend void swap(CmdMsg_GetParamsCfgnCmd& a, CmdMsg_GetParamsCfgnCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_GetParamsCfgnCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_GetParamsCfgnCmd>(NULL);
  }

  CmdMsg_GetParamsCfgnCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_GetParamsCfgnCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_GetParamsCfgnCmd& from);
  void MergeFrom(const CmdMsg_GetParamsCfgnCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_GetParamsCfgnCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string paramIDs = 2;
  int paramids_size() const;
  void clear_paramids();
  static const int kParamIDsFieldNumber = 2;
  const ::std::string& paramids(int index) const;
  ::std::string* mutable_paramids(int index);
  void set_paramids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_paramids(int index, ::std::string&& value);
  #endif
  void set_paramids(int index, const char* value);
  void set_paramids(int index, const char* value, size_t size);
  ::std::string* add_paramids();
  void add_paramids(const ::std::string& value);
  #if LANG_CXX11
  void add_paramids(::std::string&& value);
  #endif
  void add_paramids(const char* value);
  void add_paramids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& paramids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramids();

  // .HaWC.Targets target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::HaWC::Targets target() const;
  void set_target(::HaWC::Targets value);

  // bool reportDescription = 3;
  void clear_reportdescription();
  static const int kReportDescriptionFieldNumber = 3;
  bool reportdescription() const;
  void set_reportdescription(bool value);

  // bool reportErrStr = 4;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 4;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.GetParamsCfgnCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramids_;
  int target_;
  bool reportdescription_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_GetFileHashCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.GetFileHashCmd) */ {
 public:
  CmdMsg_GetFileHashCmd();
  virtual ~CmdMsg_GetFileHashCmd();

  CmdMsg_GetFileHashCmd(const CmdMsg_GetFileHashCmd& from);

  inline CmdMsg_GetFileHashCmd& operator=(const CmdMsg_GetFileHashCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_GetFileHashCmd(CmdMsg_GetFileHashCmd&& from) noexcept
    : CmdMsg_GetFileHashCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_GetFileHashCmd& operator=(CmdMsg_GetFileHashCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_GetFileHashCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_GetFileHashCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_GetFileHashCmd*>(
               &_CmdMsg_GetFileHashCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CmdMsg_GetFileHashCmd* other);
  friend void swap(CmdMsg_GetFileHashCmd& a, CmdMsg_GetFileHashCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_GetFileHashCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_GetFileHashCmd>(NULL);
  }

  CmdMsg_GetFileHashCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_GetFileHashCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_GetFileHashCmd& from);
  void MergeFrom(const CmdMsg_GetFileHashCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_GetFileHashCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.GetFileHashCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_AppManagerCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.AppManagerCmd) */ {
 public:
  CmdMsg_AppManagerCmd();
  virtual ~CmdMsg_AppManagerCmd();

  CmdMsg_AppManagerCmd(const CmdMsg_AppManagerCmd& from);

  inline CmdMsg_AppManagerCmd& operator=(const CmdMsg_AppManagerCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_AppManagerCmd(CmdMsg_AppManagerCmd&& from) noexcept
    : CmdMsg_AppManagerCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_AppManagerCmd& operator=(CmdMsg_AppManagerCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_AppManagerCmd& default_instance();

  enum CommandCase {
    kClose = 2,
    kSaveDefaultConfig = 5,
    kSaveConfigToFile = 6,
    kLoadConfigFromFile = 7,
    kRestoreFactoryConfig = 8,
    kSetParams = 9,
    kGetParams = 10,
    kGetParamsCfgn = 11,
    kGetFileHash = 15,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_AppManagerCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_AppManagerCmd*>(
               &_CmdMsg_AppManagerCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CmdMsg_AppManagerCmd* other);
  friend void swap(CmdMsg_AppManagerCmd& a, CmdMsg_AppManagerCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_AppManagerCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_AppManagerCmd>(NULL);
  }

  CmdMsg_AppManagerCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_AppManagerCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_AppManagerCmd& from);
  void MergeFrom(const CmdMsg_AppManagerCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_AppManagerCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HaWC.CmdMsg.CloseCmd close = 2;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 2;
  private:
  const ::HaWC::CmdMsg_CloseCmd& _internal_close() const;
  public:
  const ::HaWC::CmdMsg_CloseCmd& close() const;
  ::HaWC::CmdMsg_CloseCmd* release_close();
  ::HaWC::CmdMsg_CloseCmd* mutable_close();
  void set_allocated_close(::HaWC::CmdMsg_CloseCmd* close);

  // .HaWC.CmdMsg.SaveDefaultConfigCmd saveDefaultConfig = 5;
  bool has_savedefaultconfig() const;
  void clear_savedefaultconfig();
  static const int kSaveDefaultConfigFieldNumber = 5;
  private:
  const ::HaWC::CmdMsg_SaveDefaultConfigCmd& _internal_savedefaultconfig() const;
  public:
  const ::HaWC::CmdMsg_SaveDefaultConfigCmd& savedefaultconfig() const;
  ::HaWC::CmdMsg_SaveDefaultConfigCmd* release_savedefaultconfig();
  ::HaWC::CmdMsg_SaveDefaultConfigCmd* mutable_savedefaultconfig();
  void set_allocated_savedefaultconfig(::HaWC::CmdMsg_SaveDefaultConfigCmd* savedefaultconfig);

  // .HaWC.CmdMsg.SaveConfigToFileCmd saveConfigToFile = 6;
  bool has_saveconfigtofile() const;
  void clear_saveconfigtofile();
  static const int kSaveConfigToFileFieldNumber = 6;
  private:
  const ::HaWC::CmdMsg_SaveConfigToFileCmd& _internal_saveconfigtofile() const;
  public:
  const ::HaWC::CmdMsg_SaveConfigToFileCmd& saveconfigtofile() const;
  ::HaWC::CmdMsg_SaveConfigToFileCmd* release_saveconfigtofile();
  ::HaWC::CmdMsg_SaveConfigToFileCmd* mutable_saveconfigtofile();
  void set_allocated_saveconfigtofile(::HaWC::CmdMsg_SaveConfigToFileCmd* saveconfigtofile);

  // .HaWC.CmdMsg.LoadConfigFromFileCmd loadConfigFromFile = 7;
  bool has_loadconfigfromfile() const;
  void clear_loadconfigfromfile();
  static const int kLoadConfigFromFileFieldNumber = 7;
  private:
  const ::HaWC::CmdMsg_LoadConfigFromFileCmd& _internal_loadconfigfromfile() const;
  public:
  const ::HaWC::CmdMsg_LoadConfigFromFileCmd& loadconfigfromfile() const;
  ::HaWC::CmdMsg_LoadConfigFromFileCmd* release_loadconfigfromfile();
  ::HaWC::CmdMsg_LoadConfigFromFileCmd* mutable_loadconfigfromfile();
  void set_allocated_loadconfigfromfile(::HaWC::CmdMsg_LoadConfigFromFileCmd* loadconfigfromfile);

  // .HaWC.CmdMsg.RestoreFactoryConfigCmd restoreFactoryConfig = 8;
  bool has_restorefactoryconfig() const;
  void clear_restorefactoryconfig();
  static const int kRestoreFactoryConfigFieldNumber = 8;
  private:
  const ::HaWC::CmdMsg_RestoreFactoryConfigCmd& _internal_restorefactoryconfig() const;
  public:
  const ::HaWC::CmdMsg_RestoreFactoryConfigCmd& restorefactoryconfig() const;
  ::HaWC::CmdMsg_RestoreFactoryConfigCmd* release_restorefactoryconfig();
  ::HaWC::CmdMsg_RestoreFactoryConfigCmd* mutable_restorefactoryconfig();
  void set_allocated_restorefactoryconfig(::HaWC::CmdMsg_RestoreFactoryConfigCmd* restorefactoryconfig);

  // .HaWC.CmdMsg.SetParamsCmd setParams = 9;
  bool has_setparams() const;
  void clear_setparams();
  static const int kSetParamsFieldNumber = 9;
  private:
  const ::HaWC::CmdMsg_SetParamsCmd& _internal_setparams() const;
  public:
  const ::HaWC::CmdMsg_SetParamsCmd& setparams() const;
  ::HaWC::CmdMsg_SetParamsCmd* release_setparams();
  ::HaWC::CmdMsg_SetParamsCmd* mutable_setparams();
  void set_allocated_setparams(::HaWC::CmdMsg_SetParamsCmd* setparams);

  // .HaWC.CmdMsg.GetParamsCmd getParams = 10;
  bool has_getparams() const;
  void clear_getparams();
  static const int kGetParamsFieldNumber = 10;
  private:
  const ::HaWC::CmdMsg_GetParamsCmd& _internal_getparams() const;
  public:
  const ::HaWC::CmdMsg_GetParamsCmd& getparams() const;
  ::HaWC::CmdMsg_GetParamsCmd* release_getparams();
  ::HaWC::CmdMsg_GetParamsCmd* mutable_getparams();
  void set_allocated_getparams(::HaWC::CmdMsg_GetParamsCmd* getparams);

  // .HaWC.CmdMsg.GetParamsCfgnCmd getParamsCfgn = 11;
  bool has_getparamscfgn() const;
  void clear_getparamscfgn();
  static const int kGetParamsCfgnFieldNumber = 11;
  private:
  const ::HaWC::CmdMsg_GetParamsCfgnCmd& _internal_getparamscfgn() const;
  public:
  const ::HaWC::CmdMsg_GetParamsCfgnCmd& getparamscfgn() const;
  ::HaWC::CmdMsg_GetParamsCfgnCmd* release_getparamscfgn();
  ::HaWC::CmdMsg_GetParamsCfgnCmd* mutable_getparamscfgn();
  void set_allocated_getparamscfgn(::HaWC::CmdMsg_GetParamsCfgnCmd* getparamscfgn);

  // .HaWC.CmdMsg.GetFileHashCmd getFileHash = 15;
  bool has_getfilehash() const;
  void clear_getfilehash();
  static const int kGetFileHashFieldNumber = 15;
  private:
  const ::HaWC::CmdMsg_GetFileHashCmd& _internal_getfilehash() const;
  public:
  const ::HaWC::CmdMsg_GetFileHashCmd& getfilehash() const;
  ::HaWC::CmdMsg_GetFileHashCmd* release_getfilehash();
  ::HaWC::CmdMsg_GetFileHashCmd* mutable_getfilehash();
  void set_allocated_getfilehash(::HaWC::CmdMsg_GetFileHashCmd* getfilehash);

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.AppManagerCmd)
 private:
  void set_has_close();
  void set_has_savedefaultconfig();
  void set_has_saveconfigtofile();
  void set_has_loadconfigfromfile();
  void set_has_restorefactoryconfig();
  void set_has_setparams();
  void set_has_getparams();
  void set_has_getparamscfgn();
  void set_has_getfilehash();

  inline bool has_command() const;
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union CommandUnion {
    CommandUnion() {}
    ::HaWC::CmdMsg_CloseCmd* close_;
    ::HaWC::CmdMsg_SaveDefaultConfigCmd* savedefaultconfig_;
    ::HaWC::CmdMsg_SaveConfigToFileCmd* saveconfigtofile_;
    ::HaWC::CmdMsg_LoadConfigFromFileCmd* loadconfigfromfile_;
    ::HaWC::CmdMsg_RestoreFactoryConfigCmd* restorefactoryconfig_;
    ::HaWC::CmdMsg_SetParamsCmd* setparams_;
    ::HaWC::CmdMsg_GetParamsCmd* getparams_;
    ::HaWC::CmdMsg_GetParamsCfgnCmd* getparamscfgn_;
    ::HaWC::CmdMsg_GetFileHashCmd* getfilehash_;
  } command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LineProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LineProperty) */ {
 public:
  CmdMsg_LineProperty();
  virtual ~CmdMsg_LineProperty();

  CmdMsg_LineProperty(const CmdMsg_LineProperty& from);

  inline CmdMsg_LineProperty& operator=(const CmdMsg_LineProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LineProperty(CmdMsg_LineProperty&& from) noexcept
    : CmdMsg_LineProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LineProperty& operator=(CmdMsg_LineProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LineProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kPt1X = 2,
    kPt1Y = 3,
    kPt2X = 4,
    kPt2Y = 5,
    kWidth = 6,
    kColor = 7,
    kOpacity = 8,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LineProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LineProperty*>(
               &_CmdMsg_LineProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CmdMsg_LineProperty* other);
  friend void swap(CmdMsg_LineProperty& a, CmdMsg_LineProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LineProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_LineProperty>(NULL);
  }

  CmdMsg_LineProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LineProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LineProperty& from);
  void MergeFrom(const CmdMsg_LineProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LineProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float pt1x = 2;
  private:
  bool has_pt1x() const;
  public:
  void clear_pt1x();
  static const int kPt1XFieldNumber = 2;
  float pt1x() const;
  void set_pt1x(float value);

  // float pt1y = 3;
  private:
  bool has_pt1y() const;
  public:
  void clear_pt1y();
  static const int kPt1YFieldNumber = 3;
  float pt1y() const;
  void set_pt1y(float value);

  // float pt2x = 4;
  private:
  bool has_pt2x() const;
  public:
  void clear_pt2x();
  static const int kPt2XFieldNumber = 4;
  float pt2x() const;
  void set_pt2x(float value);

  // float pt2y = 5;
  private:
  bool has_pt2y() const;
  public:
  void clear_pt2y();
  static const int kPt2YFieldNumber = 5;
  float pt2y() const;
  void set_pt2y(float value);

  // float width = 6;
  private:
  bool has_width() const;
  public:
  void clear_width();
  static const int kWidthFieldNumber = 6;
  float width() const;
  void set_width(float value);

  // string color = 7;
  private:
  bool has_color() const;
  public:
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // float opacity = 8;
  private:
  bool has_opacity() const;
  public:
  void clear_opacity();
  static const int kOpacityFieldNumber = 8;
  float opacity() const;
  void set_opacity(float value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LineProperty)
 private:
  void set_has_visible();
  void set_has_pt1x();
  void set_has_pt1y();
  void set_has_pt2x();
  void set_has_pt2y();
  void set_has_width();
  void set_has_color();
  void set_has_opacity();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float pt1x_;
    float pt1y_;
    float pt2x_;
    float pt2y_;
    float width_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    float opacity_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LineProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LineProperties) */ {
 public:
  CmdMsg_LineProperties();
  virtual ~CmdMsg_LineProperties();

  CmdMsg_LineProperties(const CmdMsg_LineProperties& from);

  inline CmdMsg_LineProperties& operator=(const CmdMsg_LineProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LineProperties(CmdMsg_LineProperties&& from) noexcept
    : CmdMsg_LineProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LineProperties& operator=(CmdMsg_LineProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LineProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LineProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LineProperties*>(
               &_CmdMsg_LineProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CmdMsg_LineProperties* other);
  friend void swap(CmdMsg_LineProperties& a, CmdMsg_LineProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LineProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_LineProperties>(NULL);
  }

  CmdMsg_LineProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LineProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LineProperties& from);
  void MergeFrom(const CmdMsg_LineProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LineProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.LineProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_LineProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LineProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_LineProperty& properties(int index) const;
  ::HaWC::CmdMsg_LineProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LineProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LineProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LineProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_CircleProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.CircleProperty) */ {
 public:
  CmdMsg_CircleProperty();
  virtual ~CmdMsg_CircleProperty();

  CmdMsg_CircleProperty(const CmdMsg_CircleProperty& from);

  inline CmdMsg_CircleProperty& operator=(const CmdMsg_CircleProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_CircleProperty(CmdMsg_CircleProperty&& from) noexcept
    : CmdMsg_CircleProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_CircleProperty& operator=(CmdMsg_CircleProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_CircleProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kX = 2,
    kY = 3,
    kRadius = 4,
    kColor = 5,
    kBorderWidth = 6,
    kBorderColor = 7,
    kOpacity = 8,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_CircleProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_CircleProperty*>(
               &_CmdMsg_CircleProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CmdMsg_CircleProperty* other);
  friend void swap(CmdMsg_CircleProperty& a, CmdMsg_CircleProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_CircleProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_CircleProperty>(NULL);
  }

  CmdMsg_CircleProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_CircleProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_CircleProperty& from);
  void MergeFrom(const CmdMsg_CircleProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_CircleProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float x = 2;
  private:
  bool has_x() const;
  public:
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  private:
  bool has_y() const;
  public:
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float radius = 4;
  private:
  bool has_radius() const;
  public:
  void clear_radius();
  static const int kRadiusFieldNumber = 4;
  float radius() const;
  void set_radius(float value);

  // string color = 5;
  private:
  bool has_color() const;
  public:
  void clear_color();
  static const int kColorFieldNumber = 5;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // float border_width = 6;
  private:
  bool has_border_width() const;
  public:
  void clear_border_width();
  static const int kBorderWidthFieldNumber = 6;
  float border_width() const;
  void set_border_width(float value);

  // string border_color = 7;
  private:
  bool has_border_color() const;
  public:
  void clear_border_color();
  static const int kBorderColorFieldNumber = 7;
  const ::std::string& border_color() const;
  void set_border_color(const ::std::string& value);
  #if LANG_CXX11
  void set_border_color(::std::string&& value);
  #endif
  void set_border_color(const char* value);
  void set_border_color(const char* value, size_t size);
  ::std::string* mutable_border_color();
  ::std::string* release_border_color();
  void set_allocated_border_color(::std::string* border_color);

  // float opacity = 8;
  private:
  bool has_opacity() const;
  public:
  void clear_opacity();
  static const int kOpacityFieldNumber = 8;
  float opacity() const;
  void set_opacity(float value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.CircleProperty)
 private:
  void set_has_visible();
  void set_has_x();
  void set_has_y();
  void set_has_radius();
  void set_has_color();
  void set_has_border_width();
  void set_has_border_color();
  void set_has_opacity();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float x_;
    float y_;
    float radius_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    float border_width_;
    ::google::protobuf::internal::ArenaStringPtr border_color_;
    float opacity_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_CircleProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.CircleProperties) */ {
 public:
  CmdMsg_CircleProperties();
  virtual ~CmdMsg_CircleProperties();

  CmdMsg_CircleProperties(const CmdMsg_CircleProperties& from);

  inline CmdMsg_CircleProperties& operator=(const CmdMsg_CircleProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_CircleProperties(CmdMsg_CircleProperties&& from) noexcept
    : CmdMsg_CircleProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_CircleProperties& operator=(CmdMsg_CircleProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_CircleProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_CircleProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_CircleProperties*>(
               &_CmdMsg_CircleProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CmdMsg_CircleProperties* other);
  friend void swap(CmdMsg_CircleProperties& a, CmdMsg_CircleProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_CircleProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_CircleProperties>(NULL);
  }

  CmdMsg_CircleProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_CircleProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_CircleProperties& from);
  void MergeFrom(const CmdMsg_CircleProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_CircleProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.CircleProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_CircleProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_CircleProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_CircleProperty& properties(int index) const;
  ::HaWC::CmdMsg_CircleProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_CircleProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.CircleProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_CircleProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_RectangleProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.RectangleProperty) */ {
 public:
  CmdMsg_RectangleProperty();
  virtual ~CmdMsg_RectangleProperty();

  CmdMsg_RectangleProperty(const CmdMsg_RectangleProperty& from);

  inline CmdMsg_RectangleProperty& operator=(const CmdMsg_RectangleProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_RectangleProperty(CmdMsg_RectangleProperty&& from) noexcept
    : CmdMsg_RectangleProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_RectangleProperty& operator=(CmdMsg_RectangleProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_RectangleProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kX = 2,
    kY = 3,
    kWidth = 4,
    kHeight = 5,
    kColor = 6,
    kBorderWidth = 7,
    kBorderColor = 8,
    kRadius = 9,
    kOpacity = 10,
    kRotation = 11,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_RectangleProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_RectangleProperty*>(
               &_CmdMsg_RectangleProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CmdMsg_RectangleProperty* other);
  friend void swap(CmdMsg_RectangleProperty& a, CmdMsg_RectangleProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_RectangleProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_RectangleProperty>(NULL);
  }

  CmdMsg_RectangleProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_RectangleProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_RectangleProperty& from);
  void MergeFrom(const CmdMsg_RectangleProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_RectangleProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float x = 2;
  private:
  bool has_x() const;
  public:
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  private:
  bool has_y() const;
  public:
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float width = 4;
  private:
  bool has_width() const;
  public:
  void clear_width();
  static const int kWidthFieldNumber = 4;
  float width() const;
  void set_width(float value);

  // float height = 5;
  private:
  bool has_height() const;
  public:
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // string color = 6;
  private:
  bool has_color() const;
  public:
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // float border_width = 7;
  private:
  bool has_border_width() const;
  public:
  void clear_border_width();
  static const int kBorderWidthFieldNumber = 7;
  float border_width() const;
  void set_border_width(float value);

  // string border_color = 8;
  private:
  bool has_border_color() const;
  public:
  void clear_border_color();
  static const int kBorderColorFieldNumber = 8;
  const ::std::string& border_color() const;
  void set_border_color(const ::std::string& value);
  #if LANG_CXX11
  void set_border_color(::std::string&& value);
  #endif
  void set_border_color(const char* value);
  void set_border_color(const char* value, size_t size);
  ::std::string* mutable_border_color();
  ::std::string* release_border_color();
  void set_allocated_border_color(::std::string* border_color);

  // float radius = 9;
  private:
  bool has_radius() const;
  public:
  void clear_radius();
  static const int kRadiusFieldNumber = 9;
  float radius() const;
  void set_radius(float value);

  // float opacity = 10;
  private:
  bool has_opacity() const;
  public:
  void clear_opacity();
  static const int kOpacityFieldNumber = 10;
  float opacity() const;
  void set_opacity(float value);

  // float rotation = 11;
  private:
  bool has_rotation() const;
  public:
  void clear_rotation();
  static const int kRotationFieldNumber = 11;
  float rotation() const;
  void set_rotation(float value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.RectangleProperty)
 private:
  void set_has_visible();
  void set_has_x();
  void set_has_y();
  void set_has_width();
  void set_has_height();
  void set_has_color();
  void set_has_border_width();
  void set_has_border_color();
  void set_has_radius();
  void set_has_opacity();
  void set_has_rotation();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float x_;
    float y_;
    float width_;
    float height_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    float border_width_;
    ::google::protobuf::internal::ArenaStringPtr border_color_;
    float radius_;
    float opacity_;
    float rotation_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_RectangleProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.RectangleProperties) */ {
 public:
  CmdMsg_RectangleProperties();
  virtual ~CmdMsg_RectangleProperties();

  CmdMsg_RectangleProperties(const CmdMsg_RectangleProperties& from);

  inline CmdMsg_RectangleProperties& operator=(const CmdMsg_RectangleProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_RectangleProperties(CmdMsg_RectangleProperties&& from) noexcept
    : CmdMsg_RectangleProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_RectangleProperties& operator=(CmdMsg_RectangleProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_RectangleProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_RectangleProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_RectangleProperties*>(
               &_CmdMsg_RectangleProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(CmdMsg_RectangleProperties* other);
  friend void swap(CmdMsg_RectangleProperties& a, CmdMsg_RectangleProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_RectangleProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_RectangleProperties>(NULL);
  }

  CmdMsg_RectangleProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_RectangleProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_RectangleProperties& from);
  void MergeFrom(const CmdMsg_RectangleProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_RectangleProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.RectangleProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_RectangleProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_RectangleProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_RectangleProperty& properties(int index) const;
  ::HaWC::CmdMsg_RectangleProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_RectangleProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.RectangleProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_RectangleProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ImageProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ImageProperty) */ {
 public:
  CmdMsg_ImageProperty();
  virtual ~CmdMsg_ImageProperty();

  CmdMsg_ImageProperty(const CmdMsg_ImageProperty& from);

  inline CmdMsg_ImageProperty& operator=(const CmdMsg_ImageProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ImageProperty(CmdMsg_ImageProperty&& from) noexcept
    : CmdMsg_ImageProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ImageProperty& operator=(CmdMsg_ImageProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ImageProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kX = 2,
    kY = 3,
    kWidth = 4,
    kHeight = 5,
    kSource = 6,
    kFillMode = 7,
    kOpacity = 8,
    kRotation = 9,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ImageProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ImageProperty*>(
               &_CmdMsg_ImageProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CmdMsg_ImageProperty* other);
  friend void swap(CmdMsg_ImageProperty& a, CmdMsg_ImageProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ImageProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_ImageProperty>(NULL);
  }

  CmdMsg_ImageProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ImageProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ImageProperty& from);
  void MergeFrom(const CmdMsg_ImageProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ImageProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float x = 2;
  private:
  bool has_x() const;
  public:
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  private:
  bool has_y() const;
  public:
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float width = 4;
  private:
  bool has_width() const;
  public:
  void clear_width();
  static const int kWidthFieldNumber = 4;
  float width() const;
  void set_width(float value);

  // float height = 5;
  private:
  bool has_height() const;
  public:
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // string source = 6;
  private:
  bool has_source() const;
  public:
  void clear_source();
  static const int kSourceFieldNumber = 6;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // .HaWC.CmdMsg.FillMode fillMode = 7;
  private:
  bool has_fillmode() const;
  public:
  void clear_fillmode();
  static const int kFillModeFieldNumber = 7;
  ::HaWC::CmdMsg_FillMode fillmode() const;
  void set_fillmode(::HaWC::CmdMsg_FillMode value);

  // float opacity = 8;
  private:
  bool has_opacity() const;
  public:
  void clear_opacity();
  static const int kOpacityFieldNumber = 8;
  float opacity() const;
  void set_opacity(float value);

  // float rotation = 9;
  private:
  bool has_rotation() const;
  public:
  void clear_rotation();
  static const int kRotationFieldNumber = 9;
  float rotation() const;
  void set_rotation(float value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ImageProperty)
 private:
  void set_has_visible();
  void set_has_x();
  void set_has_y();
  void set_has_width();
  void set_has_height();
  void set_has_source();
  void set_has_fillmode();
  void set_has_opacity();
  void set_has_rotation();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float x_;
    float y_;
    float width_;
    float height_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    int fillmode_;
    float opacity_;
    float rotation_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ImageProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ImageProperties) */ {
 public:
  CmdMsg_ImageProperties();
  virtual ~CmdMsg_ImageProperties();

  CmdMsg_ImageProperties(const CmdMsg_ImageProperties& from);

  inline CmdMsg_ImageProperties& operator=(const CmdMsg_ImageProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ImageProperties(CmdMsg_ImageProperties&& from) noexcept
    : CmdMsg_ImageProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ImageProperties& operator=(CmdMsg_ImageProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ImageProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ImageProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ImageProperties*>(
               &_CmdMsg_ImageProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CmdMsg_ImageProperties* other);
  friend void swap(CmdMsg_ImageProperties& a, CmdMsg_ImageProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ImageProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_ImageProperties>(NULL);
  }

  CmdMsg_ImageProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ImageProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ImageProperties& from);
  void MergeFrom(const CmdMsg_ImageProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ImageProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.ImageProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_ImageProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ImageProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_ImageProperty& properties(int index) const;
  ::HaWC::CmdMsg_ImageProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ImageProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ImageProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ImageProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_FileListProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.FileListProperty) */ {
 public:
  CmdMsg_FileListProperty();
  virtual ~CmdMsg_FileListProperty();

  CmdMsg_FileListProperty(const CmdMsg_FileListProperty& from);

  inline CmdMsg_FileListProperty& operator=(const CmdMsg_FileListProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_FileListProperty(CmdMsg_FileListProperty&& from) noexcept
    : CmdMsg_FileListProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_FileListProperty& operator=(CmdMsg_FileListProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_FileListProperty& default_instance();

  enum PropertyCase {
    kItem = 1,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_FileListProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_FileListProperty*>(
               &_CmdMsg_FileListProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CmdMsg_FileListProperty* other);
  friend void swap(CmdMsg_FileListProperty& a, CmdMsg_FileListProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_FileListProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_FileListProperty>(NULL);
  }

  CmdMsg_FileListProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_FileListProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_FileListProperty& from);
  void MergeFrom(const CmdMsg_FileListProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_FileListProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string item = 1;
  private:
  bool has_item() const;
  public:
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::std::string& item() const;
  void set_item(const ::std::string& value);
  #if LANG_CXX11
  void set_item(::std::string&& value);
  #endif
  void set_item(const char* value);
  void set_item(const char* value, size_t size);
  ::std::string* mutable_item();
  ::std::string* release_item();
  void set_allocated_item(::std::string* item);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.FileListProperty)
 private:
  void set_has_item();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    ::google::protobuf::internal::ArenaStringPtr item_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_FileListProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.FileListProperties) */ {
 public:
  CmdMsg_FileListProperties();
  virtual ~CmdMsg_FileListProperties();

  CmdMsg_FileListProperties(const CmdMsg_FileListProperties& from);

  inline CmdMsg_FileListProperties& operator=(const CmdMsg_FileListProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_FileListProperties(CmdMsg_FileListProperties&& from) noexcept
    : CmdMsg_FileListProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_FileListProperties& operator=(CmdMsg_FileListProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_FileListProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_FileListProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_FileListProperties*>(
               &_CmdMsg_FileListProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CmdMsg_FileListProperties* other);
  friend void swap(CmdMsg_FileListProperties& a, CmdMsg_FileListProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_FileListProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_FileListProperties>(NULL);
  }

  CmdMsg_FileListProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_FileListProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_FileListProperties& from);
  void MergeFrom(const CmdMsg_FileListProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_FileListProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.FileListProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_FileListProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_FileListProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_FileListProperty& properties(int index) const;
  ::HaWC::CmdMsg_FileListProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_FileListProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.FileListProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_FileListProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ToolBarProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ToolBarProperty) */ {
 public:
  CmdMsg_ToolBarProperty();
  virtual ~CmdMsg_ToolBarProperty();

  CmdMsg_ToolBarProperty(const CmdMsg_ToolBarProperty& from);

  inline CmdMsg_ToolBarProperty& operator=(const CmdMsg_ToolBarProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ToolBarProperty(CmdMsg_ToolBarProperty&& from) noexcept
    : CmdMsg_ToolBarProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ToolBarProperty& operator=(CmdMsg_ToolBarProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ToolBarProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kX = 2,
    kY = 3,
    kWidth = 4,
    kHeight = 5,
    kOptions = 6,
    kIconsSpacing = 7,
    kMargins = 8,
    kIsVertical = 9,
    kBackColor = 10,
    kSelected = 11,
    kSelectedColor = 12,
    kSelectedBorderColor = 13,
    kSelectedBorderWidth = 14,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ToolBarProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ToolBarProperty*>(
               &_CmdMsg_ToolBarProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CmdMsg_ToolBarProperty* other);
  friend void swap(CmdMsg_ToolBarProperty& a, CmdMsg_ToolBarProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ToolBarProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_ToolBarProperty>(NULL);
  }

  CmdMsg_ToolBarProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ToolBarProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ToolBarProperty& from);
  void MergeFrom(const CmdMsg_ToolBarProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ToolBarProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float x = 2;
  private:
  bool has_x() const;
  public:
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  private:
  bool has_y() const;
  public:
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float width = 4;
  private:
  bool has_width() const;
  public:
  void clear_width();
  static const int kWidthFieldNumber = 4;
  float width() const;
  void set_width(float value);

  // float height = 5;
  private:
  bool has_height() const;
  public:
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // string options___ = 6;
  private:
  bool has_options___() const;
  public:
  void clear_options___();
  static const int kOptionsFieldNumber = 6;
  const ::std::string& options___() const;
  void set_options___(const ::std::string& value);
  #if LANG_CXX11
  void set_options___(::std::string&& value);
  #endif
  void set_options___(const char* value);
  void set_options___(const char* value, size_t size);
  ::std::string* mutable_options___();
  ::std::string* release_options___();
  void set_allocated_options___(::std::string* options___);

  // uint32 iconsSpacing = 7;
  private:
  bool has_iconsspacing() const;
  public:
  void clear_iconsspacing();
  static const int kIconsSpacingFieldNumber = 7;
  ::google::protobuf::uint32 iconsspacing() const;
  void set_iconsspacing(::google::protobuf::uint32 value);

  // uint32 margins = 8;
  private:
  bool has_margins() const;
  public:
  void clear_margins();
  static const int kMarginsFieldNumber = 8;
  ::google::protobuf::uint32 margins() const;
  void set_margins(::google::protobuf::uint32 value);

  // bool isVertical = 9;
  private:
  bool has_isvertical() const;
  public:
  void clear_isvertical();
  static const int kIsVerticalFieldNumber = 9;
  bool isvertical() const;
  void set_isvertical(bool value);

  // string backColor = 10;
  private:
  bool has_backcolor() const;
  public:
  void clear_backcolor();
  static const int kBackColorFieldNumber = 10;
  const ::std::string& backcolor() const;
  void set_backcolor(const ::std::string& value);
  #if LANG_CXX11
  void set_backcolor(::std::string&& value);
  #endif
  void set_backcolor(const char* value);
  void set_backcolor(const char* value, size_t size);
  ::std::string* mutable_backcolor();
  ::std::string* release_backcolor();
  void set_allocated_backcolor(::std::string* backcolor);

  // int32 selected = 11;
  private:
  bool has_selected() const;
  public:
  void clear_selected();
  static const int kSelectedFieldNumber = 11;
  ::google::protobuf::int32 selected() const;
  void set_selected(::google::protobuf::int32 value);

  // string selectedColor = 12;
  private:
  bool has_selectedcolor() const;
  public:
  void clear_selectedcolor();
  static const int kSelectedColorFieldNumber = 12;
  const ::std::string& selectedcolor() const;
  void set_selectedcolor(const ::std::string& value);
  #if LANG_CXX11
  void set_selectedcolor(::std::string&& value);
  #endif
  void set_selectedcolor(const char* value);
  void set_selectedcolor(const char* value, size_t size);
  ::std::string* mutable_selectedcolor();
  ::std::string* release_selectedcolor();
  void set_allocated_selectedcolor(::std::string* selectedcolor);

  // string selectedBorderColor = 13;
  private:
  bool has_selectedbordercolor() const;
  public:
  void clear_selectedbordercolor();
  static const int kSelectedBorderColorFieldNumber = 13;
  const ::std::string& selectedbordercolor() const;
  void set_selectedbordercolor(const ::std::string& value);
  #if LANG_CXX11
  void set_selectedbordercolor(::std::string&& value);
  #endif
  void set_selectedbordercolor(const char* value);
  void set_selectedbordercolor(const char* value, size_t size);
  ::std::string* mutable_selectedbordercolor();
  ::std::string* release_selectedbordercolor();
  void set_allocated_selectedbordercolor(::std::string* selectedbordercolor);

  // int32 selectedBorderWidth = 14;
  private:
  bool has_selectedborderwidth() const;
  public:
  void clear_selectedborderwidth();
  static const int kSelectedBorderWidthFieldNumber = 14;
  ::google::protobuf::int32 selectedborderwidth() const;
  void set_selectedborderwidth(::google::protobuf::int32 value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ToolBarProperty)
 private:
  void set_has_visible();
  void set_has_x();
  void set_has_y();
  void set_has_width();
  void set_has_height();
  void set_has_options___();
  void set_has_iconsspacing();
  void set_has_margins();
  void set_has_isvertical();
  void set_has_backcolor();
  void set_has_selected();
  void set_has_selectedcolor();
  void set_has_selectedbordercolor();
  void set_has_selectedborderwidth();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float x_;
    float y_;
    float width_;
    float height_;
    ::google::protobuf::internal::ArenaStringPtr options____;
    ::google::protobuf::uint32 iconsspacing_;
    ::google::protobuf::uint32 margins_;
    bool isvertical_;
    ::google::protobuf::internal::ArenaStringPtr backcolor_;
    ::google::protobuf::int32 selected_;
    ::google::protobuf::internal::ArenaStringPtr selectedcolor_;
    ::google::protobuf::internal::ArenaStringPtr selectedbordercolor_;
    ::google::protobuf::int32 selectedborderwidth_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ListProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ListProperty) */ {
 public:
  CmdMsg_ListProperty();
  virtual ~CmdMsg_ListProperty();

  CmdMsg_ListProperty(const CmdMsg_ListProperty& from);

  inline CmdMsg_ListProperty& operator=(const CmdMsg_ListProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ListProperty(CmdMsg_ListProperty&& from) noexcept
    : CmdMsg_ListProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ListProperty& operator=(CmdMsg_ListProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ListProperty& default_instance();

  enum PropertyCase {
    kItem = 1,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ListProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ListProperty*>(
               &_CmdMsg_ListProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CmdMsg_ListProperty* other);
  friend void swap(CmdMsg_ListProperty& a, CmdMsg_ListProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ListProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_ListProperty>(NULL);
  }

  CmdMsg_ListProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ListProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ListProperty& from);
  void MergeFrom(const CmdMsg_ListProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ListProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string item = 1;
  private:
  bool has_item() const;
  public:
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::std::string& item() const;
  void set_item(const ::std::string& value);
  #if LANG_CXX11
  void set_item(::std::string&& value);
  #endif
  void set_item(const char* value);
  void set_item(const char* value, size_t size);
  ::std::string* mutable_item();
  ::std::string* release_item();
  void set_allocated_item(::std::string* item);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ListProperty)
 private:
  void set_has_item();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    ::google::protobuf::internal::ArenaStringPtr item_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ListProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ListProperties) */ {
 public:
  CmdMsg_ListProperties();
  virtual ~CmdMsg_ListProperties();

  CmdMsg_ListProperties(const CmdMsg_ListProperties& from);

  inline CmdMsg_ListProperties& operator=(const CmdMsg_ListProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ListProperties(CmdMsg_ListProperties&& from) noexcept
    : CmdMsg_ListProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ListProperties& operator=(CmdMsg_ListProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ListProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ListProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ListProperties*>(
               &_CmdMsg_ListProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(CmdMsg_ListProperties* other);
  friend void swap(CmdMsg_ListProperties& a, CmdMsg_ListProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ListProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_ListProperties>(NULL);
  }

  CmdMsg_ListProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ListProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ListProperties& from);
  void MergeFrom(const CmdMsg_ListProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ListProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.ListProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_ListProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ListProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_ListProperty& properties(int index) const;
  ::HaWC::CmdMsg_ListProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ListProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ListProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ListProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ToolBarProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ToolBarProperties) */ {
 public:
  CmdMsg_ToolBarProperties();
  virtual ~CmdMsg_ToolBarProperties();

  CmdMsg_ToolBarProperties(const CmdMsg_ToolBarProperties& from);

  inline CmdMsg_ToolBarProperties& operator=(const CmdMsg_ToolBarProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ToolBarProperties(CmdMsg_ToolBarProperties&& from) noexcept
    : CmdMsg_ToolBarProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ToolBarProperties& operator=(CmdMsg_ToolBarProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ToolBarProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ToolBarProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ToolBarProperties*>(
               &_CmdMsg_ToolBarProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CmdMsg_ToolBarProperties* other);
  friend void swap(CmdMsg_ToolBarProperties& a, CmdMsg_ToolBarProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ToolBarProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_ToolBarProperties>(NULL);
  }

  CmdMsg_ToolBarProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ToolBarProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ToolBarProperties& from);
  void MergeFrom(const CmdMsg_ToolBarProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ToolBarProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.ToolBarProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_ToolBarProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ToolBarProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_ToolBarProperty& properties(int index) const;
  ::HaWC::CmdMsg_ToolBarProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ToolBarProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ToolBarProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ToolBarProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_MenuProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.MenuProperty) */ {
 public:
  CmdMsg_MenuProperty();
  virtual ~CmdMsg_MenuProperty();

  CmdMsg_MenuProperty(const CmdMsg_MenuProperty& from);

  inline CmdMsg_MenuProperty& operator=(const CmdMsg_MenuProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_MenuProperty(CmdMsg_MenuProperty&& from) noexcept
    : CmdMsg_MenuProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_MenuProperty& operator=(CmdMsg_MenuProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_MenuProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kX = 2,
    kY = 3,
    kWidth = 4,
    kItemHeight = 5,
    kOptions = 6,
    kHighlightText = 7,
    kBackColor = 8,
    kTextColor = 9,
    kSelectedColor = 10,
    kSelected = 11,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_MenuProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_MenuProperty*>(
               &_CmdMsg_MenuProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CmdMsg_MenuProperty* other);
  friend void swap(CmdMsg_MenuProperty& a, CmdMsg_MenuProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_MenuProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_MenuProperty>(NULL);
  }

  CmdMsg_MenuProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_MenuProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_MenuProperty& from);
  void MergeFrom(const CmdMsg_MenuProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_MenuProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float x = 2;
  private:
  bool has_x() const;
  public:
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  private:
  bool has_y() const;
  public:
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float width = 4;
  private:
  bool has_width() const;
  public:
  void clear_width();
  static const int kWidthFieldNumber = 4;
  float width() const;
  void set_width(float value);

  // float itemHeight = 5;
  private:
  bool has_itemheight() const;
  public:
  void clear_itemheight();
  static const int kItemHeightFieldNumber = 5;
  float itemheight() const;
  void set_itemheight(float value);

  // string options___ = 6;
  private:
  bool has_options___() const;
  public:
  void clear_options___();
  static const int kOptionsFieldNumber = 6;
  const ::std::string& options___() const;
  void set_options___(const ::std::string& value);
  #if LANG_CXX11
  void set_options___(::std::string&& value);
  #endif
  void set_options___(const char* value);
  void set_options___(const char* value, size_t size);
  ::std::string* mutable_options___();
  ::std::string* release_options___();
  void set_allocated_options___(::std::string* options___);

  // bool highlightText = 7;
  private:
  bool has_highlighttext() const;
  public:
  void clear_highlighttext();
  static const int kHighlightTextFieldNumber = 7;
  bool highlighttext() const;
  void set_highlighttext(bool value);

  // string backColor = 8;
  private:
  bool has_backcolor() const;
  public:
  void clear_backcolor();
  static const int kBackColorFieldNumber = 8;
  const ::std::string& backcolor() const;
  void set_backcolor(const ::std::string& value);
  #if LANG_CXX11
  void set_backcolor(::std::string&& value);
  #endif
  void set_backcolor(const char* value);
  void set_backcolor(const char* value, size_t size);
  ::std::string* mutable_backcolor();
  ::std::string* release_backcolor();
  void set_allocated_backcolor(::std::string* backcolor);

  // string textColor = 9;
  private:
  bool has_textcolor() const;
  public:
  void clear_textcolor();
  static const int kTextColorFieldNumber = 9;
  const ::std::string& textcolor() const;
  void set_textcolor(const ::std::string& value);
  #if LANG_CXX11
  void set_textcolor(::std::string&& value);
  #endif
  void set_textcolor(const char* value);
  void set_textcolor(const char* value, size_t size);
  ::std::string* mutable_textcolor();
  ::std::string* release_textcolor();
  void set_allocated_textcolor(::std::string* textcolor);

  // string selectedColor = 10;
  private:
  bool has_selectedcolor() const;
  public:
  void clear_selectedcolor();
  static const int kSelectedColorFieldNumber = 10;
  const ::std::string& selectedcolor() const;
  void set_selectedcolor(const ::std::string& value);
  #if LANG_CXX11
  void set_selectedcolor(::std::string&& value);
  #endif
  void set_selectedcolor(const char* value);
  void set_selectedcolor(const char* value, size_t size);
  ::std::string* mutable_selectedcolor();
  ::std::string* release_selectedcolor();
  void set_allocated_selectedcolor(::std::string* selectedcolor);

  // int32 selected = 11;
  private:
  bool has_selected() const;
  public:
  void clear_selected();
  static const int kSelectedFieldNumber = 11;
  ::google::protobuf::int32 selected() const;
  void set_selected(::google::protobuf::int32 value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.MenuProperty)
 private:
  void set_has_visible();
  void set_has_x();
  void set_has_y();
  void set_has_width();
  void set_has_itemheight();
  void set_has_options___();
  void set_has_highlighttext();
  void set_has_backcolor();
  void set_has_textcolor();
  void set_has_selectedcolor();
  void set_has_selected();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float x_;
    float y_;
    float width_;
    float itemheight_;
    ::google::protobuf::internal::ArenaStringPtr options____;
    bool highlighttext_;
    ::google::protobuf::internal::ArenaStringPtr backcolor_;
    ::google::protobuf::internal::ArenaStringPtr textcolor_;
    ::google::protobuf::internal::ArenaStringPtr selectedcolor_;
    ::google::protobuf::int32 selected_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_MenuProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.MenuProperties) */ {
 public:
  CmdMsg_MenuProperties();
  virtual ~CmdMsg_MenuProperties();

  CmdMsg_MenuProperties(const CmdMsg_MenuProperties& from);

  inline CmdMsg_MenuProperties& operator=(const CmdMsg_MenuProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_MenuProperties(CmdMsg_MenuProperties&& from) noexcept
    : CmdMsg_MenuProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_MenuProperties& operator=(CmdMsg_MenuProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_MenuProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_MenuProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_MenuProperties*>(
               &_CmdMsg_MenuProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CmdMsg_MenuProperties* other);
  friend void swap(CmdMsg_MenuProperties& a, CmdMsg_MenuProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_MenuProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_MenuProperties>(NULL);
  }

  CmdMsg_MenuProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_MenuProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_MenuProperties& from);
  void MergeFrom(const CmdMsg_MenuProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_MenuProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.MenuProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_MenuProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_MenuProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_MenuProperty& properties(int index) const;
  ::HaWC::CmdMsg_MenuProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_MenuProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.MenuProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_MenuProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LabelProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LabelProperty) */ {
 public:
  CmdMsg_LabelProperty();
  virtual ~CmdMsg_LabelProperty();

  CmdMsg_LabelProperty(const CmdMsg_LabelProperty& from);

  inline CmdMsg_LabelProperty& operator=(const CmdMsg_LabelProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LabelProperty(CmdMsg_LabelProperty&& from) noexcept
    : CmdMsg_LabelProperty() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LabelProperty& operator=(CmdMsg_LabelProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LabelProperty& default_instance();

  enum PropertyCase {
    kVisible = 1,
    kX = 2,
    kY = 3,
    kWidth = 4,
    kHeight = 5,
    kText = 6,
    kFontFamily = 7,
    kFontPointSize = 8,
    kColor = 9,
    kOpacity = 10,
    kRotation = 11,
    kWrapMode = 12,
    kTextFormat = 13,
    PROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LabelProperty* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LabelProperty*>(
               &_CmdMsg_LabelProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CmdMsg_LabelProperty* other);
  friend void swap(CmdMsg_LabelProperty& a, CmdMsg_LabelProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LabelProperty* New() const final {
    return CreateMaybeMessage<CmdMsg_LabelProperty>(NULL);
  }

  CmdMsg_LabelProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LabelProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LabelProperty& from);
  void MergeFrom(const CmdMsg_LabelProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LabelProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  private:
  bool has_visible() const;
  public:
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // float x = 2;
  private:
  bool has_x() const;
  public:
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  private:
  bool has_y() const;
  public:
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float width = 4;
  private:
  bool has_width() const;
  public:
  void clear_width();
  static const int kWidthFieldNumber = 4;
  float width() const;
  void set_width(float value);

  // float height = 5;
  private:
  bool has_height() const;
  public:
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // string text = 6;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 6;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string font_family = 7;
  private:
  bool has_font_family() const;
  public:
  void clear_font_family();
  static const int kFontFamilyFieldNumber = 7;
  const ::std::string& font_family() const;
  void set_font_family(const ::std::string& value);
  #if LANG_CXX11
  void set_font_family(::std::string&& value);
  #endif
  void set_font_family(const char* value);
  void set_font_family(const char* value, size_t size);
  ::std::string* mutable_font_family();
  ::std::string* release_font_family();
  void set_allocated_font_family(::std::string* font_family);

  // float font_pointSize = 8;
  private:
  bool has_font_pointsize() const;
  public:
  void clear_font_pointsize();
  static const int kFontPointSizeFieldNumber = 8;
  float font_pointsize() const;
  void set_font_pointsize(float value);

  // string color = 9;
  private:
  bool has_color() const;
  public:
  void clear_color();
  static const int kColorFieldNumber = 9;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // float opacity = 10;
  private:
  bool has_opacity() const;
  public:
  void clear_opacity();
  static const int kOpacityFieldNumber = 10;
  float opacity() const;
  void set_opacity(float value);

  // float rotation = 11;
  private:
  bool has_rotation() const;
  public:
  void clear_rotation();
  static const int kRotationFieldNumber = 11;
  float rotation() const;
  void set_rotation(float value);

  // .HaWC.CmdMsg.WrapMode wrapMode = 12;
  private:
  bool has_wrapmode() const;
  public:
  void clear_wrapmode();
  static const int kWrapModeFieldNumber = 12;
  ::HaWC::CmdMsg_WrapMode wrapmode() const;
  void set_wrapmode(::HaWC::CmdMsg_WrapMode value);

  // .HaWC.CmdMsg.TextFormat textFormat = 13;
  private:
  bool has_textformat() const;
  public:
  void clear_textformat();
  static const int kTextFormatFieldNumber = 13;
  ::HaWC::CmdMsg_TextFormat textformat() const;
  void set_textformat(::HaWC::CmdMsg_TextFormat value);

  void clear_property();
  PropertyCase property_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LabelProperty)
 private:
  void set_has_visible();
  void set_has_x();
  void set_has_y();
  void set_has_width();
  void set_has_height();
  void set_has_text();
  void set_has_font_family();
  void set_has_font_pointsize();
  void set_has_color();
  void set_has_opacity();
  void set_has_rotation();
  void set_has_wrapmode();
  void set_has_textformat();

  inline bool has_property() const;
  inline void clear_has_property();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PropertyUnion {
    PropertyUnion() {}
    bool visible_;
    float x_;
    float y_;
    float width_;
    float height_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr font_family_;
    float font_pointsize_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    float opacity_;
    float rotation_;
    int wrapmode_;
    int textformat_;
  } property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LabelProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LabelProperties) */ {
 public:
  CmdMsg_LabelProperties();
  virtual ~CmdMsg_LabelProperties();

  CmdMsg_LabelProperties(const CmdMsg_LabelProperties& from);

  inline CmdMsg_LabelProperties& operator=(const CmdMsg_LabelProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LabelProperties(CmdMsg_LabelProperties&& from) noexcept
    : CmdMsg_LabelProperties() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LabelProperties& operator=(CmdMsg_LabelProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LabelProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LabelProperties* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LabelProperties*>(
               &_CmdMsg_LabelProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CmdMsg_LabelProperties* other);
  friend void swap(CmdMsg_LabelProperties& a, CmdMsg_LabelProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LabelProperties* New() const final {
    return CreateMaybeMessage<CmdMsg_LabelProperties>(NULL);
  }

  CmdMsg_LabelProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LabelProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LabelProperties& from);
  void MergeFrom(const CmdMsg_LabelProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LabelProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.LabelProperty properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  ::HaWC::CmdMsg_LabelProperty* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LabelProperty >*
      mutable_properties();
  const ::HaWC::CmdMsg_LabelProperty& properties(int index) const;
  ::HaWC::CmdMsg_LabelProperty* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LabelProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LabelProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LabelProperty > properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_Component : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.Component) */ {
 public:
  CmdMsg_Component();
  virtual ~CmdMsg_Component();

  CmdMsg_Component(const CmdMsg_Component& from);

  inline CmdMsg_Component& operator=(const CmdMsg_Component& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_Component(CmdMsg_Component&& from) noexcept
    : CmdMsg_Component() {
    *this = ::std::move(from);
  }

  inline CmdMsg_Component& operator=(CmdMsg_Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_Component& default_instance();

  enum PropertiesCase {
    kLine = 2,
    kCircle = 3,
    kRectangle = 4,
    kImage = 5,
    kFileList = 6,
    kToolbar = 7,
    kList = 8,
    kMenu = 9,
    kText = 10,
    PROPERTIES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_Component* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_Component*>(
               &_CmdMsg_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CmdMsg_Component* other);
  friend void swap(CmdMsg_Component& a, CmdMsg_Component& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_Component* New() const final {
    return CreateMaybeMessage<CmdMsg_Component>(NULL);
  }

  CmdMsg_Component* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_Component>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_Component& from);
  void MergeFrom(const CmdMsg_Component& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_Component* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string objectName = 1;
  void clear_objectname();
  static const int kObjectNameFieldNumber = 1;
  const ::std::string& objectname() const;
  void set_objectname(const ::std::string& value);
  #if LANG_CXX11
  void set_objectname(::std::string&& value);
  #endif
  void set_objectname(const char* value);
  void set_objectname(const char* value, size_t size);
  ::std::string* mutable_objectname();
  ::std::string* release_objectname();
  void set_allocated_objectname(::std::string* objectname);

  // .HaWC.CmdMsg.LineProperties line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  private:
  const ::HaWC::CmdMsg_LineProperties& _internal_line() const;
  public:
  const ::HaWC::CmdMsg_LineProperties& line() const;
  ::HaWC::CmdMsg_LineProperties* release_line();
  ::HaWC::CmdMsg_LineProperties* mutable_line();
  void set_allocated_line(::HaWC::CmdMsg_LineProperties* line);

  // .HaWC.CmdMsg.CircleProperties circle = 3;
  bool has_circle() const;
  void clear_circle();
  static const int kCircleFieldNumber = 3;
  private:
  const ::HaWC::CmdMsg_CircleProperties& _internal_circle() const;
  public:
  const ::HaWC::CmdMsg_CircleProperties& circle() const;
  ::HaWC::CmdMsg_CircleProperties* release_circle();
  ::HaWC::CmdMsg_CircleProperties* mutable_circle();
  void set_allocated_circle(::HaWC::CmdMsg_CircleProperties* circle);

  // .HaWC.CmdMsg.RectangleProperties rectangle = 4;
  bool has_rectangle() const;
  void clear_rectangle();
  static const int kRectangleFieldNumber = 4;
  private:
  const ::HaWC::CmdMsg_RectangleProperties& _internal_rectangle() const;
  public:
  const ::HaWC::CmdMsg_RectangleProperties& rectangle() const;
  ::HaWC::CmdMsg_RectangleProperties* release_rectangle();
  ::HaWC::CmdMsg_RectangleProperties* mutable_rectangle();
  void set_allocated_rectangle(::HaWC::CmdMsg_RectangleProperties* rectangle);

  // .HaWC.CmdMsg.ImageProperties image = 5;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 5;
  private:
  const ::HaWC::CmdMsg_ImageProperties& _internal_image() const;
  public:
  const ::HaWC::CmdMsg_ImageProperties& image() const;
  ::HaWC::CmdMsg_ImageProperties* release_image();
  ::HaWC::CmdMsg_ImageProperties* mutable_image();
  void set_allocated_image(::HaWC::CmdMsg_ImageProperties* image);

  // .HaWC.CmdMsg.FileListProperties fileList = 6;
  bool has_filelist() const;
  void clear_filelist();
  static const int kFileListFieldNumber = 6;
  private:
  const ::HaWC::CmdMsg_FileListProperties& _internal_filelist() const;
  public:
  const ::HaWC::CmdMsg_FileListProperties& filelist() const;
  ::HaWC::CmdMsg_FileListProperties* release_filelist();
  ::HaWC::CmdMsg_FileListProperties* mutable_filelist();
  void set_allocated_filelist(::HaWC::CmdMsg_FileListProperties* filelist);

  // .HaWC.CmdMsg.ToolBarProperties toolbar = 7;
  bool has_toolbar() const;
  void clear_toolbar();
  static const int kToolbarFieldNumber = 7;
  private:
  const ::HaWC::CmdMsg_ToolBarProperties& _internal_toolbar() const;
  public:
  const ::HaWC::CmdMsg_ToolBarProperties& toolbar() const;
  ::HaWC::CmdMsg_ToolBarProperties* release_toolbar();
  ::HaWC::CmdMsg_ToolBarProperties* mutable_toolbar();
  void set_allocated_toolbar(::HaWC::CmdMsg_ToolBarProperties* toolbar);

  // .HaWC.CmdMsg.ListProperties list = 8;
  bool has_list() const;
  void clear_list();
  static const int kListFieldNumber = 8;
  private:
  const ::HaWC::CmdMsg_ListProperties& _internal_list() const;
  public:
  const ::HaWC::CmdMsg_ListProperties& list() const;
  ::HaWC::CmdMsg_ListProperties* release_list();
  ::HaWC::CmdMsg_ListProperties* mutable_list();
  void set_allocated_list(::HaWC::CmdMsg_ListProperties* list);

  // .HaWC.CmdMsg.MenuProperties menu = 9;
  bool has_menu() const;
  void clear_menu();
  static const int kMenuFieldNumber = 9;
  private:
  const ::HaWC::CmdMsg_MenuProperties& _internal_menu() const;
  public:
  const ::HaWC::CmdMsg_MenuProperties& menu() const;
  ::HaWC::CmdMsg_MenuProperties* release_menu();
  ::HaWC::CmdMsg_MenuProperties* mutable_menu();
  void set_allocated_menu(::HaWC::CmdMsg_MenuProperties* menu);

  // .HaWC.CmdMsg.LabelProperties text = 10;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 10;
  private:
  const ::HaWC::CmdMsg_LabelProperties& _internal_text() const;
  public:
  const ::HaWC::CmdMsg_LabelProperties& text() const;
  ::HaWC::CmdMsg_LabelProperties* release_text();
  ::HaWC::CmdMsg_LabelProperties* mutable_text();
  void set_allocated_text(::HaWC::CmdMsg_LabelProperties* text);

  void clear_properties();
  PropertiesCase properties_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.Component)
 private:
  void set_has_line();
  void set_has_circle();
  void set_has_rectangle();
  void set_has_image();
  void set_has_filelist();
  void set_has_toolbar();
  void set_has_list();
  void set_has_menu();
  void set_has_text();

  inline bool has_properties() const;
  inline void clear_has_properties();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr objectname_;
  union PropertiesUnion {
    PropertiesUnion() {}
    ::HaWC::CmdMsg_LineProperties* line_;
    ::HaWC::CmdMsg_CircleProperties* circle_;
    ::HaWC::CmdMsg_RectangleProperties* rectangle_;
    ::HaWC::CmdMsg_ImageProperties* image_;
    ::HaWC::CmdMsg_FileListProperties* filelist_;
    ::HaWC::CmdMsg_ToolBarProperties* toolbar_;
    ::HaWC::CmdMsg_ListProperties* list_;
    ::HaWC::CmdMsg_MenuProperties* menu_;
    ::HaWC::CmdMsg_LabelProperties* text_;
  } properties_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_ComponentList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.ComponentList) */ {
 public:
  CmdMsg_ComponentList();
  virtual ~CmdMsg_ComponentList();

  CmdMsg_ComponentList(const CmdMsg_ComponentList& from);

  inline CmdMsg_ComponentList& operator=(const CmdMsg_ComponentList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_ComponentList(CmdMsg_ComponentList&& from) noexcept
    : CmdMsg_ComponentList() {
    *this = ::std::move(from);
  }

  inline CmdMsg_ComponentList& operator=(CmdMsg_ComponentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_ComponentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_ComponentList* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_ComponentList*>(
               &_CmdMsg_ComponentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CmdMsg_ComponentList* other);
  friend void swap(CmdMsg_ComponentList& a, CmdMsg_ComponentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_ComponentList* New() const final {
    return CreateMaybeMessage<CmdMsg_ComponentList>(NULL);
  }

  CmdMsg_ComponentList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_ComponentList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_ComponentList& from);
  void MergeFrom(const CmdMsg_ComponentList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_ComponentList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.Component components = 1;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 1;
  ::HaWC::CmdMsg_Component* mutable_components(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_Component >*
      mutable_components();
  const ::HaWC::CmdMsg_Component& components(int index) const;
  ::HaWC::CmdMsg_Component* add_components();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_Component >&
      components() const;

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.ComponentList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_Component > components_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_OverlayCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.OverlayCmd) */ {
 public:
  CmdMsg_OverlayCmd();
  virtual ~CmdMsg_OverlayCmd();

  CmdMsg_OverlayCmd(const CmdMsg_OverlayCmd& from);

  inline CmdMsg_OverlayCmd& operator=(const CmdMsg_OverlayCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_OverlayCmd(CmdMsg_OverlayCmd&& from) noexcept
    : CmdMsg_OverlayCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_OverlayCmd& operator=(CmdMsg_OverlayCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_OverlayCmd& default_instance();

  enum CommandCase {
    kCreateScreen = 5,
    kUpdateSreen = 6,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_OverlayCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_OverlayCmd*>(
               &_CmdMsg_OverlayCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CmdMsg_OverlayCmd* other);
  friend void swap(CmdMsg_OverlayCmd& a, CmdMsg_OverlayCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_OverlayCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_OverlayCmd>(NULL);
  }

  CmdMsg_OverlayCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_OverlayCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_OverlayCmd& from);
  void MergeFrom(const CmdMsg_OverlayCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_OverlayCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 viewPortID = 1;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 1;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // .HaWC.CmdMsg.ComponentList createScreen = 5;
  bool has_createscreen() const;
  void clear_createscreen();
  static const int kCreateScreenFieldNumber = 5;
  private:
  const ::HaWC::CmdMsg_ComponentList& _internal_createscreen() const;
  public:
  const ::HaWC::CmdMsg_ComponentList& createscreen() const;
  ::HaWC::CmdMsg_ComponentList* release_createscreen();
  ::HaWC::CmdMsg_ComponentList* mutable_createscreen();
  void set_allocated_createscreen(::HaWC::CmdMsg_ComponentList* createscreen);

  // .HaWC.CmdMsg.ComponentList updateSreen = 6;
  bool has_updatesreen() const;
  void clear_updatesreen();
  static const int kUpdateSreenFieldNumber = 6;
  private:
  const ::HaWC::CmdMsg_ComponentList& _internal_updatesreen() const;
  public:
  const ::HaWC::CmdMsg_ComponentList& updatesreen() const;
  ::HaWC::CmdMsg_ComponentList* release_updatesreen();
  ::HaWC::CmdMsg_ComponentList* mutable_updatesreen();
  void set_allocated_updatesreen(::HaWC::CmdMsg_ComponentList* updatesreen);

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.OverlayCmd)
 private:
  void set_has_createscreen();
  void set_has_updatesreen();

  inline bool has_command() const;
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 viewportid_;
  union CommandUnion {
    CommandUnion() {}
    ::HaWC::CmdMsg_ComponentList* createscreen_;
    ::HaWC::CmdMsg_ComponentList* updatesreen_;
  } command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SetFeedSourceCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SetFeedSourceCmd) */ {
 public:
  CmdMsg_SetFeedSourceCmd();
  virtual ~CmdMsg_SetFeedSourceCmd();

  CmdMsg_SetFeedSourceCmd(const CmdMsg_SetFeedSourceCmd& from);

  inline CmdMsg_SetFeedSourceCmd& operator=(const CmdMsg_SetFeedSourceCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SetFeedSourceCmd(CmdMsg_SetFeedSourceCmd&& from) noexcept
    : CmdMsg_SetFeedSourceCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SetFeedSourceCmd& operator=(CmdMsg_SetFeedSourceCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SetFeedSourceCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SetFeedSourceCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SetFeedSourceCmd*>(
               &_CmdMsg_SetFeedSourceCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CmdMsg_SetFeedSourceCmd* other);
  friend void swap(CmdMsg_SetFeedSourceCmd& a, CmdMsg_SetFeedSourceCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SetFeedSourceCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SetFeedSourceCmd>(NULL);
  }

  CmdMsg_SetFeedSourceCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SetFeedSourceCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SetFeedSourceCmd& from);
  void MergeFrom(const CmdMsg_SetFeedSourceCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SetFeedSourceCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sourceStr = 3;
  void clear_sourcestr();
  static const int kSourceStrFieldNumber = 3;
  const ::std::string& sourcestr() const;
  void set_sourcestr(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcestr(::std::string&& value);
  #endif
  void set_sourcestr(const char* value);
  void set_sourcestr(const char* value, size_t size);
  ::std::string* mutable_sourcestr();
  ::std::string* release_sourcestr();
  void set_allocated_sourcestr(::std::string* sourcestr);

  // int32 feedID = 1;
  void clear_feedid();
  static const int kFeedIDFieldNumber = 1;
  ::google::protobuf::int32 feedid() const;
  void set_feedid(::google::protobuf::int32 value);

  // .HaWC.FeedType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::HaWC::FeedType type() const;
  void set_type(::HaWC::FeedType value);

  // uint32 qosTimeout = 4;
  void clear_qostimeout();
  static const int kQosTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 qostimeout() const;
  void set_qostimeout(::google::protobuf::uint32 value);

  // uint32 qosRefresh = 5;
  void clear_qosrefresh();
  static const int kQosRefreshFieldNumber = 5;
  ::google::protobuf::uint32 qosrefresh() const;
  void set_qosrefresh(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SetFeedSourceCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sourcestr_;
  ::google::protobuf::int32 feedid_;
  int type_;
  ::google::protobuf::uint32 qostimeout_;
  ::google::protobuf::uint32 qosrefresh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SetViewFeedCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SetViewFeedCmd) */ {
 public:
  CmdMsg_SetViewFeedCmd();
  virtual ~CmdMsg_SetViewFeedCmd();

  CmdMsg_SetViewFeedCmd(const CmdMsg_SetViewFeedCmd& from);

  inline CmdMsg_SetViewFeedCmd& operator=(const CmdMsg_SetViewFeedCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SetViewFeedCmd(CmdMsg_SetViewFeedCmd&& from) noexcept
    : CmdMsg_SetViewFeedCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SetViewFeedCmd& operator=(CmdMsg_SetViewFeedCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SetViewFeedCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SetViewFeedCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SetViewFeedCmd*>(
               &_CmdMsg_SetViewFeedCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CmdMsg_SetViewFeedCmd* other);
  friend void swap(CmdMsg_SetViewFeedCmd& a, CmdMsg_SetViewFeedCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SetViewFeedCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SetViewFeedCmd>(NULL);
  }

  CmdMsg_SetViewFeedCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SetViewFeedCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SetViewFeedCmd& from);
  void MergeFrom(const CmdMsg_SetViewFeedCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SetViewFeedCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 viewPortID = 1;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 1;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // int32 feedID = 2;
  void clear_feedid();
  static const int kFeedIDFieldNumber = 2;
  ::google::protobuf::int32 feedid() const;
  void set_feedid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SetViewFeedCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 viewportid_;
  ::google::protobuf::int32 feedid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SetViewWindowCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SetViewWindowCmd) */ {
 public:
  CmdMsg_SetViewWindowCmd();
  virtual ~CmdMsg_SetViewWindowCmd();

  CmdMsg_SetViewWindowCmd(const CmdMsg_SetViewWindowCmd& from);

  inline CmdMsg_SetViewWindowCmd& operator=(const CmdMsg_SetViewWindowCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SetViewWindowCmd(CmdMsg_SetViewWindowCmd&& from) noexcept
    : CmdMsg_SetViewWindowCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SetViewWindowCmd& operator=(CmdMsg_SetViewWindowCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SetViewWindowCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SetViewWindowCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SetViewWindowCmd*>(
               &_CmdMsg_SetViewWindowCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CmdMsg_SetViewWindowCmd* other);
  friend void swap(CmdMsg_SetViewWindowCmd& a, CmdMsg_SetViewWindowCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SetViewWindowCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SetViewWindowCmd>(NULL);
  }

  CmdMsg_SetViewWindowCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SetViewWindowCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SetViewWindowCmd& from);
  void MergeFrom(const CmdMsg_SetViewWindowCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SetViewWindowCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 viewPortID = 1;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 1;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // int32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // double alpha = 7;
  void clear_alpha();
  static const int kAlphaFieldNumber = 7;
  double alpha() const;
  void set_alpha(double value);

  // bool enableOverlay = 8;
  void clear_enableoverlay();
  static const int kEnableOverlayFieldNumber = 8;
  bool enableoverlay() const;
  void set_enableoverlay(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SetViewWindowCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 viewportid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  double alpha_;
  bool enableoverlay_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SetDisplayCfgCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SetDisplayCfgCmd) */ {
 public:
  CmdMsg_SetDisplayCfgCmd();
  virtual ~CmdMsg_SetDisplayCfgCmd();

  CmdMsg_SetDisplayCfgCmd(const CmdMsg_SetDisplayCfgCmd& from);

  inline CmdMsg_SetDisplayCfgCmd& operator=(const CmdMsg_SetDisplayCfgCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SetDisplayCfgCmd(CmdMsg_SetDisplayCfgCmd&& from) noexcept
    : CmdMsg_SetDisplayCfgCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SetDisplayCfgCmd& operator=(CmdMsg_SetDisplayCfgCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SetDisplayCfgCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SetDisplayCfgCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SetDisplayCfgCmd*>(
               &_CmdMsg_SetDisplayCfgCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CmdMsg_SetDisplayCfgCmd* other);
  friend void swap(CmdMsg_SetDisplayCfgCmd& a, CmdMsg_SetDisplayCfgCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SetDisplayCfgCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SetDisplayCfgCmd>(NULL);
  }

  CmdMsg_SetDisplayCfgCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SetDisplayCfgCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SetDisplayCfgCmd& from);
  void MergeFrom(const CmdMsg_SetDisplayCfgCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SetDisplayCfgCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.CmdMsg.SetFeedSourceCmd feedSrcs = 5;
  int feedsrcs_size() const;
  void clear_feedsrcs();
  static const int kFeedSrcsFieldNumber = 5;
  ::HaWC::CmdMsg_SetFeedSourceCmd* mutable_feedsrcs(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetFeedSourceCmd >*
      mutable_feedsrcs();
  const ::HaWC::CmdMsg_SetFeedSourceCmd& feedsrcs(int index) const;
  ::HaWC::CmdMsg_SetFeedSourceCmd* add_feedsrcs();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetFeedSourceCmd >&
      feedsrcs() const;

  // repeated .HaWC.CmdMsg.SetViewFeedCmd viewFeeds = 9;
  int viewfeeds_size() const;
  void clear_viewfeeds();
  static const int kViewFeedsFieldNumber = 9;
  ::HaWC::CmdMsg_SetViewFeedCmd* mutable_viewfeeds(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewFeedCmd >*
      mutable_viewfeeds();
  const ::HaWC::CmdMsg_SetViewFeedCmd& viewfeeds(int index) const;
  ::HaWC::CmdMsg_SetViewFeedCmd* add_viewfeeds();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewFeedCmd >&
      viewfeeds() const;

  // repeated .HaWC.CmdMsg.SetViewWindowCmd viewWindows = 10;
  int viewwindows_size() const;
  void clear_viewwindows();
  static const int kViewWindowsFieldNumber = 10;
  ::HaWC::CmdMsg_SetViewWindowCmd* mutable_viewwindows(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewWindowCmd >*
      mutable_viewwindows();
  const ::HaWC::CmdMsg_SetViewWindowCmd& viewwindows(int index) const;
  ::HaWC::CmdMsg_SetViewWindowCmd* add_viewwindows();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewWindowCmd >&
      viewwindows() const;

  // repeated .HaWC.CmdMsg.OverlayCmd viewOverlays = 12;
  int viewoverlays_size() const;
  void clear_viewoverlays();
  static const int kViewOverlaysFieldNumber = 12;
  ::HaWC::CmdMsg_OverlayCmd* mutable_viewoverlays(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_OverlayCmd >*
      mutable_viewoverlays();
  const ::HaWC::CmdMsg_OverlayCmd& viewoverlays(int index) const;
  ::HaWC::CmdMsg_OverlayCmd* add_viewoverlays();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_OverlayCmd >&
      viewoverlays() const;

  // .HaWC.CmdMsg.OverlayCmd mainOverlay = 7;
  bool has_mainoverlay() const;
  void clear_mainoverlay();
  static const int kMainOverlayFieldNumber = 7;
  private:
  const ::HaWC::CmdMsg_OverlayCmd& _internal_mainoverlay() const;
  public:
  const ::HaWC::CmdMsg_OverlayCmd& mainoverlay() const;
  ::HaWC::CmdMsg_OverlayCmd* release_mainoverlay();
  ::HaWC::CmdMsg_OverlayCmd* mutable_mainoverlay();
  void set_allocated_mainoverlay(::HaWC::CmdMsg_OverlayCmd* mainoverlay);

  // bool reportParamVals = 1;
  void clear_reportparamvals();
  static const int kReportParamValsFieldNumber = 1;
  bool reportparamvals() const;
  void set_reportparamvals(bool value);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SetDisplayCfgCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetFeedSourceCmd > feedsrcs_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewFeedCmd > viewfeeds_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewWindowCmd > viewwindows_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_OverlayCmd > viewoverlays_;
  ::HaWC::CmdMsg_OverlayCmd* mainoverlay_;
  bool reportparamvals_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_GetDisplayCfgCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.GetDisplayCfgCmd) */ {
 public:
  CmdMsg_GetDisplayCfgCmd();
  virtual ~CmdMsg_GetDisplayCfgCmd();

  CmdMsg_GetDisplayCfgCmd(const CmdMsg_GetDisplayCfgCmd& from);

  inline CmdMsg_GetDisplayCfgCmd& operator=(const CmdMsg_GetDisplayCfgCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_GetDisplayCfgCmd(CmdMsg_GetDisplayCfgCmd&& from) noexcept
    : CmdMsg_GetDisplayCfgCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_GetDisplayCfgCmd& operator=(CmdMsg_GetDisplayCfgCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_GetDisplayCfgCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_GetDisplayCfgCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_GetDisplayCfgCmd*>(
               &_CmdMsg_GetDisplayCfgCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CmdMsg_GetDisplayCfgCmd* other);
  friend void swap(CmdMsg_GetDisplayCfgCmd& a, CmdMsg_GetDisplayCfgCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_GetDisplayCfgCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_GetDisplayCfgCmd>(NULL);
  }

  CmdMsg_GetDisplayCfgCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_GetDisplayCfgCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_GetDisplayCfgCmd& from);
  void MergeFrom(const CmdMsg_GetDisplayCfgCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_GetDisplayCfgCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 feedSrcIDs = 5;
  int feedsrcids_size() const;
  void clear_feedsrcids();
  static const int kFeedSrcIDsFieldNumber = 5;
  ::google::protobuf::int32 feedsrcids(int index) const;
  void set_feedsrcids(int index, ::google::protobuf::int32 value);
  void add_feedsrcids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      feedsrcids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_feedsrcids();

  // repeated uint32 viewFeedIDs = 9;
  int viewfeedids_size() const;
  void clear_viewfeedids();
  static const int kViewFeedIDsFieldNumber = 9;
  ::google::protobuf::uint32 viewfeedids(int index) const;
  void set_viewfeedids(int index, ::google::protobuf::uint32 value);
  void add_viewfeedids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      viewfeedids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_viewfeedids();

  // repeated uint32 viewWindowIDs = 10;
  int viewwindowids_size() const;
  void clear_viewwindowids();
  static const int kViewWindowIDsFieldNumber = 10;
  ::google::protobuf::uint32 viewwindowids(int index) const;
  void set_viewwindowids(int index, ::google::protobuf::uint32 value);
  void add_viewwindowids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      viewwindowids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_viewwindowids();

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.GetDisplayCfgCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > feedsrcids_;
  mutable int _feedsrcids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > viewfeedids_;
  mutable int _viewfeedids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > viewwindowids_;
  mutable int _viewwindowids_cached_byte_size_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SaveDefaultDisplayCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SaveDefaultDisplayCmd) */ {
 public:
  CmdMsg_SaveDefaultDisplayCmd();
  virtual ~CmdMsg_SaveDefaultDisplayCmd();

  CmdMsg_SaveDefaultDisplayCmd(const CmdMsg_SaveDefaultDisplayCmd& from);

  inline CmdMsg_SaveDefaultDisplayCmd& operator=(const CmdMsg_SaveDefaultDisplayCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SaveDefaultDisplayCmd(CmdMsg_SaveDefaultDisplayCmd&& from) noexcept
    : CmdMsg_SaveDefaultDisplayCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SaveDefaultDisplayCmd& operator=(CmdMsg_SaveDefaultDisplayCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SaveDefaultDisplayCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SaveDefaultDisplayCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SaveDefaultDisplayCmd*>(
               &_CmdMsg_SaveDefaultDisplayCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CmdMsg_SaveDefaultDisplayCmd* other);
  friend void swap(CmdMsg_SaveDefaultDisplayCmd& a, CmdMsg_SaveDefaultDisplayCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SaveDefaultDisplayCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SaveDefaultDisplayCmd>(NULL);
  }

  CmdMsg_SaveDefaultDisplayCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SaveDefaultDisplayCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SaveDefaultDisplayCmd& from);
  void MergeFrom(const CmdMsg_SaveDefaultDisplayCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SaveDefaultDisplayCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool reportErrStr = 1;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 1;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SaveDefaultDisplayCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SaveDisplayToFileCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SaveDisplayToFileCmd) */ {
 public:
  CmdMsg_SaveDisplayToFileCmd();
  virtual ~CmdMsg_SaveDisplayToFileCmd();

  CmdMsg_SaveDisplayToFileCmd(const CmdMsg_SaveDisplayToFileCmd& from);

  inline CmdMsg_SaveDisplayToFileCmd& operator=(const CmdMsg_SaveDisplayToFileCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SaveDisplayToFileCmd(CmdMsg_SaveDisplayToFileCmd&& from) noexcept
    : CmdMsg_SaveDisplayToFileCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SaveDisplayToFileCmd& operator=(CmdMsg_SaveDisplayToFileCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SaveDisplayToFileCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SaveDisplayToFileCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SaveDisplayToFileCmd*>(
               &_CmdMsg_SaveDisplayToFileCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(CmdMsg_SaveDisplayToFileCmd* other);
  friend void swap(CmdMsg_SaveDisplayToFileCmd& a, CmdMsg_SaveDisplayToFileCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SaveDisplayToFileCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SaveDisplayToFileCmd>(NULL);
  }

  CmdMsg_SaveDisplayToFileCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SaveDisplayToFileCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SaveDisplayToFileCmd& from);
  void MergeFrom(const CmdMsg_SaveDisplayToFileCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SaveDisplayToFileCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SaveDisplayToFileCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LoadDisplayFromFileCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LoadDisplayFromFileCmd) */ {
 public:
  CmdMsg_LoadDisplayFromFileCmd();
  virtual ~CmdMsg_LoadDisplayFromFileCmd();

  CmdMsg_LoadDisplayFromFileCmd(const CmdMsg_LoadDisplayFromFileCmd& from);

  inline CmdMsg_LoadDisplayFromFileCmd& operator=(const CmdMsg_LoadDisplayFromFileCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LoadDisplayFromFileCmd(CmdMsg_LoadDisplayFromFileCmd&& from) noexcept
    : CmdMsg_LoadDisplayFromFileCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LoadDisplayFromFileCmd& operator=(CmdMsg_LoadDisplayFromFileCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LoadDisplayFromFileCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LoadDisplayFromFileCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LoadDisplayFromFileCmd*>(
               &_CmdMsg_LoadDisplayFromFileCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(CmdMsg_LoadDisplayFromFileCmd* other);
  friend void swap(CmdMsg_LoadDisplayFromFileCmd& a, CmdMsg_LoadDisplayFromFileCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LoadDisplayFromFileCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_LoadDisplayFromFileCmd>(NULL);
  }

  CmdMsg_LoadDisplayFromFileCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LoadDisplayFromFileCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LoadDisplayFromFileCmd& from);
  void MergeFrom(const CmdMsg_LoadDisplayFromFileCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LoadDisplayFromFileCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LoadDisplayFromFileCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_SaveOverlayToFileCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.SaveOverlayToFileCmd) */ {
 public:
  CmdMsg_SaveOverlayToFileCmd();
  virtual ~CmdMsg_SaveOverlayToFileCmd();

  CmdMsg_SaveOverlayToFileCmd(const CmdMsg_SaveOverlayToFileCmd& from);

  inline CmdMsg_SaveOverlayToFileCmd& operator=(const CmdMsg_SaveOverlayToFileCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_SaveOverlayToFileCmd(CmdMsg_SaveOverlayToFileCmd&& from) noexcept
    : CmdMsg_SaveOverlayToFileCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_SaveOverlayToFileCmd& operator=(CmdMsg_SaveOverlayToFileCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_SaveOverlayToFileCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_SaveOverlayToFileCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_SaveOverlayToFileCmd*>(
               &_CmdMsg_SaveOverlayToFileCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(CmdMsg_SaveOverlayToFileCmd* other);
  friend void swap(CmdMsg_SaveOverlayToFileCmd& a, CmdMsg_SaveOverlayToFileCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_SaveOverlayToFileCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_SaveOverlayToFileCmd>(NULL);
  }

  CmdMsg_SaveOverlayToFileCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_SaveOverlayToFileCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_SaveOverlayToFileCmd& from);
  void MergeFrom(const CmdMsg_SaveOverlayToFileCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_SaveOverlayToFileCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // uint32 viewPortID = 2;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 2;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // bool mainOverlay = 1;
  void clear_mainoverlay();
  static const int kMainOverlayFieldNumber = 1;
  bool mainoverlay() const;
  void set_mainoverlay(bool value);

  // bool reportErrStr = 5;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 5;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.SaveOverlayToFileCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 viewportid_;
  bool mainoverlay_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LoadOverlayFromFileCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LoadOverlayFromFileCmd) */ {
 public:
  CmdMsg_LoadOverlayFromFileCmd();
  virtual ~CmdMsg_LoadOverlayFromFileCmd();

  CmdMsg_LoadOverlayFromFileCmd(const CmdMsg_LoadOverlayFromFileCmd& from);

  inline CmdMsg_LoadOverlayFromFileCmd& operator=(const CmdMsg_LoadOverlayFromFileCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LoadOverlayFromFileCmd(CmdMsg_LoadOverlayFromFileCmd&& from) noexcept
    : CmdMsg_LoadOverlayFromFileCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LoadOverlayFromFileCmd& operator=(CmdMsg_LoadOverlayFromFileCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LoadOverlayFromFileCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LoadOverlayFromFileCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LoadOverlayFromFileCmd*>(
               &_CmdMsg_LoadOverlayFromFileCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(CmdMsg_LoadOverlayFromFileCmd* other);
  friend void swap(CmdMsg_LoadOverlayFromFileCmd& a, CmdMsg_LoadOverlayFromFileCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LoadOverlayFromFileCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_LoadOverlayFromFileCmd>(NULL);
  }

  CmdMsg_LoadOverlayFromFileCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LoadOverlayFromFileCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LoadOverlayFromFileCmd& from);
  void MergeFrom(const CmdMsg_LoadOverlayFromFileCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LoadOverlayFromFileCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // uint32 viewPortID = 2;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 2;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // bool mainOverlay = 1;
  void clear_mainoverlay();
  static const int kMainOverlayFieldNumber = 1;
  bool mainoverlay() const;
  void set_mainoverlay(bool value);

  // bool reportErrStr = 5;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 5;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LoadOverlayFromFileCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 viewportid_;
  bool mainoverlay_;
  bool reporterrstr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_LoadFontsCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.LoadFontsCmd) */ {
 public:
  CmdMsg_LoadFontsCmd();
  virtual ~CmdMsg_LoadFontsCmd();

  CmdMsg_LoadFontsCmd(const CmdMsg_LoadFontsCmd& from);

  inline CmdMsg_LoadFontsCmd& operator=(const CmdMsg_LoadFontsCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_LoadFontsCmd(CmdMsg_LoadFontsCmd&& from) noexcept
    : CmdMsg_LoadFontsCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_LoadFontsCmd& operator=(CmdMsg_LoadFontsCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_LoadFontsCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_LoadFontsCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_LoadFontsCmd*>(
               &_CmdMsg_LoadFontsCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CmdMsg_LoadFontsCmd* other);
  friend void swap(CmdMsg_LoadFontsCmd& a, CmdMsg_LoadFontsCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_LoadFontsCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_LoadFontsCmd>(NULL);
  }

  CmdMsg_LoadFontsCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_LoadFontsCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_LoadFontsCmd& from);
  void MergeFrom(const CmdMsg_LoadFontsCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_LoadFontsCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fontFiles = 4;
  int fontfiles_size() const;
  void clear_fontfiles();
  static const int kFontFilesFieldNumber = 4;
  const ::std::string& fontfiles(int index) const;
  ::std::string* mutable_fontfiles(int index);
  void set_fontfiles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fontfiles(int index, ::std::string&& value);
  #endif
  void set_fontfiles(int index, const char* value);
  void set_fontfiles(int index, const char* value, size_t size);
  ::std::string* add_fontfiles();
  void add_fontfiles(const ::std::string& value);
  #if LANG_CXX11
  void add_fontfiles(::std::string&& value);
  #endif
  void add_fontfiles(const char* value);
  void add_fontfiles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fontfiles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fontfiles();

  // bool reportParamVals = 1;
  void clear_reportparamvals();
  static const int kReportParamValsFieldNumber = 1;
  bool reportparamvals() const;
  void set_reportparamvals(bool value);

  // bool reportErrStr = 2;
  void clear_reporterrstr();
  static const int kReportErrStrFieldNumber = 2;
  bool reporterrstr() const;
  void set_reporterrstr(bool value);

  // bool overwriteFiles = 3;
  void clear_overwritefiles();
  static const int kOverwriteFilesFieldNumber = 3;
  bool overwritefiles() const;
  void set_overwritefiles(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.LoadFontsCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fontfiles_;
  bool reportparamvals_;
  bool reporterrstr_;
  bool overwritefiles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_RestoreFactoryDisplayCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.RestoreFactoryDisplayCmd) */ {
 public:
  CmdMsg_RestoreFactoryDisplayCmd();
  virtual ~CmdMsg_RestoreFactoryDisplayCmd();

  CmdMsg_RestoreFactoryDisplayCmd(const CmdMsg_RestoreFactoryDisplayCmd& from);

  inline CmdMsg_RestoreFactoryDisplayCmd& operator=(const CmdMsg_RestoreFactoryDisplayCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_RestoreFactoryDisplayCmd(CmdMsg_RestoreFactoryDisplayCmd&& from) noexcept
    : CmdMsg_RestoreFactoryDisplayCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_RestoreFactoryDisplayCmd& operator=(CmdMsg_RestoreFactoryDisplayCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_RestoreFactoryDisplayCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_RestoreFactoryDisplayCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_RestoreFactoryDisplayCmd*>(
               &_CmdMsg_RestoreFactoryDisplayCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CmdMsg_RestoreFactoryDisplayCmd* other);
  friend void swap(CmdMsg_RestoreFactoryDisplayCmd& a, CmdMsg_RestoreFactoryDisplayCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_RestoreFactoryDisplayCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_RestoreFactoryDisplayCmd>(NULL);
  }

  CmdMsg_RestoreFactoryDisplayCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_RestoreFactoryDisplayCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_RestoreFactoryDisplayCmd& from);
  void MergeFrom(const CmdMsg_RestoreFactoryDisplayCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_RestoreFactoryDisplayCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.RestoreFactoryDisplayCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_DisplayCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.DisplayCmd) */ {
 public:
  CmdMsg_DisplayCmd();
  virtual ~CmdMsg_DisplayCmd();

  CmdMsg_DisplayCmd(const CmdMsg_DisplayCmd& from);

  inline CmdMsg_DisplayCmd& operator=(const CmdMsg_DisplayCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_DisplayCmd(CmdMsg_DisplayCmd&& from) noexcept
    : CmdMsg_DisplayCmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_DisplayCmd& operator=(CmdMsg_DisplayCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_DisplayCmd& default_instance();

  enum CommandCase {
    kSetDisplayCfg = 1,
    kGetDisplayCfg = 2,
    kSaveDefaultDisplayCmd = 5,
    kSaveDisplayCmd = 6,
    kLoadDisplayCmd = 7,
    kRestoreFactoryDisplayCfgn = 8,
    kLoadFontsCmd = 10,
    kSaveOverlayToFileCmd = 15,
    kLoadOverlayFromFileCmd = 16,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_DisplayCmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_DisplayCmd*>(
               &_CmdMsg_DisplayCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(CmdMsg_DisplayCmd* other);
  friend void swap(CmdMsg_DisplayCmd& a, CmdMsg_DisplayCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_DisplayCmd* New() const final {
    return CreateMaybeMessage<CmdMsg_DisplayCmd>(NULL);
  }

  CmdMsg_DisplayCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_DisplayCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_DisplayCmd& from);
  void MergeFrom(const CmdMsg_DisplayCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_DisplayCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HaWC.CmdMsg.SetDisplayCfgCmd setDisplayCfg = 1;
  bool has_setdisplaycfg() const;
  void clear_setdisplaycfg();
  static const int kSetDisplayCfgFieldNumber = 1;
  private:
  const ::HaWC::CmdMsg_SetDisplayCfgCmd& _internal_setdisplaycfg() const;
  public:
  const ::HaWC::CmdMsg_SetDisplayCfgCmd& setdisplaycfg() const;
  ::HaWC::CmdMsg_SetDisplayCfgCmd* release_setdisplaycfg();
  ::HaWC::CmdMsg_SetDisplayCfgCmd* mutable_setdisplaycfg();
  void set_allocated_setdisplaycfg(::HaWC::CmdMsg_SetDisplayCfgCmd* setdisplaycfg);

  // .HaWC.CmdMsg.GetDisplayCfgCmd getDisplayCfg = 2;
  bool has_getdisplaycfg() const;
  void clear_getdisplaycfg();
  static const int kGetDisplayCfgFieldNumber = 2;
  private:
  const ::HaWC::CmdMsg_GetDisplayCfgCmd& _internal_getdisplaycfg() const;
  public:
  const ::HaWC::CmdMsg_GetDisplayCfgCmd& getdisplaycfg() const;
  ::HaWC::CmdMsg_GetDisplayCfgCmd* release_getdisplaycfg();
  ::HaWC::CmdMsg_GetDisplayCfgCmd* mutable_getdisplaycfg();
  void set_allocated_getdisplaycfg(::HaWC::CmdMsg_GetDisplayCfgCmd* getdisplaycfg);

  // .HaWC.CmdMsg.SaveDefaultDisplayCmd saveDefaultDisplayCmd = 5;
  bool has_savedefaultdisplaycmd() const;
  void clear_savedefaultdisplaycmd();
  static const int kSaveDefaultDisplayCmdFieldNumber = 5;
  private:
  const ::HaWC::CmdMsg_SaveDefaultDisplayCmd& _internal_savedefaultdisplaycmd() const;
  public:
  const ::HaWC::CmdMsg_SaveDefaultDisplayCmd& savedefaultdisplaycmd() const;
  ::HaWC::CmdMsg_SaveDefaultDisplayCmd* release_savedefaultdisplaycmd();
  ::HaWC::CmdMsg_SaveDefaultDisplayCmd* mutable_savedefaultdisplaycmd();
  void set_allocated_savedefaultdisplaycmd(::HaWC::CmdMsg_SaveDefaultDisplayCmd* savedefaultdisplaycmd);

  // .HaWC.CmdMsg.SaveDisplayToFileCmd saveDisplayCmd = 6;
  bool has_savedisplaycmd() const;
  void clear_savedisplaycmd();
  static const int kSaveDisplayCmdFieldNumber = 6;
  private:
  const ::HaWC::CmdMsg_SaveDisplayToFileCmd& _internal_savedisplaycmd() const;
  public:
  const ::HaWC::CmdMsg_SaveDisplayToFileCmd& savedisplaycmd() const;
  ::HaWC::CmdMsg_SaveDisplayToFileCmd* release_savedisplaycmd();
  ::HaWC::CmdMsg_SaveDisplayToFileCmd* mutable_savedisplaycmd();
  void set_allocated_savedisplaycmd(::HaWC::CmdMsg_SaveDisplayToFileCmd* savedisplaycmd);

  // .HaWC.CmdMsg.LoadDisplayFromFileCmd loadDisplayCmd = 7;
  bool has_loaddisplaycmd() const;
  void clear_loaddisplaycmd();
  static const int kLoadDisplayCmdFieldNumber = 7;
  private:
  const ::HaWC::CmdMsg_LoadDisplayFromFileCmd& _internal_loaddisplaycmd() const;
  public:
  const ::HaWC::CmdMsg_LoadDisplayFromFileCmd& loaddisplaycmd() const;
  ::HaWC::CmdMsg_LoadDisplayFromFileCmd* release_loaddisplaycmd();
  ::HaWC::CmdMsg_LoadDisplayFromFileCmd* mutable_loaddisplaycmd();
  void set_allocated_loaddisplaycmd(::HaWC::CmdMsg_LoadDisplayFromFileCmd* loaddisplaycmd);

  // .HaWC.CmdMsg.RestoreFactoryDisplayCmd restoreFactoryDisplayCfgn = 8;
  bool has_restorefactorydisplaycfgn() const;
  void clear_restorefactorydisplaycfgn();
  static const int kRestoreFactoryDisplayCfgnFieldNumber = 8;
  private:
  const ::HaWC::CmdMsg_RestoreFactoryDisplayCmd& _internal_restorefactorydisplaycfgn() const;
  public:
  const ::HaWC::CmdMsg_RestoreFactoryDisplayCmd& restorefactorydisplaycfgn() const;
  ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* release_restorefactorydisplaycfgn();
  ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* mutable_restorefactorydisplaycfgn();
  void set_allocated_restorefactorydisplaycfgn(::HaWC::CmdMsg_RestoreFactoryDisplayCmd* restorefactorydisplaycfgn);

  // .HaWC.CmdMsg.LoadFontsCmd loadFontsCmd = 10;
  bool has_loadfontscmd() const;
  void clear_loadfontscmd();
  static const int kLoadFontsCmdFieldNumber = 10;
  private:
  const ::HaWC::CmdMsg_LoadFontsCmd& _internal_loadfontscmd() const;
  public:
  const ::HaWC::CmdMsg_LoadFontsCmd& loadfontscmd() const;
  ::HaWC::CmdMsg_LoadFontsCmd* release_loadfontscmd();
  ::HaWC::CmdMsg_LoadFontsCmd* mutable_loadfontscmd();
  void set_allocated_loadfontscmd(::HaWC::CmdMsg_LoadFontsCmd* loadfontscmd);

  // .HaWC.CmdMsg.SaveOverlayToFileCmd saveOverlayToFileCmd = 15;
  bool has_saveoverlaytofilecmd() const;
  void clear_saveoverlaytofilecmd();
  static const int kSaveOverlayToFileCmdFieldNumber = 15;
  private:
  const ::HaWC::CmdMsg_SaveOverlayToFileCmd& _internal_saveoverlaytofilecmd() const;
  public:
  const ::HaWC::CmdMsg_SaveOverlayToFileCmd& saveoverlaytofilecmd() const;
  ::HaWC::CmdMsg_SaveOverlayToFileCmd* release_saveoverlaytofilecmd();
  ::HaWC::CmdMsg_SaveOverlayToFileCmd* mutable_saveoverlaytofilecmd();
  void set_allocated_saveoverlaytofilecmd(::HaWC::CmdMsg_SaveOverlayToFileCmd* saveoverlaytofilecmd);

  // .HaWC.CmdMsg.LoadOverlayFromFileCmd loadOverlayFromFileCmd = 16;
  bool has_loadoverlayfromfilecmd() const;
  void clear_loadoverlayfromfilecmd();
  static const int kLoadOverlayFromFileCmdFieldNumber = 16;
  private:
  const ::HaWC::CmdMsg_LoadOverlayFromFileCmd& _internal_loadoverlayfromfilecmd() const;
  public:
  const ::HaWC::CmdMsg_LoadOverlayFromFileCmd& loadoverlayfromfilecmd() const;
  ::HaWC::CmdMsg_LoadOverlayFromFileCmd* release_loadoverlayfromfilecmd();
  ::HaWC::CmdMsg_LoadOverlayFromFileCmd* mutable_loadoverlayfromfilecmd();
  void set_allocated_loadoverlayfromfilecmd(::HaWC::CmdMsg_LoadOverlayFromFileCmd* loadoverlayfromfilecmd);

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.DisplayCmd)
 private:
  void set_has_setdisplaycfg();
  void set_has_getdisplaycfg();
  void set_has_savedefaultdisplaycmd();
  void set_has_savedisplaycmd();
  void set_has_loaddisplaycmd();
  void set_has_restorefactorydisplaycfgn();
  void set_has_loadfontscmd();
  void set_has_saveoverlaytofilecmd();
  void set_has_loadoverlayfromfilecmd();

  inline bool has_command() const;
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union CommandUnion {
    CommandUnion() {}
    ::HaWC::CmdMsg_SetDisplayCfgCmd* setdisplaycfg_;
    ::HaWC::CmdMsg_GetDisplayCfgCmd* getdisplaycfg_;
    ::HaWC::CmdMsg_SaveDefaultDisplayCmd* savedefaultdisplaycmd_;
    ::HaWC::CmdMsg_SaveDisplayToFileCmd* savedisplaycmd_;
    ::HaWC::CmdMsg_LoadDisplayFromFileCmd* loaddisplaycmd_;
    ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* restorefactorydisplaycfgn_;
    ::HaWC::CmdMsg_LoadFontsCmd* loadfontscmd_;
    ::HaWC::CmdMsg_SaveOverlayToFileCmd* saveoverlaytofilecmd_;
    ::HaWC::CmdMsg_LoadOverlayFromFileCmd* loadoverlayfromfilecmd_;
  } command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg_IO_Cmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg.IO_Cmd) */ {
 public:
  CmdMsg_IO_Cmd();
  virtual ~CmdMsg_IO_Cmd();

  CmdMsg_IO_Cmd(const CmdMsg_IO_Cmd& from);

  inline CmdMsg_IO_Cmd& operator=(const CmdMsg_IO_Cmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg_IO_Cmd(CmdMsg_IO_Cmd&& from) noexcept
    : CmdMsg_IO_Cmd() {
    *this = ::std::move(from);
  }

  inline CmdMsg_IO_Cmd& operator=(CmdMsg_IO_Cmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg_IO_Cmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg_IO_Cmd* internal_default_instance() {
    return reinterpret_cast<const CmdMsg_IO_Cmd*>(
               &_CmdMsg_IO_Cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(CmdMsg_IO_Cmd* other);
  friend void swap(CmdMsg_IO_Cmd& a, CmdMsg_IO_Cmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg_IO_Cmd* New() const final {
    return CreateMaybeMessage<CmdMsg_IO_Cmd>(NULL);
  }

  CmdMsg_IO_Cmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg_IO_Cmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg_IO_Cmd& from);
  void MergeFrom(const CmdMsg_IO_Cmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg_IO_Cmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg.IO_Cmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.CmdMsg) */ {
 public:
  CmdMsg();
  virtual ~CmdMsg();

  CmdMsg(const CmdMsg& from);

  inline CmdMsg& operator=(const CmdMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdMsg(CmdMsg&& from) noexcept
    : CmdMsg() {
    *this = ::std::move(from);
  }

  inline CmdMsg& operator=(CmdMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdMsg& default_instance();

  enum CommandCase {
    kAppCmd = 4,
    kDisplayCmd = 5,
    kIoCmd = 6,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdMsg* internal_default_instance() {
    return reinterpret_cast<const CmdMsg*>(
               &_CmdMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CmdMsg* other);
  friend void swap(CmdMsg& a, CmdMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdMsg* New() const final {
    return CreateMaybeMessage<CmdMsg>(NULL);
  }

  CmdMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CmdMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CmdMsg& from);
  void MergeFrom(const CmdMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CmdMsg_CloseCmd CloseCmd;
  typedef CmdMsg_SaveDefaultConfigCmd SaveDefaultConfigCmd;
  typedef CmdMsg_SaveConfigToFileCmd SaveConfigToFileCmd;
  typedef CmdMsg_LoadConfigFromFileCmd LoadConfigFromFileCmd;
  typedef CmdMsg_RestoreFactoryConfigCmd RestoreFactoryConfigCmd;
  typedef CmdMsg_ParamSet ParamSet;
  typedef CmdMsg_SetParamsCmd SetParamsCmd;
  typedef CmdMsg_ParamLoc ParamLoc;
  typedef CmdMsg_GetParamsCmd GetParamsCmd;
  typedef CmdMsg_GetParamsCfgnCmd GetParamsCfgnCmd;
  typedef CmdMsg_GetFileHashCmd GetFileHashCmd;
  typedef CmdMsg_AppManagerCmd AppManagerCmd;
  typedef CmdMsg_LineProperty LineProperty;
  typedef CmdMsg_LineProperties LineProperties;
  typedef CmdMsg_CircleProperty CircleProperty;
  typedef CmdMsg_CircleProperties CircleProperties;
  typedef CmdMsg_RectangleProperty RectangleProperty;
  typedef CmdMsg_RectangleProperties RectangleProperties;
  typedef CmdMsg_ImageProperty ImageProperty;
  typedef CmdMsg_ImageProperties ImageProperties;
  typedef CmdMsg_FileListProperty FileListProperty;
  typedef CmdMsg_FileListProperties FileListProperties;
  typedef CmdMsg_ToolBarProperty ToolBarProperty;
  typedef CmdMsg_ListProperty ListProperty;
  typedef CmdMsg_ListProperties ListProperties;
  typedef CmdMsg_ToolBarProperties ToolBarProperties;
  typedef CmdMsg_MenuProperty MenuProperty;
  typedef CmdMsg_MenuProperties MenuProperties;
  typedef CmdMsg_LabelProperty LabelProperty;
  typedef CmdMsg_LabelProperties LabelProperties;
  typedef CmdMsg_Component Component;
  typedef CmdMsg_ComponentList ComponentList;
  typedef CmdMsg_OverlayCmd OverlayCmd;
  typedef CmdMsg_SetFeedSourceCmd SetFeedSourceCmd;
  typedef CmdMsg_SetViewFeedCmd SetViewFeedCmd;
  typedef CmdMsg_SetViewWindowCmd SetViewWindowCmd;
  typedef CmdMsg_SetDisplayCfgCmd SetDisplayCfgCmd;
  typedef CmdMsg_GetDisplayCfgCmd GetDisplayCfgCmd;
  typedef CmdMsg_SaveDefaultDisplayCmd SaveDefaultDisplayCmd;
  typedef CmdMsg_SaveDisplayToFileCmd SaveDisplayToFileCmd;
  typedef CmdMsg_LoadDisplayFromFileCmd LoadDisplayFromFileCmd;
  typedef CmdMsg_SaveOverlayToFileCmd SaveOverlayToFileCmd;
  typedef CmdMsg_LoadOverlayFromFileCmd LoadOverlayFromFileCmd;
  typedef CmdMsg_LoadFontsCmd LoadFontsCmd;
  typedef CmdMsg_RestoreFactoryDisplayCmd RestoreFactoryDisplayCmd;
  typedef CmdMsg_DisplayCmd DisplayCmd;
  typedef CmdMsg_IO_Cmd IO_Cmd;

  typedef CmdMsg_CloseAction CloseAction;
  static const CloseAction RestartApp =
    CmdMsg_CloseAction_RestartApp;
  static const CloseAction CloseApp =
    CmdMsg_CloseAction_CloseApp;
  static const CloseAction RestartOS =
    CmdMsg_CloseAction_RestartOS;
  static const CloseAction ShutdownOS =
    CmdMsg_CloseAction_ShutdownOS;
  static inline bool CloseAction_IsValid(int value) {
    return CmdMsg_CloseAction_IsValid(value);
  }
  static const CloseAction CloseAction_MIN =
    CmdMsg_CloseAction_CloseAction_MIN;
  static const CloseAction CloseAction_MAX =
    CmdMsg_CloseAction_CloseAction_MAX;
  static const int CloseAction_ARRAYSIZE =
    CmdMsg_CloseAction_CloseAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CloseAction_descriptor() {
    return CmdMsg_CloseAction_descriptor();
  }
  static inline const ::std::string& CloseAction_Name(CloseAction value) {
    return CmdMsg_CloseAction_Name(value);
  }
  static inline bool CloseAction_Parse(const ::std::string& name,
      CloseAction* value) {
    return CmdMsg_CloseAction_Parse(name, value);
  }

  typedef CmdMsg_FillMode FillMode;
  static const FillMode Stretch =
    CmdMsg_FillMode_Stretch;
  static const FillMode PreserveAspect =
    CmdMsg_FillMode_PreserveAspect;
  static const FillMode PreserveAspectCrop =
    CmdMsg_FillMode_PreserveAspectCrop;
  static const FillMode Tile =
    CmdMsg_FillMode_Tile;
  static const FillMode TileVert =
    CmdMsg_FillMode_TileVert;
  static const FillMode TileHoriz =
    CmdMsg_FillMode_TileHoriz;
  static const FillMode Pad =
    CmdMsg_FillMode_Pad;
  static inline bool FillMode_IsValid(int value) {
    return CmdMsg_FillMode_IsValid(value);
  }
  static const FillMode FillMode_MIN =
    CmdMsg_FillMode_FillMode_MIN;
  static const FillMode FillMode_MAX =
    CmdMsg_FillMode_FillMode_MAX;
  static const int FillMode_ARRAYSIZE =
    CmdMsg_FillMode_FillMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FillMode_descriptor() {
    return CmdMsg_FillMode_descriptor();
  }
  static inline const ::std::string& FillMode_Name(FillMode value) {
    return CmdMsg_FillMode_Name(value);
  }
  static inline bool FillMode_Parse(const ::std::string& name,
      FillMode* value) {
    return CmdMsg_FillMode_Parse(name, value);
  }

  typedef CmdMsg_WrapMode WrapMode;
  static const WrapMode NoWrap =
    CmdMsg_WrapMode_NoWrap;
  static const WrapMode WordWrap =
    CmdMsg_WrapMode_WordWrap;
  static const WrapMode WrapAnywhere =
    CmdMsg_WrapMode_WrapAnywhere;
  static const WrapMode Wrap =
    CmdMsg_WrapMode_Wrap;
  static inline bool WrapMode_IsValid(int value) {
    return CmdMsg_WrapMode_IsValid(value);
  }
  static const WrapMode WrapMode_MIN =
    CmdMsg_WrapMode_WrapMode_MIN;
  static const WrapMode WrapMode_MAX =
    CmdMsg_WrapMode_WrapMode_MAX;
  static const int WrapMode_ARRAYSIZE =
    CmdMsg_WrapMode_WrapMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WrapMode_descriptor() {
    return CmdMsg_WrapMode_descriptor();
  }
  static inline const ::std::string& WrapMode_Name(WrapMode value) {
    return CmdMsg_WrapMode_Name(value);
  }
  static inline bool WrapMode_Parse(const ::std::string& name,
      WrapMode* value) {
    return CmdMsg_WrapMode_Parse(name, value);
  }

  typedef CmdMsg_TextFormat TextFormat;
  static const TextFormat AutoText =
    CmdMsg_TextFormat_AutoText;
  static const TextFormat PlainText =
    CmdMsg_TextFormat_PlainText;
  static const TextFormat RichText =
    CmdMsg_TextFormat_RichText;
  static inline bool TextFormat_IsValid(int value) {
    return CmdMsg_TextFormat_IsValid(value);
  }
  static const TextFormat TextFormat_MIN =
    CmdMsg_TextFormat_TextFormat_MIN;
  static const TextFormat TextFormat_MAX =
    CmdMsg_TextFormat_TextFormat_MAX;
  static const int TextFormat_ARRAYSIZE =
    CmdMsg_TextFormat_TextFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TextFormat_descriptor() {
    return CmdMsg_TextFormat_descriptor();
  }
  static inline const ::std::string& TextFormat_Name(TextFormat value) {
    return CmdMsg_TextFormat_Name(value);
  }
  static inline bool TextFormat_Parse(const ::std::string& name,
      TextFormat* value) {
    return CmdMsg_TextFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 seqNum = 1;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 1;
  ::google::protobuf::uint32 seqnum() const;
  void set_seqnum(::google::protobuf::uint32 value);

  // .HaWC.CmdMsg.AppManagerCmd appCmd = 4;
  bool has_appcmd() const;
  void clear_appcmd();
  static const int kAppCmdFieldNumber = 4;
  private:
  const ::HaWC::CmdMsg_AppManagerCmd& _internal_appcmd() const;
  public:
  const ::HaWC::CmdMsg_AppManagerCmd& appcmd() const;
  ::HaWC::CmdMsg_AppManagerCmd* release_appcmd();
  ::HaWC::CmdMsg_AppManagerCmd* mutable_appcmd();
  void set_allocated_appcmd(::HaWC::CmdMsg_AppManagerCmd* appcmd);

  // .HaWC.CmdMsg.DisplayCmd displayCmd = 5;
  bool has_displaycmd() const;
  void clear_displaycmd();
  static const int kDisplayCmdFieldNumber = 5;
  private:
  const ::HaWC::CmdMsg_DisplayCmd& _internal_displaycmd() const;
  public:
  const ::HaWC::CmdMsg_DisplayCmd& displaycmd() const;
  ::HaWC::CmdMsg_DisplayCmd* release_displaycmd();
  ::HaWC::CmdMsg_DisplayCmd* mutable_displaycmd();
  void set_allocated_displaycmd(::HaWC::CmdMsg_DisplayCmd* displaycmd);

  // .HaWC.CmdMsg.IO_Cmd ioCmd = 6;
  bool has_iocmd() const;
  void clear_iocmd();
  static const int kIoCmdFieldNumber = 6;
  private:
  const ::HaWC::CmdMsg_IO_Cmd& _internal_iocmd() const;
  public:
  const ::HaWC::CmdMsg_IO_Cmd& iocmd() const;
  ::HaWC::CmdMsg_IO_Cmd* release_iocmd();
  ::HaWC::CmdMsg_IO_Cmd* mutable_iocmd();
  void set_allocated_iocmd(::HaWC::CmdMsg_IO_Cmd* iocmd);

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.CmdMsg)
 private:
  void set_has_appcmd();
  void set_has_displaycmd();
  void set_has_iocmd();

  inline bool has_command() const;
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 seqnum_;
  union CommandUnion {
    CommandUnion() {}
    ::HaWC::CmdMsg_AppManagerCmd* appcmd_;
    ::HaWC::CmdMsg_DisplayCmd* displaycmd_;
    ::HaWC::CmdMsg_IO_Cmd* iocmd_;
  } command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ResetEvt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ResetEvt) */ {
 public:
  RspMsg_ResetEvt();
  virtual ~RspMsg_ResetEvt();

  RspMsg_ResetEvt(const RspMsg_ResetEvt& from);

  inline RspMsg_ResetEvt& operator=(const RspMsg_ResetEvt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ResetEvt(RspMsg_ResetEvt&& from) noexcept
    : RspMsg_ResetEvt() {
    *this = ::std::move(from);
  }

  inline RspMsg_ResetEvt& operator=(RspMsg_ResetEvt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ResetEvt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ResetEvt* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ResetEvt*>(
               &_RspMsg_ResetEvt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(RspMsg_ResetEvt* other);
  friend void swap(RspMsg_ResetEvt& a, RspMsg_ResetEvt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ResetEvt* New() const final {
    return CreateMaybeMessage<RspMsg_ResetEvt>(NULL);
  }

  RspMsg_ResetEvt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ResetEvt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ResetEvt& from);
  void MergeFrom(const RspMsg_ResetEvt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ResetEvt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 sessionID = 1;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 1;
  ::google::protobuf::uint32 sessionid() const;
  void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ResetEvt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_SaveConfigRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.SaveConfigRsp) */ {
 public:
  RspMsg_SaveConfigRsp();
  virtual ~RspMsg_SaveConfigRsp();

  RspMsg_SaveConfigRsp(const RspMsg_SaveConfigRsp& from);

  inline RspMsg_SaveConfigRsp& operator=(const RspMsg_SaveConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_SaveConfigRsp(RspMsg_SaveConfigRsp&& from) noexcept
    : RspMsg_SaveConfigRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_SaveConfigRsp& operator=(RspMsg_SaveConfigRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_SaveConfigRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_SaveConfigRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_SaveConfigRsp*>(
               &_RspMsg_SaveConfigRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(RspMsg_SaveConfigRsp* other);
  friend void swap(RspMsg_SaveConfigRsp& a, RspMsg_SaveConfigRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_SaveConfigRsp* New() const final {
    return CreateMaybeMessage<RspMsg_SaveConfigRsp>(NULL);
  }

  RspMsg_SaveConfigRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_SaveConfigRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_SaveConfigRsp& from);
  void MergeFrom(const RspMsg_SaveConfigRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_SaveConfigRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.SaveConfigRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_LoadConfigRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.LoadConfigRsp) */ {
 public:
  RspMsg_LoadConfigRsp();
  virtual ~RspMsg_LoadConfigRsp();

  RspMsg_LoadConfigRsp(const RspMsg_LoadConfigRsp& from);

  inline RspMsg_LoadConfigRsp& operator=(const RspMsg_LoadConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_LoadConfigRsp(RspMsg_LoadConfigRsp&& from) noexcept
    : RspMsg_LoadConfigRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_LoadConfigRsp& operator=(RspMsg_LoadConfigRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_LoadConfigRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_LoadConfigRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_LoadConfigRsp*>(
               &_RspMsg_LoadConfigRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(RspMsg_LoadConfigRsp* other);
  friend void swap(RspMsg_LoadConfigRsp& a, RspMsg_LoadConfigRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_LoadConfigRsp* New() const final {
    return CreateMaybeMessage<RspMsg_LoadConfigRsp>(NULL);
  }

  RspMsg_LoadConfigRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_LoadConfigRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_LoadConfigRsp& from);
  void MergeFrom(const RspMsg_LoadConfigRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_LoadConfigRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.LoadConfigRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ParamDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ParamDetails) */ {
 public:
  RspMsg_ParamDetails();
  virtual ~RspMsg_ParamDetails();

  RspMsg_ParamDetails(const RspMsg_ParamDetails& from);

  inline RspMsg_ParamDetails& operator=(const RspMsg_ParamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ParamDetails(RspMsg_ParamDetails&& from) noexcept
    : RspMsg_ParamDetails() {
    *this = ::std::move(from);
  }

  inline RspMsg_ParamDetails& operator=(RspMsg_ParamDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ParamDetails& default_instance();

  enum DataCase {
    kBoolVal = 10,
    kUintVal = 11,
    kIntVal = 12,
    kDoubleVal = 13,
    kStrVal = 14,
    kDataBytes = 15,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ParamDetails* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ParamDetails*>(
               &_RspMsg_ParamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(RspMsg_ParamDetails* other);
  friend void swap(RspMsg_ParamDetails& a, RspMsg_ParamDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ParamDetails* New() const final {
    return CreateMaybeMessage<RspMsg_ParamDetails>(NULL);
  }

  RspMsg_ParamDetails* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ParamDetails>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ParamDetails& from);
  void MergeFrom(const RspMsg_ParamDetails& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ParamDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paramID = 1;
  void clear_paramid();
  static const int kParamIDFieldNumber = 1;
  const ::std::string& paramid() const;
  void set_paramid(const ::std::string& value);
  #if LANG_CXX11
  void set_paramid(::std::string&& value);
  #endif
  void set_paramid(const char* value);
  void set_paramid(const char* value, size_t size);
  ::std::string* mutable_paramid();
  ::std::string* release_paramid();
  void set_allocated_paramid(::std::string* paramid);

  // uint32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // bool updated = 3;
  void clear_updated();
  static const int kUpdatedFieldNumber = 3;
  bool updated() const;
  void set_updated(bool value);

  // bool saved = 4;
  void clear_saved();
  static const int kSavedFieldNumber = 4;
  bool saved() const;
  void set_saved(bool value);

  // bool takenAffect = 5;
  void clear_takenaffect();
  static const int kTakenAffectFieldNumber = 5;
  bool takenaffect() const;
  void set_takenaffect(bool value);

  // bool boolVal = 10;
  private:
  bool has_boolval() const;
  public:
  void clear_boolval();
  static const int kBoolValFieldNumber = 10;
  bool boolval() const;
  void set_boolval(bool value);

  // uint32 uintVal = 11;
  private:
  bool has_uintval() const;
  public:
  void clear_uintval();
  static const int kUintValFieldNumber = 11;
  ::google::protobuf::uint32 uintval() const;
  void set_uintval(::google::protobuf::uint32 value);

  // sint32 intVal = 12;
  private:
  bool has_intval() const;
  public:
  void clear_intval();
  static const int kIntValFieldNumber = 12;
  ::google::protobuf::int32 intval() const;
  void set_intval(::google::protobuf::int32 value);

  // double doubleVal = 13;
  private:
  bool has_doubleval() const;
  public:
  void clear_doubleval();
  static const int kDoubleValFieldNumber = 13;
  double doubleval() const;
  void set_doubleval(double value);

  // string strVal = 14;
  private:
  bool has_strval() const;
  public:
  void clear_strval();
  static const int kStrValFieldNumber = 14;
  const ::std::string& strval() const;
  void set_strval(const ::std::string& value);
  #if LANG_CXX11
  void set_strval(::std::string&& value);
  #endif
  void set_strval(const char* value);
  void set_strval(const char* value, size_t size);
  ::std::string* mutable_strval();
  ::std::string* release_strval();
  void set_allocated_strval(::std::string* strval);

  // uint32 dataBytes = 15;
  private:
  bool has_databytes() const;
  public:
  void clear_databytes();
  static const int kDataBytesFieldNumber = 15;
  ::google::protobuf::uint32 databytes() const;
  void set_databytes(::google::protobuf::uint32 value);

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ParamDetails)
 private:
  void set_has_boolval();
  void set_has_uintval();
  void set_has_intval();
  void set_has_doubleval();
  void set_has_strval();
  void set_has_databytes();

  inline bool has_Data() const;
  inline void clear_has_Data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr paramid_;
  ::google::protobuf::uint32 offset_;
  bool updated_;
  bool saved_;
  bool takenaffect_;
  union DataUnion {
    DataUnion() {}
    bool boolval_;
    ::google::protobuf::uint32 uintval_;
    ::google::protobuf::int32 intval_;
    double doubleval_;
    ::google::protobuf::internal::ArenaStringPtr strval_;
    ::google::protobuf::uint32 databytes_;
  } Data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ParamsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ParamsRsp) */ {
 public:
  RspMsg_ParamsRsp();
  virtual ~RspMsg_ParamsRsp();

  RspMsg_ParamsRsp(const RspMsg_ParamsRsp& from);

  inline RspMsg_ParamsRsp& operator=(const RspMsg_ParamsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ParamsRsp(RspMsg_ParamsRsp&& from) noexcept
    : RspMsg_ParamsRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_ParamsRsp& operator=(RspMsg_ParamsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ParamsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ParamsRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ParamsRsp*>(
               &_RspMsg_ParamsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(RspMsg_ParamsRsp* other);
  friend void swap(RspMsg_ParamsRsp& a, RspMsg_ParamsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ParamsRsp* New() const final {
    return CreateMaybeMessage<RspMsg_ParamsRsp>(NULL);
  }

  RspMsg_ParamsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ParamsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ParamsRsp& from);
  void MergeFrom(const RspMsg_ParamsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ParamsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.RspMsg.ParamDetails params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  ::HaWC::RspMsg_ParamDetails* mutable_params(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamDetails >*
      mutable_params();
  const ::HaWC::RspMsg_ParamDetails& params(int index) const;
  ::HaWC::RspMsg_ParamDetails* add_params();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamDetails >&
      params() const;

  // string errStr = 4;
  void clear_errstr();
  static const int kErrStrFieldNumber = 4;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // .HaWC.Targets target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::HaWC::Targets target() const;
  void set_target(::HaWC::Targets value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ParamsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamDetails > params_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  int target_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ParamCfgn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ParamCfgn) */ {
 public:
  RspMsg_ParamCfgn();
  virtual ~RspMsg_ParamCfgn();

  RspMsg_ParamCfgn(const RspMsg_ParamCfgn& from);

  inline RspMsg_ParamCfgn& operator=(const RspMsg_ParamCfgn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ParamCfgn(RspMsg_ParamCfgn&& from) noexcept
    : RspMsg_ParamCfgn() {
    *this = ::std::move(from);
  }

  inline RspMsg_ParamCfgn& operator=(RspMsg_ParamCfgn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ParamCfgn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ParamCfgn* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ParamCfgn*>(
               &_RspMsg_ParamCfgn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(RspMsg_ParamCfgn* other);
  friend void swap(RspMsg_ParamCfgn& a, RspMsg_ParamCfgn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ParamCfgn* New() const final {
    return CreateMaybeMessage<RspMsg_ParamCfgn>(NULL);
  }

  RspMsg_ParamCfgn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ParamCfgn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ParamCfgn& from);
  void MergeFrom(const RspMsg_ParamCfgn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ParamCfgn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string paramID = 1;
  void clear_paramid();
  static const int kParamIDFieldNumber = 1;
  const ::std::string& paramid() const;
  void set_paramid(const ::std::string& value);
  #if LANG_CXX11
  void set_paramid(::std::string&& value);
  #endif
  void set_paramid(const char* value);
  void set_paramid(const char* value, size_t size);
  ::std::string* mutable_paramid();
  ::std::string* release_paramid();
  void set_allocated_paramid(::std::string* paramid);

  // string description = 9;
  void clear_description();
  static const int kDescriptionFieldNumber = 9;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .HaWC.RspMsg.DataTypes dataType = 2;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 2;
  ::HaWC::RspMsg_DataTypes datatype() const;
  void set_datatype(::HaWC::RspMsg_DataTypes value);

  // uint32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // bool appResetReqd = 4;
  void clear_appresetreqd();
  static const int kAppResetReqdFieldNumber = 4;
  bool appresetreqd() const;
  void set_appresetreqd(bool value);

  // bool osResetReqd = 5;
  void clear_osresetreqd();
  static const int kOsResetReqdFieldNumber = 5;
  bool osresetreqd() const;
  void set_osresetreqd(bool value);

  // bool readble = 6;
  void clear_readble();
  static const int kReadbleFieldNumber = 6;
  bool readble() const;
  void set_readble(bool value);

  // bool writeable = 7;
  void clear_writeable();
  static const int kWriteableFieldNumber = 7;
  bool writeable() const;
  void set_writeable(bool value);

  // bool scriptable = 8;
  void clear_scriptable();
  static const int kScriptableFieldNumber = 8;
  bool scriptable() const;
  void set_scriptable(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ParamCfgn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr paramid_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int datatype_;
  ::google::protobuf::uint32 count_;
  bool appresetreqd_;
  bool osresetreqd_;
  bool readble_;
  bool writeable_;
  bool scriptable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ParamsCfgnRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ParamsCfgnRsp) */ {
 public:
  RspMsg_ParamsCfgnRsp();
  virtual ~RspMsg_ParamsCfgnRsp();

  RspMsg_ParamsCfgnRsp(const RspMsg_ParamsCfgnRsp& from);

  inline RspMsg_ParamsCfgnRsp& operator=(const RspMsg_ParamsCfgnRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ParamsCfgnRsp(RspMsg_ParamsCfgnRsp&& from) noexcept
    : RspMsg_ParamsCfgnRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_ParamsCfgnRsp& operator=(RspMsg_ParamsCfgnRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ParamsCfgnRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ParamsCfgnRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ParamsCfgnRsp*>(
               &_RspMsg_ParamsCfgnRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(RspMsg_ParamsCfgnRsp* other);
  friend void swap(RspMsg_ParamsCfgnRsp& a, RspMsg_ParamsCfgnRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ParamsCfgnRsp* New() const final {
    return CreateMaybeMessage<RspMsg_ParamsCfgnRsp>(NULL);
  }

  RspMsg_ParamsCfgnRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ParamsCfgnRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ParamsCfgnRsp& from);
  void MergeFrom(const RspMsg_ParamsCfgnRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ParamsCfgnRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.RspMsg.ParamCfgn params = 2;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  ::HaWC::RspMsg_ParamCfgn* mutable_params(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamCfgn >*
      mutable_params();
  const ::HaWC::RspMsg_ParamCfgn& params(int index) const;
  ::HaWC::RspMsg_ParamCfgn* add_params();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamCfgn >&
      params() const;

  // string errStr = 4;
  void clear_errstr();
  static const int kErrStrFieldNumber = 4;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // .HaWC.Targets target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::HaWC::Targets target() const;
  void set_target(::HaWC::Targets value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ParamsCfgnRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamCfgn > params_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  int target_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_FileHashRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.FileHashRsp) */ {
 public:
  RspMsg_FileHashRsp();
  virtual ~RspMsg_FileHashRsp();

  RspMsg_FileHashRsp(const RspMsg_FileHashRsp& from);

  inline RspMsg_FileHashRsp& operator=(const RspMsg_FileHashRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_FileHashRsp(RspMsg_FileHashRsp&& from) noexcept
    : RspMsg_FileHashRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_FileHashRsp& operator=(RspMsg_FileHashRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_FileHashRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_FileHashRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_FileHashRsp*>(
               &_RspMsg_FileHashRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(RspMsg_FileHashRsp* other);
  friend void swap(RspMsg_FileHashRsp& a, RspMsg_FileHashRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_FileHashRsp* New() const final {
    return CreateMaybeMessage<RspMsg_FileHashRsp>(NULL);
  }

  RspMsg_FileHashRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_FileHashRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_FileHashRsp& from);
  void MergeFrom(const RspMsg_FileHashRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_FileHashRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes fileHash = 1;
  void clear_filehash();
  static const int kFileHashFieldNumber = 1;
  const ::std::string& filehash() const;
  void set_filehash(const ::std::string& value);
  #if LANG_CXX11
  void set_filehash(::std::string&& value);
  #endif
  void set_filehash(const char* value);
  void set_filehash(const void* value, size_t size);
  ::std::string* mutable_filehash();
  ::std::string* release_filehash();
  void set_allocated_filehash(::std::string* filehash);

  // string errStr = 3;
  void clear_errstr();
  static const int kErrStrFieldNumber = 3;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.FileHashRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filehash_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_AppManagerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.AppManagerRsp) */ {
 public:
  RspMsg_AppManagerRsp();
  virtual ~RspMsg_AppManagerRsp();

  RspMsg_AppManagerRsp(const RspMsg_AppManagerRsp& from);

  inline RspMsg_AppManagerRsp& operator=(const RspMsg_AppManagerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_AppManagerRsp(RspMsg_AppManagerRsp&& from) noexcept
    : RspMsg_AppManagerRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_AppManagerRsp& operator=(RspMsg_AppManagerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_AppManagerRsp& default_instance();

  enum ResponseCase {
    kSaveConfig = 5,
    kLoadConfigRsp = 7,
    kParams = 9,
    kGetParamsCfgn = 11,
    kFileHash = 15,
    kResetEvent = 25,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_AppManagerRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_AppManagerRsp*>(
               &_RspMsg_AppManagerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(RspMsg_AppManagerRsp* other);
  friend void swap(RspMsg_AppManagerRsp& a, RspMsg_AppManagerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_AppManagerRsp* New() const final {
    return CreateMaybeMessage<RspMsg_AppManagerRsp>(NULL);
  }

  RspMsg_AppManagerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_AppManagerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_AppManagerRsp& from);
  void MergeFrom(const RspMsg_AppManagerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_AppManagerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HaWC.RspMsg.SaveConfigRsp saveConfig = 5;
  bool has_saveconfig() const;
  void clear_saveconfig();
  static const int kSaveConfigFieldNumber = 5;
  private:
  const ::HaWC::RspMsg_SaveConfigRsp& _internal_saveconfig() const;
  public:
  const ::HaWC::RspMsg_SaveConfigRsp& saveconfig() const;
  ::HaWC::RspMsg_SaveConfigRsp* release_saveconfig();
  ::HaWC::RspMsg_SaveConfigRsp* mutable_saveconfig();
  void set_allocated_saveconfig(::HaWC::RspMsg_SaveConfigRsp* saveconfig);

  // .HaWC.RspMsg.LoadConfigRsp loadConfigRsp = 7;
  bool has_loadconfigrsp() const;
  void clear_loadconfigrsp();
  static const int kLoadConfigRspFieldNumber = 7;
  private:
  const ::HaWC::RspMsg_LoadConfigRsp& _internal_loadconfigrsp() const;
  public:
  const ::HaWC::RspMsg_LoadConfigRsp& loadconfigrsp() const;
  ::HaWC::RspMsg_LoadConfigRsp* release_loadconfigrsp();
  ::HaWC::RspMsg_LoadConfigRsp* mutable_loadconfigrsp();
  void set_allocated_loadconfigrsp(::HaWC::RspMsg_LoadConfigRsp* loadconfigrsp);

  // .HaWC.RspMsg.ParamsRsp params = 9;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 9;
  private:
  const ::HaWC::RspMsg_ParamsRsp& _internal_params() const;
  public:
  const ::HaWC::RspMsg_ParamsRsp& params() const;
  ::HaWC::RspMsg_ParamsRsp* release_params();
  ::HaWC::RspMsg_ParamsRsp* mutable_params();
  void set_allocated_params(::HaWC::RspMsg_ParamsRsp* params);

  // .HaWC.RspMsg.ParamsCfgnRsp getParamsCfgn = 11;
  bool has_getparamscfgn() const;
  void clear_getparamscfgn();
  static const int kGetParamsCfgnFieldNumber = 11;
  private:
  const ::HaWC::RspMsg_ParamsCfgnRsp& _internal_getparamscfgn() const;
  public:
  const ::HaWC::RspMsg_ParamsCfgnRsp& getparamscfgn() const;
  ::HaWC::RspMsg_ParamsCfgnRsp* release_getparamscfgn();
  ::HaWC::RspMsg_ParamsCfgnRsp* mutable_getparamscfgn();
  void set_allocated_getparamscfgn(::HaWC::RspMsg_ParamsCfgnRsp* getparamscfgn);

  // .HaWC.RspMsg.FileHashRsp fileHash = 15;
  bool has_filehash() const;
  void clear_filehash();
  static const int kFileHashFieldNumber = 15;
  private:
  const ::HaWC::RspMsg_FileHashRsp& _internal_filehash() const;
  public:
  const ::HaWC::RspMsg_FileHashRsp& filehash() const;
  ::HaWC::RspMsg_FileHashRsp* release_filehash();
  ::HaWC::RspMsg_FileHashRsp* mutable_filehash();
  void set_allocated_filehash(::HaWC::RspMsg_FileHashRsp* filehash);

  // .HaWC.RspMsg.ResetEvt resetEvent = 25;
  bool has_resetevent() const;
  void clear_resetevent();
  static const int kResetEventFieldNumber = 25;
  private:
  const ::HaWC::RspMsg_ResetEvt& _internal_resetevent() const;
  public:
  const ::HaWC::RspMsg_ResetEvt& resetevent() const;
  ::HaWC::RspMsg_ResetEvt* release_resetevent();
  ::HaWC::RspMsg_ResetEvt* mutable_resetevent();
  void set_allocated_resetevent(::HaWC::RspMsg_ResetEvt* resetevent);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.AppManagerRsp)
 private:
  void set_has_saveconfig();
  void set_has_loadconfigrsp();
  void set_has_params();
  void set_has_getparamscfgn();
  void set_has_filehash();
  void set_has_resetevent();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResponseUnion {
    ResponseUnion() {}
    ::HaWC::RspMsg_SaveConfigRsp* saveconfig_;
    ::HaWC::RspMsg_LoadConfigRsp* loadconfigrsp_;
    ::HaWC::RspMsg_ParamsRsp* params_;
    ::HaWC::RspMsg_ParamsCfgnRsp* getparamscfgn_;
    ::HaWC::RspMsg_FileHashRsp* filehash_;
    ::HaWC::RspMsg_ResetEvt* resetevent_;
  } response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_FeedSourceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.FeedSourceRsp) */ {
 public:
  RspMsg_FeedSourceRsp();
  virtual ~RspMsg_FeedSourceRsp();

  RspMsg_FeedSourceRsp(const RspMsg_FeedSourceRsp& from);

  inline RspMsg_FeedSourceRsp& operator=(const RspMsg_FeedSourceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_FeedSourceRsp(RspMsg_FeedSourceRsp&& from) noexcept
    : RspMsg_FeedSourceRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_FeedSourceRsp& operator=(RspMsg_FeedSourceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_FeedSourceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_FeedSourceRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_FeedSourceRsp*>(
               &_RspMsg_FeedSourceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(RspMsg_FeedSourceRsp* other);
  friend void swap(RspMsg_FeedSourceRsp& a, RspMsg_FeedSourceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_FeedSourceRsp* New() const final {
    return CreateMaybeMessage<RspMsg_FeedSourceRsp>(NULL);
  }

  RspMsg_FeedSourceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_FeedSourceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_FeedSourceRsp& from);
  void MergeFrom(const RspMsg_FeedSourceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_FeedSourceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sourceStr = 3;
  void clear_sourcestr();
  static const int kSourceStrFieldNumber = 3;
  const ::std::string& sourcestr() const;
  void set_sourcestr(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcestr(::std::string&& value);
  #endif
  void set_sourcestr(const char* value);
  void set_sourcestr(const char* value, size_t size);
  ::std::string* mutable_sourcestr();
  ::std::string* release_sourcestr();
  void set_allocated_sourcestr(::std::string* sourcestr);

  // int32 feedID = 1;
  void clear_feedid();
  static const int kFeedIDFieldNumber = 1;
  ::google::protobuf::int32 feedid() const;
  void set_feedid(::google::protobuf::int32 value);

  // .HaWC.FeedType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::HaWC::FeedType type() const;
  void set_type(::HaWC::FeedType value);

  // uint32 qosFrameTimeout = 4;
  void clear_qosframetimeout();
  static const int kQosFrameTimeoutFieldNumber = 4;
  ::google::protobuf::uint32 qosframetimeout() const;
  void set_qosframetimeout(::google::protobuf::uint32 value);

  // uint32 qosFrameRefresh = 5;
  void clear_qosframerefresh();
  static const int kQosFrameRefreshFieldNumber = 5;
  ::google::protobuf::uint32 qosframerefresh() const;
  void set_qosframerefresh(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.FeedSourceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sourcestr_;
  ::google::protobuf::int32 feedid_;
  int type_;
  ::google::protobuf::uint32 qosframetimeout_;
  ::google::protobuf::uint32 qosframerefresh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_OverlayCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.OverlayCreateRsp) */ {
 public:
  RspMsg_OverlayCreateRsp();
  virtual ~RspMsg_OverlayCreateRsp();

  RspMsg_OverlayCreateRsp(const RspMsg_OverlayCreateRsp& from);

  inline RspMsg_OverlayCreateRsp& operator=(const RspMsg_OverlayCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_OverlayCreateRsp(RspMsg_OverlayCreateRsp&& from) noexcept
    : RspMsg_OverlayCreateRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_OverlayCreateRsp& operator=(RspMsg_OverlayCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_OverlayCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_OverlayCreateRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_OverlayCreateRsp*>(
               &_RspMsg_OverlayCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(RspMsg_OverlayCreateRsp* other);
  friend void swap(RspMsg_OverlayCreateRsp& a, RspMsg_OverlayCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_OverlayCreateRsp* New() const final {
    return CreateMaybeMessage<RspMsg_OverlayCreateRsp>(NULL);
  }

  RspMsg_OverlayCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_OverlayCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_OverlayCreateRsp& from);
  void MergeFrom(const RspMsg_OverlayCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_OverlayCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.OverlayCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_OverlayUpdateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.OverlayUpdateRsp) */ {
 public:
  RspMsg_OverlayUpdateRsp();
  virtual ~RspMsg_OverlayUpdateRsp();

  RspMsg_OverlayUpdateRsp(const RspMsg_OverlayUpdateRsp& from);

  inline RspMsg_OverlayUpdateRsp& operator=(const RspMsg_OverlayUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_OverlayUpdateRsp(RspMsg_OverlayUpdateRsp&& from) noexcept
    : RspMsg_OverlayUpdateRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_OverlayUpdateRsp& operator=(RspMsg_OverlayUpdateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_OverlayUpdateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_OverlayUpdateRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_OverlayUpdateRsp*>(
               &_RspMsg_OverlayUpdateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(RspMsg_OverlayUpdateRsp* other);
  friend void swap(RspMsg_OverlayUpdateRsp& a, RspMsg_OverlayUpdateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_OverlayUpdateRsp* New() const final {
    return CreateMaybeMessage<RspMsg_OverlayUpdateRsp>(NULL);
  }

  RspMsg_OverlayUpdateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_OverlayUpdateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_OverlayUpdateRsp& from);
  void MergeFrom(const RspMsg_OverlayUpdateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_OverlayUpdateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.OverlayUpdateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_OverlayRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.OverlayRsp) */ {
 public:
  RspMsg_OverlayRsp();
  virtual ~RspMsg_OverlayRsp();

  RspMsg_OverlayRsp(const RspMsg_OverlayRsp& from);

  inline RspMsg_OverlayRsp& operator=(const RspMsg_OverlayRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_OverlayRsp(RspMsg_OverlayRsp&& from) noexcept
    : RspMsg_OverlayRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_OverlayRsp& operator=(RspMsg_OverlayRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_OverlayRsp& default_instance();

  enum ResponseCase {
    kCreateScreen = 5,
    kUpdateSreen = 6,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_OverlayRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_OverlayRsp*>(
               &_RspMsg_OverlayRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(RspMsg_OverlayRsp* other);
  friend void swap(RspMsg_OverlayRsp& a, RspMsg_OverlayRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_OverlayRsp* New() const final {
    return CreateMaybeMessage<RspMsg_OverlayRsp>(NULL);
  }

  RspMsg_OverlayRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_OverlayRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_OverlayRsp& from);
  void MergeFrom(const RspMsg_OverlayRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_OverlayRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 viewPortID = 1;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 1;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // .HaWC.RspMsg.OverlayCreateRsp createScreen = 5;
  bool has_createscreen() const;
  void clear_createscreen();
  static const int kCreateScreenFieldNumber = 5;
  private:
  const ::HaWC::RspMsg_OverlayCreateRsp& _internal_createscreen() const;
  public:
  const ::HaWC::RspMsg_OverlayCreateRsp& createscreen() const;
  ::HaWC::RspMsg_OverlayCreateRsp* release_createscreen();
  ::HaWC::RspMsg_OverlayCreateRsp* mutable_createscreen();
  void set_allocated_createscreen(::HaWC::RspMsg_OverlayCreateRsp* createscreen);

  // .HaWC.RspMsg.OverlayUpdateRsp updateSreen = 6;
  bool has_updatesreen() const;
  void clear_updatesreen();
  static const int kUpdateSreenFieldNumber = 6;
  private:
  const ::HaWC::RspMsg_OverlayUpdateRsp& _internal_updatesreen() const;
  public:
  const ::HaWC::RspMsg_OverlayUpdateRsp& updatesreen() const;
  ::HaWC::RspMsg_OverlayUpdateRsp* release_updatesreen();
  ::HaWC::RspMsg_OverlayUpdateRsp* mutable_updatesreen();
  void set_allocated_updatesreen(::HaWC::RspMsg_OverlayUpdateRsp* updatesreen);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.OverlayRsp)
 private:
  void set_has_createscreen();
  void set_has_updatesreen();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 viewportid_;
  union ResponseUnion {
    ResponseUnion() {}
    ::HaWC::RspMsg_OverlayCreateRsp* createscreen_;
    ::HaWC::RspMsg_OverlayUpdateRsp* updatesreen_;
  } response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ViewFeedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ViewFeedRsp) */ {
 public:
  RspMsg_ViewFeedRsp();
  virtual ~RspMsg_ViewFeedRsp();

  RspMsg_ViewFeedRsp(const RspMsg_ViewFeedRsp& from);

  inline RspMsg_ViewFeedRsp& operator=(const RspMsg_ViewFeedRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ViewFeedRsp(RspMsg_ViewFeedRsp&& from) noexcept
    : RspMsg_ViewFeedRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_ViewFeedRsp& operator=(RspMsg_ViewFeedRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ViewFeedRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ViewFeedRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ViewFeedRsp*>(
               &_RspMsg_ViewFeedRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(RspMsg_ViewFeedRsp* other);
  friend void swap(RspMsg_ViewFeedRsp& a, RspMsg_ViewFeedRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ViewFeedRsp* New() const final {
    return CreateMaybeMessage<RspMsg_ViewFeedRsp>(NULL);
  }

  RspMsg_ViewFeedRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ViewFeedRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ViewFeedRsp& from);
  void MergeFrom(const RspMsg_ViewFeedRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ViewFeedRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 viewPortID = 1;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 1;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // int32 feedID = 2;
  void clear_feedid();
  static const int kFeedIDFieldNumber = 2;
  ::google::protobuf::int32 feedid() const;
  void set_feedid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ViewFeedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 viewportid_;
  ::google::protobuf::int32 feedid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_ViewWindowRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.ViewWindowRsp) */ {
 public:
  RspMsg_ViewWindowRsp();
  virtual ~RspMsg_ViewWindowRsp();

  RspMsg_ViewWindowRsp(const RspMsg_ViewWindowRsp& from);

  inline RspMsg_ViewWindowRsp& operator=(const RspMsg_ViewWindowRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_ViewWindowRsp(RspMsg_ViewWindowRsp&& from) noexcept
    : RspMsg_ViewWindowRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_ViewWindowRsp& operator=(RspMsg_ViewWindowRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_ViewWindowRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_ViewWindowRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_ViewWindowRsp*>(
               &_RspMsg_ViewWindowRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(RspMsg_ViewWindowRsp* other);
  friend void swap(RspMsg_ViewWindowRsp& a, RspMsg_ViewWindowRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_ViewWindowRsp* New() const final {
    return CreateMaybeMessage<RspMsg_ViewWindowRsp>(NULL);
  }

  RspMsg_ViewWindowRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_ViewWindowRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_ViewWindowRsp& from);
  void MergeFrom(const RspMsg_ViewWindowRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_ViewWindowRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 viewPortID = 1;
  void clear_viewportid();
  static const int kViewPortIDFieldNumber = 1;
  ::google::protobuf::uint32 viewportid() const;
  void set_viewportid(::google::protobuf::uint32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // int32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // double alpha = 7;
  void clear_alpha();
  static const int kAlphaFieldNumber = 7;
  double alpha() const;
  void set_alpha(double value);

  // bool enableOverlay = 8;
  void clear_enableoverlay();
  static const int kEnableOverlayFieldNumber = 8;
  bool enableoverlay() const;
  void set_enableoverlay(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.ViewWindowRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 viewportid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  double alpha_;
  bool enableoverlay_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_DisplayCfgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.DisplayCfgRsp) */ {
 public:
  RspMsg_DisplayCfgRsp();
  virtual ~RspMsg_DisplayCfgRsp();

  RspMsg_DisplayCfgRsp(const RspMsg_DisplayCfgRsp& from);

  inline RspMsg_DisplayCfgRsp& operator=(const RspMsg_DisplayCfgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_DisplayCfgRsp(RspMsg_DisplayCfgRsp&& from) noexcept
    : RspMsg_DisplayCfgRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_DisplayCfgRsp& operator=(RspMsg_DisplayCfgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_DisplayCfgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_DisplayCfgRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_DisplayCfgRsp*>(
               &_RspMsg_DisplayCfgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(RspMsg_DisplayCfgRsp* other);
  friend void swap(RspMsg_DisplayCfgRsp& a, RspMsg_DisplayCfgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_DisplayCfgRsp* New() const final {
    return CreateMaybeMessage<RspMsg_DisplayCfgRsp>(NULL);
  }

  RspMsg_DisplayCfgRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_DisplayCfgRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_DisplayCfgRsp& from);
  void MergeFrom(const RspMsg_DisplayCfgRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_DisplayCfgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HaWC.RspMsg.FeedSourceRsp feedSrcs = 5;
  int feedsrcs_size() const;
  void clear_feedsrcs();
  static const int kFeedSrcsFieldNumber = 5;
  ::HaWC::RspMsg_FeedSourceRsp* mutable_feedsrcs(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_FeedSourceRsp >*
      mutable_feedsrcs();
  const ::HaWC::RspMsg_FeedSourceRsp& feedsrcs(int index) const;
  ::HaWC::RspMsg_FeedSourceRsp* add_feedsrcs();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_FeedSourceRsp >&
      feedsrcs() const;

  // repeated .HaWC.RspMsg.ViewFeedRsp viewFeeds = 9;
  int viewfeeds_size() const;
  void clear_viewfeeds();
  static const int kViewFeedsFieldNumber = 9;
  ::HaWC::RspMsg_ViewFeedRsp* mutable_viewfeeds(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewFeedRsp >*
      mutable_viewfeeds();
  const ::HaWC::RspMsg_ViewFeedRsp& viewfeeds(int index) const;
  ::HaWC::RspMsg_ViewFeedRsp* add_viewfeeds();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewFeedRsp >&
      viewfeeds() const;

  // repeated .HaWC.RspMsg.ViewWindowRsp viewWindows = 10;
  int viewwindows_size() const;
  void clear_viewwindows();
  static const int kViewWindowsFieldNumber = 10;
  ::HaWC::RspMsg_ViewWindowRsp* mutable_viewwindows(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewWindowRsp >*
      mutable_viewwindows();
  const ::HaWC::RspMsg_ViewWindowRsp& viewwindows(int index) const;
  ::HaWC::RspMsg_ViewWindowRsp* add_viewwindows();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewWindowRsp >&
      viewwindows() const;

  // repeated .HaWC.RspMsg.OverlayRsp viewOverlaysSet = 12;
  int viewoverlaysset_size() const;
  void clear_viewoverlaysset();
  static const int kViewOverlaysSetFieldNumber = 12;
  ::HaWC::RspMsg_OverlayRsp* mutable_viewoverlaysset(int index);
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_OverlayRsp >*
      mutable_viewoverlaysset();
  const ::HaWC::RspMsg_OverlayRsp& viewoverlaysset(int index) const;
  ::HaWC::RspMsg_OverlayRsp* add_viewoverlaysset();
  const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_OverlayRsp >&
      viewoverlaysset() const;

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // .HaWC.RspMsg.OverlayRsp mainOverlaySet = 7;
  bool has_mainoverlayset() const;
  void clear_mainoverlayset();
  static const int kMainOverlaySetFieldNumber = 7;
  private:
  const ::HaWC::RspMsg_OverlayRsp& _internal_mainoverlayset() const;
  public:
  const ::HaWC::RspMsg_OverlayRsp& mainoverlayset() const;
  ::HaWC::RspMsg_OverlayRsp* release_mainoverlayset();
  ::HaWC::RspMsg_OverlayRsp* mutable_mainoverlayset();
  void set_allocated_mainoverlayset(::HaWC::RspMsg_OverlayRsp* mainoverlayset);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.DisplayCfgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_FeedSourceRsp > feedsrcs_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewFeedRsp > viewfeeds_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewWindowRsp > viewwindows_;
  ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_OverlayRsp > viewoverlaysset_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  ::HaWC::RspMsg_OverlayRsp* mainoverlayset_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_SaveDisplayRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.SaveDisplayRsp) */ {
 public:
  RspMsg_SaveDisplayRsp();
  virtual ~RspMsg_SaveDisplayRsp();

  RspMsg_SaveDisplayRsp(const RspMsg_SaveDisplayRsp& from);

  inline RspMsg_SaveDisplayRsp& operator=(const RspMsg_SaveDisplayRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_SaveDisplayRsp(RspMsg_SaveDisplayRsp&& from) noexcept
    : RspMsg_SaveDisplayRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_SaveDisplayRsp& operator=(RspMsg_SaveDisplayRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_SaveDisplayRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_SaveDisplayRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_SaveDisplayRsp*>(
               &_RspMsg_SaveDisplayRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(RspMsg_SaveDisplayRsp* other);
  friend void swap(RspMsg_SaveDisplayRsp& a, RspMsg_SaveDisplayRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_SaveDisplayRsp* New() const final {
    return CreateMaybeMessage<RspMsg_SaveDisplayRsp>(NULL);
  }

  RspMsg_SaveDisplayRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_SaveDisplayRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_SaveDisplayRsp& from);
  void MergeFrom(const RspMsg_SaveDisplayRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_SaveDisplayRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.SaveDisplayRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_LoadDisplayRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.LoadDisplayRsp) */ {
 public:
  RspMsg_LoadDisplayRsp();
  virtual ~RspMsg_LoadDisplayRsp();

  RspMsg_LoadDisplayRsp(const RspMsg_LoadDisplayRsp& from);

  inline RspMsg_LoadDisplayRsp& operator=(const RspMsg_LoadDisplayRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_LoadDisplayRsp(RspMsg_LoadDisplayRsp&& from) noexcept
    : RspMsg_LoadDisplayRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_LoadDisplayRsp& operator=(RspMsg_LoadDisplayRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_LoadDisplayRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_LoadDisplayRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_LoadDisplayRsp*>(
               &_RspMsg_LoadDisplayRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(RspMsg_LoadDisplayRsp* other);
  friend void swap(RspMsg_LoadDisplayRsp& a, RspMsg_LoadDisplayRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_LoadDisplayRsp* New() const final {
    return CreateMaybeMessage<RspMsg_LoadDisplayRsp>(NULL);
  }

  RspMsg_LoadDisplayRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_LoadDisplayRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_LoadDisplayRsp& from);
  void MergeFrom(const RspMsg_LoadDisplayRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_LoadDisplayRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.LoadDisplayRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_LoadFontsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.LoadFontsRsp) */ {
 public:
  RspMsg_LoadFontsRsp();
  virtual ~RspMsg_LoadFontsRsp();

  RspMsg_LoadFontsRsp(const RspMsg_LoadFontsRsp& from);

  inline RspMsg_LoadFontsRsp& operator=(const RspMsg_LoadFontsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_LoadFontsRsp(RspMsg_LoadFontsRsp&& from) noexcept
    : RspMsg_LoadFontsRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_LoadFontsRsp& operator=(RspMsg_LoadFontsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_LoadFontsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_LoadFontsRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_LoadFontsRsp*>(
               &_RspMsg_LoadFontsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(RspMsg_LoadFontsRsp* other);
  friend void swap(RspMsg_LoadFontsRsp& a, RspMsg_LoadFontsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_LoadFontsRsp* New() const final {
    return CreateMaybeMessage<RspMsg_LoadFontsRsp>(NULL);
  }

  RspMsg_LoadFontsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_LoadFontsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_LoadFontsRsp& from);
  void MergeFrom(const RspMsg_LoadFontsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_LoadFontsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fontFiles = 4;
  int fontfiles_size() const;
  void clear_fontfiles();
  static const int kFontFilesFieldNumber = 4;
  const ::std::string& fontfiles(int index) const;
  ::std::string* mutable_fontfiles(int index);
  void set_fontfiles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fontfiles(int index, ::std::string&& value);
  #endif
  void set_fontfiles(int index, const char* value);
  void set_fontfiles(int index, const char* value, size_t size);
  ::std::string* add_fontfiles();
  void add_fontfiles(const ::std::string& value);
  #if LANG_CXX11
  void add_fontfiles(::std::string&& value);
  #endif
  void add_fontfiles(const char* value);
  void add_fontfiles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fontfiles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fontfiles();

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.LoadFontsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fontfiles_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_SaveOverlayToFileRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.SaveOverlayToFileRsp) */ {
 public:
  RspMsg_SaveOverlayToFileRsp();
  virtual ~RspMsg_SaveOverlayToFileRsp();

  RspMsg_SaveOverlayToFileRsp(const RspMsg_SaveOverlayToFileRsp& from);

  inline RspMsg_SaveOverlayToFileRsp& operator=(const RspMsg_SaveOverlayToFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_SaveOverlayToFileRsp(RspMsg_SaveOverlayToFileRsp&& from) noexcept
    : RspMsg_SaveOverlayToFileRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_SaveOverlayToFileRsp& operator=(RspMsg_SaveOverlayToFileRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_SaveOverlayToFileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_SaveOverlayToFileRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_SaveOverlayToFileRsp*>(
               &_RspMsg_SaveOverlayToFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(RspMsg_SaveOverlayToFileRsp* other);
  friend void swap(RspMsg_SaveOverlayToFileRsp& a, RspMsg_SaveOverlayToFileRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_SaveOverlayToFileRsp* New() const final {
    return CreateMaybeMessage<RspMsg_SaveOverlayToFileRsp>(NULL);
  }

  RspMsg_SaveOverlayToFileRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_SaveOverlayToFileRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_SaveOverlayToFileRsp& from);
  void MergeFrom(const RspMsg_SaveOverlayToFileRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_SaveOverlayToFileRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.SaveOverlayToFileRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_LoadOverlayFromFileRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.LoadOverlayFromFileRsp) */ {
 public:
  RspMsg_LoadOverlayFromFileRsp();
  virtual ~RspMsg_LoadOverlayFromFileRsp();

  RspMsg_LoadOverlayFromFileRsp(const RspMsg_LoadOverlayFromFileRsp& from);

  inline RspMsg_LoadOverlayFromFileRsp& operator=(const RspMsg_LoadOverlayFromFileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_LoadOverlayFromFileRsp(RspMsg_LoadOverlayFromFileRsp&& from) noexcept
    : RspMsg_LoadOverlayFromFileRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_LoadOverlayFromFileRsp& operator=(RspMsg_LoadOverlayFromFileRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_LoadOverlayFromFileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_LoadOverlayFromFileRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_LoadOverlayFromFileRsp*>(
               &_RspMsg_LoadOverlayFromFileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(RspMsg_LoadOverlayFromFileRsp* other);
  friend void swap(RspMsg_LoadOverlayFromFileRsp& a, RspMsg_LoadOverlayFromFileRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_LoadOverlayFromFileRsp* New() const final {
    return CreateMaybeMessage<RspMsg_LoadOverlayFromFileRsp>(NULL);
  }

  RspMsg_LoadOverlayFromFileRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_LoadOverlayFromFileRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_LoadOverlayFromFileRsp& from);
  void MergeFrom(const RspMsg_LoadOverlayFromFileRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_LoadOverlayFromFileRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errStr = 2;
  void clear_errstr();
  static const int kErrStrFieldNumber = 2;
  const ::std::string& errstr() const;
  void set_errstr(const ::std::string& value);
  #if LANG_CXX11
  void set_errstr(::std::string&& value);
  #endif
  void set_errstr(const char* value);
  void set_errstr(const char* value, size_t size);
  ::std::string* mutable_errstr();
  ::std::string* release_errstr();
  void set_allocated_errstr(::std::string* errstr);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.LoadOverlayFromFileRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errstr_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_QosBcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.QosBcast) */ {
 public:
  RspMsg_QosBcast();
  virtual ~RspMsg_QosBcast();

  RspMsg_QosBcast(const RspMsg_QosBcast& from);

  inline RspMsg_QosBcast& operator=(const RspMsg_QosBcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_QosBcast(RspMsg_QosBcast&& from) noexcept
    : RspMsg_QosBcast() {
    *this = ::std::move(from);
  }

  inline RspMsg_QosBcast& operator=(RspMsg_QosBcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_QosBcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_QosBcast* internal_default_instance() {
    return reinterpret_cast<const RspMsg_QosBcast*>(
               &_RspMsg_QosBcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(RspMsg_QosBcast* other);
  friend void swap(RspMsg_QosBcast& a, RspMsg_QosBcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_QosBcast* New() const final {
    return CreateMaybeMessage<RspMsg_QosBcast>(NULL);
  }

  RspMsg_QosBcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_QosBcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_QosBcast& from);
  void MergeFrom(const RspMsg_QosBcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_QosBcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string feedName = 1;
  void clear_feedname();
  static const int kFeedNameFieldNumber = 1;
  const ::std::string& feedname() const;
  void set_feedname(const ::std::string& value);
  #if LANG_CXX11
  void set_feedname(::std::string&& value);
  #endif
  void set_feedname(const char* value);
  void set_feedname(const char* value, size_t size);
  ::std::string* mutable_feedname();
  ::std::string* release_feedname();
  void set_allocated_feedname(::std::string* feedname);

  // string sourceStr = 3;
  void clear_sourcestr();
  static const int kSourceStrFieldNumber = 3;
  const ::std::string& sourcestr() const;
  void set_sourcestr(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcestr(::std::string&& value);
  #endif
  void set_sourcestr(const char* value);
  void set_sourcestr(const char* value, size_t size);
  ::std::string* mutable_sourcestr();
  ::std::string* release_sourcestr();
  void set_allocated_sourcestr(::std::string* sourcestr);

  // .HaWC.FeedType feedType = 2;
  void clear_feedtype();
  static const int kFeedTypeFieldNumber = 2;
  ::HaWC::FeedType feedtype() const;
  void set_feedtype(::HaWC::FeedType value);

  // .HaWC.QosStates qosState = 4;
  void clear_qosstate();
  static const int kQosStateFieldNumber = 4;
  ::HaWC::QosStates qosstate() const;
  void set_qosstate(::HaWC::QosStates value);

  // bool repeat = 5;
  void clear_repeat();
  static const int kRepeatFieldNumber = 5;
  bool repeat() const;
  void set_repeat(bool value);

  // int32 timeSinceFrame = 6;
  void clear_timesinceframe();
  static const int kTimeSinceFrameFieldNumber = 6;
  ::google::protobuf::int32 timesinceframe() const;
  void set_timesinceframe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.QosBcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr feedname_;
  ::google::protobuf::internal::ArenaStringPtr sourcestr_;
  int feedtype_;
  int qosstate_;
  bool repeat_;
  ::google::protobuf::int32 timesinceframe_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_DisplayRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.DisplayRsp) */ {
 public:
  RspMsg_DisplayRsp();
  virtual ~RspMsg_DisplayRsp();

  RspMsg_DisplayRsp(const RspMsg_DisplayRsp& from);

  inline RspMsg_DisplayRsp& operator=(const RspMsg_DisplayRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_DisplayRsp(RspMsg_DisplayRsp&& from) noexcept
    : RspMsg_DisplayRsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_DisplayRsp& operator=(RspMsg_DisplayRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_DisplayRsp& default_instance();

  enum ResponseCase {
    kDisplayCfgRsp = 1,
    kSaveDisplayRsp = 5,
    kLoadDisplayRsp = 7,
    kLoadFontsRsp = 10,
    kSaveOverlayToFileRsp = 15,
    kLoadOverlayFromFileRsp = 16,
    kQosBcast = 20,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_DisplayRsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_DisplayRsp*>(
               &_RspMsg_DisplayRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(RspMsg_DisplayRsp* other);
  friend void swap(RspMsg_DisplayRsp& a, RspMsg_DisplayRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_DisplayRsp* New() const final {
    return CreateMaybeMessage<RspMsg_DisplayRsp>(NULL);
  }

  RspMsg_DisplayRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_DisplayRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_DisplayRsp& from);
  void MergeFrom(const RspMsg_DisplayRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_DisplayRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HaWC.RspMsg.DisplayCfgRsp displayCfgRsp = 1;
  bool has_displaycfgrsp() const;
  void clear_displaycfgrsp();
  static const int kDisplayCfgRspFieldNumber = 1;
  private:
  const ::HaWC::RspMsg_DisplayCfgRsp& _internal_displaycfgrsp() const;
  public:
  const ::HaWC::RspMsg_DisplayCfgRsp& displaycfgrsp() const;
  ::HaWC::RspMsg_DisplayCfgRsp* release_displaycfgrsp();
  ::HaWC::RspMsg_DisplayCfgRsp* mutable_displaycfgrsp();
  void set_allocated_displaycfgrsp(::HaWC::RspMsg_DisplayCfgRsp* displaycfgrsp);

  // .HaWC.RspMsg.SaveDisplayRsp saveDisplayRsp = 5;
  bool has_savedisplayrsp() const;
  void clear_savedisplayrsp();
  static const int kSaveDisplayRspFieldNumber = 5;
  private:
  const ::HaWC::RspMsg_SaveDisplayRsp& _internal_savedisplayrsp() const;
  public:
  const ::HaWC::RspMsg_SaveDisplayRsp& savedisplayrsp() const;
  ::HaWC::RspMsg_SaveDisplayRsp* release_savedisplayrsp();
  ::HaWC::RspMsg_SaveDisplayRsp* mutable_savedisplayrsp();
  void set_allocated_savedisplayrsp(::HaWC::RspMsg_SaveDisplayRsp* savedisplayrsp);

  // .HaWC.RspMsg.LoadDisplayRsp loadDisplayRsp = 7;
  bool has_loaddisplayrsp() const;
  void clear_loaddisplayrsp();
  static const int kLoadDisplayRspFieldNumber = 7;
  private:
  const ::HaWC::RspMsg_LoadDisplayRsp& _internal_loaddisplayrsp() const;
  public:
  const ::HaWC::RspMsg_LoadDisplayRsp& loaddisplayrsp() const;
  ::HaWC::RspMsg_LoadDisplayRsp* release_loaddisplayrsp();
  ::HaWC::RspMsg_LoadDisplayRsp* mutable_loaddisplayrsp();
  void set_allocated_loaddisplayrsp(::HaWC::RspMsg_LoadDisplayRsp* loaddisplayrsp);

  // .HaWC.RspMsg.LoadFontsRsp loadFontsRsp = 10;
  bool has_loadfontsrsp() const;
  void clear_loadfontsrsp();
  static const int kLoadFontsRspFieldNumber = 10;
  private:
  const ::HaWC::RspMsg_LoadFontsRsp& _internal_loadfontsrsp() const;
  public:
  const ::HaWC::RspMsg_LoadFontsRsp& loadfontsrsp() const;
  ::HaWC::RspMsg_LoadFontsRsp* release_loadfontsrsp();
  ::HaWC::RspMsg_LoadFontsRsp* mutable_loadfontsrsp();
  void set_allocated_loadfontsrsp(::HaWC::RspMsg_LoadFontsRsp* loadfontsrsp);

  // .HaWC.RspMsg.SaveOverlayToFileRsp saveOverlayToFileRsp = 15;
  bool has_saveoverlaytofilersp() const;
  void clear_saveoverlaytofilersp();
  static const int kSaveOverlayToFileRspFieldNumber = 15;
  private:
  const ::HaWC::RspMsg_SaveOverlayToFileRsp& _internal_saveoverlaytofilersp() const;
  public:
  const ::HaWC::RspMsg_SaveOverlayToFileRsp& saveoverlaytofilersp() const;
  ::HaWC::RspMsg_SaveOverlayToFileRsp* release_saveoverlaytofilersp();
  ::HaWC::RspMsg_SaveOverlayToFileRsp* mutable_saveoverlaytofilersp();
  void set_allocated_saveoverlaytofilersp(::HaWC::RspMsg_SaveOverlayToFileRsp* saveoverlaytofilersp);

  // .HaWC.RspMsg.LoadOverlayFromFileRsp loadOverlayFromFileRsp = 16;
  bool has_loadoverlayfromfilersp() const;
  void clear_loadoverlayfromfilersp();
  static const int kLoadOverlayFromFileRspFieldNumber = 16;
  private:
  const ::HaWC::RspMsg_LoadOverlayFromFileRsp& _internal_loadoverlayfromfilersp() const;
  public:
  const ::HaWC::RspMsg_LoadOverlayFromFileRsp& loadoverlayfromfilersp() const;
  ::HaWC::RspMsg_LoadOverlayFromFileRsp* release_loadoverlayfromfilersp();
  ::HaWC::RspMsg_LoadOverlayFromFileRsp* mutable_loadoverlayfromfilersp();
  void set_allocated_loadoverlayfromfilersp(::HaWC::RspMsg_LoadOverlayFromFileRsp* loadoverlayfromfilersp);

  // .HaWC.RspMsg.QosBcast qosBcast = 20;
  bool has_qosbcast() const;
  void clear_qosbcast();
  static const int kQosBcastFieldNumber = 20;
  private:
  const ::HaWC::RspMsg_QosBcast& _internal_qosbcast() const;
  public:
  const ::HaWC::RspMsg_QosBcast& qosbcast() const;
  ::HaWC::RspMsg_QosBcast* release_qosbcast();
  ::HaWC::RspMsg_QosBcast* mutable_qosbcast();
  void set_allocated_qosbcast(::HaWC::RspMsg_QosBcast* qosbcast);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.DisplayRsp)
 private:
  void set_has_displaycfgrsp();
  void set_has_savedisplayrsp();
  void set_has_loaddisplayrsp();
  void set_has_loadfontsrsp();
  void set_has_saveoverlaytofilersp();
  void set_has_loadoverlayfromfilersp();
  void set_has_qosbcast();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResponseUnion {
    ResponseUnion() {}
    ::HaWC::RspMsg_DisplayCfgRsp* displaycfgrsp_;
    ::HaWC::RspMsg_SaveDisplayRsp* savedisplayrsp_;
    ::HaWC::RspMsg_LoadDisplayRsp* loaddisplayrsp_;
    ::HaWC::RspMsg_LoadFontsRsp* loadfontsrsp_;
    ::HaWC::RspMsg_SaveOverlayToFileRsp* saveoverlaytofilersp_;
    ::HaWC::RspMsg_LoadOverlayFromFileRsp* loadoverlayfromfilersp_;
    ::HaWC::RspMsg_QosBcast* qosbcast_;
  } response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_IO_Bcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.IO_Bcast) */ {
 public:
  RspMsg_IO_Bcast();
  virtual ~RspMsg_IO_Bcast();

  RspMsg_IO_Bcast(const RspMsg_IO_Bcast& from);

  inline RspMsg_IO_Bcast& operator=(const RspMsg_IO_Bcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_IO_Bcast(RspMsg_IO_Bcast&& from) noexcept
    : RspMsg_IO_Bcast() {
    *this = ::std::move(from);
  }

  inline RspMsg_IO_Bcast& operator=(RspMsg_IO_Bcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_IO_Bcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_IO_Bcast* internal_default_instance() {
    return reinterpret_cast<const RspMsg_IO_Bcast*>(
               &_RspMsg_IO_Bcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(RspMsg_IO_Bcast* other);
  friend void swap(RspMsg_IO_Bcast& a, RspMsg_IO_Bcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_IO_Bcast* New() const final {
    return CreateMaybeMessage<RspMsg_IO_Bcast>(NULL);
  }

  RspMsg_IO_Bcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_IO_Bcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_IO_Bcast& from);
  void MergeFrom(const RspMsg_IO_Bcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_IO_Bcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool newData = 1;
  void clear_newdata();
  static const int kNewDataFieldNumber = 1;
  bool newdata() const;
  void set_newdata(bool value);

  // uint32 sessionID = 2;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 2;
  ::google::protobuf::uint32 sessionid() const;
  void set_sessionid(::google::protobuf::uint32 value);

  // uint32 btns = 5;
  void clear_btns();
  static const int kBtnsFieldNumber = 5;
  ::google::protobuf::uint32 btns() const;
  void set_btns(::google::protobuf::uint32 value);

  // sint32 leftRocker = 6;
  void clear_leftrocker();
  static const int kLeftRockerFieldNumber = 6;
  ::google::protobuf::int32 leftrocker() const;
  void set_leftrocker(::google::protobuf::int32 value);

  // sint32 leftX = 7;
  void clear_leftx();
  static const int kLeftXFieldNumber = 7;
  ::google::protobuf::int32 leftx() const;
  void set_leftx(::google::protobuf::int32 value);

  // sint32 leftY = 8;
  void clear_lefty();
  static const int kLeftYFieldNumber = 8;
  ::google::protobuf::int32 lefty() const;
  void set_lefty(::google::protobuf::int32 value);

  // sint32 rightRocker = 9;
  void clear_rightrocker();
  static const int kRightRockerFieldNumber = 9;
  ::google::protobuf::int32 rightrocker() const;
  void set_rightrocker(::google::protobuf::int32 value);

  // sint32 rightX = 10;
  void clear_rightx();
  static const int kRightXFieldNumber = 10;
  ::google::protobuf::int32 rightx() const;
  void set_rightx(::google::protobuf::int32 value);

  // sint32 rightY = 11;
  void clear_righty();
  static const int kRightYFieldNumber = 11;
  ::google::protobuf::int32 righty() const;
  void set_righty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.IO_Bcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool newdata_;
  ::google::protobuf::uint32 sessionid_;
  ::google::protobuf::uint32 btns_;
  ::google::protobuf::int32 leftrocker_;
  ::google::protobuf::int32 leftx_;
  ::google::protobuf::int32 lefty_;
  ::google::protobuf::int32 rightrocker_;
  ::google::protobuf::int32 rightx_;
  ::google::protobuf::int32 righty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg_IO_Rsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg.IO_Rsp) */ {
 public:
  RspMsg_IO_Rsp();
  virtual ~RspMsg_IO_Rsp();

  RspMsg_IO_Rsp(const RspMsg_IO_Rsp& from);

  inline RspMsg_IO_Rsp& operator=(const RspMsg_IO_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg_IO_Rsp(RspMsg_IO_Rsp&& from) noexcept
    : RspMsg_IO_Rsp() {
    *this = ::std::move(from);
  }

  inline RspMsg_IO_Rsp& operator=(RspMsg_IO_Rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg_IO_Rsp& default_instance();

  enum ResponseCase {
    kIoBcast = 25,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg_IO_Rsp* internal_default_instance() {
    return reinterpret_cast<const RspMsg_IO_Rsp*>(
               &_RspMsg_IO_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(RspMsg_IO_Rsp* other);
  friend void swap(RspMsg_IO_Rsp& a, RspMsg_IO_Rsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg_IO_Rsp* New() const final {
    return CreateMaybeMessage<RspMsg_IO_Rsp>(NULL);
  }

  RspMsg_IO_Rsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg_IO_Rsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg_IO_Rsp& from);
  void MergeFrom(const RspMsg_IO_Rsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg_IO_Rsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HaWC.RspMsg.IO_Bcast ioBcast = 25;
  bool has_iobcast() const;
  void clear_iobcast();
  static const int kIoBcastFieldNumber = 25;
  private:
  const ::HaWC::RspMsg_IO_Bcast& _internal_iobcast() const;
  public:
  const ::HaWC::RspMsg_IO_Bcast& iobcast() const;
  ::HaWC::RspMsg_IO_Bcast* release_iobcast();
  ::HaWC::RspMsg_IO_Bcast* mutable_iobcast();
  void set_allocated_iobcast(::HaWC::RspMsg_IO_Bcast* iobcast);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.RspMsg.IO_Rsp)
 private:
  void set_has_iobcast();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResponseUnion {
    ResponseUnion() {}
    ::HaWC::RspMsg_IO_Bcast* iobcast_;
  } response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RspMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HaWC.RspMsg) */ {
 public:
  RspMsg();
  virtual ~RspMsg();

  RspMsg(const RspMsg& from);

  inline RspMsg& operator=(const RspMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspMsg(RspMsg&& from) noexcept
    : RspMsg() {
    *this = ::std::move(from);
  }

  inline RspMsg& operator=(RspMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RspMsg& default_instance();

  enum ResponseCase {
    kAppRsp = 4,
    kDisplayRsp = 5,
    kIoRsp = 6,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspMsg* internal_default_instance() {
    return reinterpret_cast<const RspMsg*>(
               &_RspMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(RspMsg* other);
  friend void swap(RspMsg& a, RspMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspMsg* New() const final {
    return CreateMaybeMessage<RspMsg>(NULL);
  }

  RspMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspMsg& from);
  void MergeFrom(const RspMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RspMsg_ResetEvt ResetEvt;
  typedef RspMsg_SaveConfigRsp SaveConfigRsp;
  typedef RspMsg_LoadConfigRsp LoadConfigRsp;
  typedef RspMsg_ParamDetails ParamDetails;
  typedef RspMsg_ParamsRsp ParamsRsp;
  typedef RspMsg_ParamCfgn ParamCfgn;
  typedef RspMsg_ParamsCfgnRsp ParamsCfgnRsp;
  typedef RspMsg_FileHashRsp FileHashRsp;
  typedef RspMsg_AppManagerRsp AppManagerRsp;
  typedef RspMsg_FeedSourceRsp FeedSourceRsp;
  typedef RspMsg_OverlayCreateRsp OverlayCreateRsp;
  typedef RspMsg_OverlayUpdateRsp OverlayUpdateRsp;
  typedef RspMsg_OverlayRsp OverlayRsp;
  typedef RspMsg_ViewFeedRsp ViewFeedRsp;
  typedef RspMsg_ViewWindowRsp ViewWindowRsp;
  typedef RspMsg_DisplayCfgRsp DisplayCfgRsp;
  typedef RspMsg_SaveDisplayRsp SaveDisplayRsp;
  typedef RspMsg_LoadDisplayRsp LoadDisplayRsp;
  typedef RspMsg_LoadFontsRsp LoadFontsRsp;
  typedef RspMsg_SaveOverlayToFileRsp SaveOverlayToFileRsp;
  typedef RspMsg_LoadOverlayFromFileRsp LoadOverlayFromFileRsp;
  typedef RspMsg_QosBcast QosBcast;
  typedef RspMsg_DisplayRsp DisplayRsp;
  typedef RspMsg_IO_Bcast IO_Bcast;
  typedef RspMsg_IO_Rsp IO_Rsp;

  typedef RspMsg_DataTypes DataTypes;
  static const DataTypes Bytes =
    RspMsg_DataTypes_Bytes;
  static const DataTypes Bools =
    RspMsg_DataTypes_Bools;
  static const DataTypes UInts =
    RspMsg_DataTypes_UInts;
  static const DataTypes Ints =
    RspMsg_DataTypes_Ints;
  static const DataTypes Doubles =
    RspMsg_DataTypes_Doubles;
  static const DataTypes String =
    RspMsg_DataTypes_String;
  static const DataTypes Unknown =
    RspMsg_DataTypes_Unknown;
  static inline bool DataTypes_IsValid(int value) {
    return RspMsg_DataTypes_IsValid(value);
  }
  static const DataTypes DataTypes_MIN =
    RspMsg_DataTypes_DataTypes_MIN;
  static const DataTypes DataTypes_MAX =
    RspMsg_DataTypes_DataTypes_MAX;
  static const int DataTypes_ARRAYSIZE =
    RspMsg_DataTypes_DataTypes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataTypes_descriptor() {
    return RspMsg_DataTypes_descriptor();
  }
  static inline const ::std::string& DataTypes_Name(DataTypes value) {
    return RspMsg_DataTypes_Name(value);
  }
  static inline bool DataTypes_Parse(const ::std::string& name,
      DataTypes* value) {
    return RspMsg_DataTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 seqNum = 1;
  void clear_seqnum();
  static const int kSeqNumFieldNumber = 1;
  ::google::protobuf::int32 seqnum() const;
  void set_seqnum(::google::protobuf::int32 value);

  // .HaWC.RspMsg.AppManagerRsp appRsp = 4;
  bool has_apprsp() const;
  void clear_apprsp();
  static const int kAppRspFieldNumber = 4;
  private:
  const ::HaWC::RspMsg_AppManagerRsp& _internal_apprsp() const;
  public:
  const ::HaWC::RspMsg_AppManagerRsp& apprsp() const;
  ::HaWC::RspMsg_AppManagerRsp* release_apprsp();
  ::HaWC::RspMsg_AppManagerRsp* mutable_apprsp();
  void set_allocated_apprsp(::HaWC::RspMsg_AppManagerRsp* apprsp);

  // .HaWC.RspMsg.DisplayRsp displayRsp = 5;
  bool has_displayrsp() const;
  void clear_displayrsp();
  static const int kDisplayRspFieldNumber = 5;
  private:
  const ::HaWC::RspMsg_DisplayRsp& _internal_displayrsp() const;
  public:
  const ::HaWC::RspMsg_DisplayRsp& displayrsp() const;
  ::HaWC::RspMsg_DisplayRsp* release_displayrsp();
  ::HaWC::RspMsg_DisplayRsp* mutable_displayrsp();
  void set_allocated_displayrsp(::HaWC::RspMsg_DisplayRsp* displayrsp);

  // .HaWC.RspMsg.IO_Rsp ioRsp = 6;
  bool has_iorsp() const;
  void clear_iorsp();
  static const int kIoRspFieldNumber = 6;
  private:
  const ::HaWC::RspMsg_IO_Rsp& _internal_iorsp() const;
  public:
  const ::HaWC::RspMsg_IO_Rsp& iorsp() const;
  ::HaWC::RspMsg_IO_Rsp* release_iorsp();
  ::HaWC::RspMsg_IO_Rsp* mutable_iorsp();
  void set_allocated_iorsp(::HaWC::RspMsg_IO_Rsp* iorsp);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:HaWC.RspMsg)
 private:
  void set_has_apprsp();
  void set_has_displayrsp();
  void set_has_iorsp();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 seqnum_;
  union ResponseUnion {
    ResponseUnion() {}
    ::HaWC::RspMsg_AppManagerRsp* apprsp_;
    ::HaWC::RspMsg_DisplayRsp* displayrsp_;
    ::HaWC::RspMsg_IO_Rsp* iorsp_;
  } response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_HaWC_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CmdMsg_CloseCmd

// .HaWC.CmdMsg.CloseAction closeOption = 1;
inline void CmdMsg_CloseCmd::clear_closeoption() {
  closeoption_ = 0;
}
inline ::HaWC::CmdMsg_CloseAction CmdMsg_CloseCmd::closeoption() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CloseCmd.closeOption)
  return static_cast< ::HaWC::CmdMsg_CloseAction >(closeoption_);
}
inline void CmdMsg_CloseCmd::set_closeoption(::HaWC::CmdMsg_CloseAction value) {
  
  closeoption_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CloseCmd.closeOption)
}

// -------------------------------------------------------------------

// CmdMsg_SaveDefaultConfigCmd

// bool reportErrStr = 1;
inline void CmdMsg_SaveDefaultConfigCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SaveDefaultConfigCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveDefaultConfigCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SaveDefaultConfigCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveDefaultConfigCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_SaveConfigToFileCmd

// string fileName = 1;
inline void CmdMsg_SaveConfigToFileCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_SaveConfigToFileCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
  return filename_.GetNoArena();
}
inline void CmdMsg_SaveConfigToFileCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
}
#if LANG_CXX11
inline void CmdMsg_SaveConfigToFileCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
}
#endif
inline void CmdMsg_SaveConfigToFileCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
}
inline void CmdMsg_SaveConfigToFileCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
}
inline ::std::string* CmdMsg_SaveConfigToFileCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_SaveConfigToFileCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_SaveConfigToFileCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.SaveConfigToFileCmd.fileName)
}

// bool reportErrStr = 2;
inline void CmdMsg_SaveConfigToFileCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SaveConfigToFileCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveConfigToFileCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SaveConfigToFileCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveConfigToFileCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_LoadConfigFromFileCmd

// string fileName = 1;
inline void CmdMsg_LoadConfigFromFileCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_LoadConfigFromFileCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
  return filename_.GetNoArena();
}
inline void CmdMsg_LoadConfigFromFileCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
}
#if LANG_CXX11
inline void CmdMsg_LoadConfigFromFileCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
}
#endif
inline void CmdMsg_LoadConfigFromFileCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
}
inline void CmdMsg_LoadConfigFromFileCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
}
inline ::std::string* CmdMsg_LoadConfigFromFileCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LoadConfigFromFileCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_LoadConfigFromFileCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LoadConfigFromFileCmd.fileName)
}

// bool reportErrStr = 2;
inline void CmdMsg_LoadConfigFromFileCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_LoadConfigFromFileCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadConfigFromFileCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_LoadConfigFromFileCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadConfigFromFileCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_RestoreFactoryConfigCmd

// -------------------------------------------------------------------

// CmdMsg_ParamSet

// string paramID = 1;
inline void CmdMsg_ParamSet::clear_paramid() {
  paramid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_ParamSet::paramid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.paramID)
  return paramid_.GetNoArena();
}
inline void CmdMsg_ParamSet::set_paramid(const ::std::string& value) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.paramID)
}
#if LANG_CXX11
inline void CmdMsg_ParamSet::set_paramid(::std::string&& value) {
  
  paramid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ParamSet.paramID)
}
#endif
inline void CmdMsg_ParamSet::set_paramid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ParamSet.paramID)
}
inline void CmdMsg_ParamSet::set_paramid(const char* value, size_t size) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ParamSet.paramID)
}
inline ::std::string* CmdMsg_ParamSet::mutable_paramid() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ParamSet.paramID)
  return paramid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ParamSet::release_paramid() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ParamSet.paramID)
  
  return paramid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_ParamSet::set_allocated_paramid(::std::string* paramid) {
  if (paramid != NULL) {
    
  } else {
    
  }
  paramid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramid);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ParamSet.paramID)
}

// uint32 offset = 2;
inline void CmdMsg_ParamSet::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_ParamSet::offset() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.offset)
  return offset_;
}
inline void CmdMsg_ParamSet::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.offset)
}

// bool boolVal = 10;
inline bool CmdMsg_ParamSet::has_boolval() const {
  return Data_case() == kBoolVal;
}
inline void CmdMsg_ParamSet::set_has_boolval() {
  _oneof_case_[0] = kBoolVal;
}
inline void CmdMsg_ParamSet::clear_boolval() {
  if (has_boolval()) {
    Data_.boolval_ = false;
    clear_has_Data();
  }
}
inline bool CmdMsg_ParamSet::boolval() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.boolVal)
  if (has_boolval()) {
    return Data_.boolval_;
  }
  return false;
}
inline void CmdMsg_ParamSet::set_boolval(bool value) {
  if (!has_boolval()) {
    clear_Data();
    set_has_boolval();
  }
  Data_.boolval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.boolVal)
}

// uint32 uintVal = 11;
inline bool CmdMsg_ParamSet::has_uintval() const {
  return Data_case() == kUintVal;
}
inline void CmdMsg_ParamSet::set_has_uintval() {
  _oneof_case_[0] = kUintVal;
}
inline void CmdMsg_ParamSet::clear_uintval() {
  if (has_uintval()) {
    Data_.uintval_ = 0u;
    clear_has_Data();
  }
}
inline ::google::protobuf::uint32 CmdMsg_ParamSet::uintval() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.uintVal)
  if (has_uintval()) {
    return Data_.uintval_;
  }
  return 0u;
}
inline void CmdMsg_ParamSet::set_uintval(::google::protobuf::uint32 value) {
  if (!has_uintval()) {
    clear_Data();
    set_has_uintval();
  }
  Data_.uintval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.uintVal)
}

// sint32 intVal = 12;
inline bool CmdMsg_ParamSet::has_intval() const {
  return Data_case() == kIntVal;
}
inline void CmdMsg_ParamSet::set_has_intval() {
  _oneof_case_[0] = kIntVal;
}
inline void CmdMsg_ParamSet::clear_intval() {
  if (has_intval()) {
    Data_.intval_ = 0;
    clear_has_Data();
  }
}
inline ::google::protobuf::int32 CmdMsg_ParamSet::intval() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.intVal)
  if (has_intval()) {
    return Data_.intval_;
  }
  return 0;
}
inline void CmdMsg_ParamSet::set_intval(::google::protobuf::int32 value) {
  if (!has_intval()) {
    clear_Data();
    set_has_intval();
  }
  Data_.intval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.intVal)
}

// double doubleVal = 13;
inline bool CmdMsg_ParamSet::has_doubleval() const {
  return Data_case() == kDoubleVal;
}
inline void CmdMsg_ParamSet::set_has_doubleval() {
  _oneof_case_[0] = kDoubleVal;
}
inline void CmdMsg_ParamSet::clear_doubleval() {
  if (has_doubleval()) {
    Data_.doubleval_ = 0;
    clear_has_Data();
  }
}
inline double CmdMsg_ParamSet::doubleval() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.doubleVal)
  if (has_doubleval()) {
    return Data_.doubleval_;
  }
  return 0;
}
inline void CmdMsg_ParamSet::set_doubleval(double value) {
  if (!has_doubleval()) {
    clear_Data();
    set_has_doubleval();
  }
  Data_.doubleval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.doubleVal)
}

// string strVal = 14;
inline bool CmdMsg_ParamSet::has_strval() const {
  return Data_case() == kStrVal;
}
inline void CmdMsg_ParamSet::set_has_strval() {
  _oneof_case_[0] = kStrVal;
}
inline void CmdMsg_ParamSet::clear_strval() {
  if (has_strval()) {
    Data_.strval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Data();
  }
}
inline const ::std::string& CmdMsg_ParamSet::strval() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.strVal)
  if (has_strval()) {
    return Data_.strval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ParamSet::set_strval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.strVal)
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.strVal)
}
#if LANG_CXX11
inline void CmdMsg_ParamSet::set_strval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.strVal)
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ParamSet.strVal)
}
#endif
inline void CmdMsg_ParamSet::set_strval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ParamSet.strVal)
}
inline void CmdMsg_ParamSet::set_strval(const char* value, size_t size) {
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ParamSet.strVal)
}
inline ::std::string* CmdMsg_ParamSet::mutable_strval() {
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ParamSet.strVal)
  return Data_.strval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ParamSet::release_strval() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ParamSet.strVal)
  if (has_strval()) {
    clear_has_Data();
    return Data_.strval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ParamSet::set_allocated_strval(::std::string* strval) {
  if (!has_strval()) {
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Data();
  if (strval != NULL) {
    set_has_strval();
    Data_.strval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strval);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ParamSet.strVal)
}

// uint32 dataBytes = 15;
inline bool CmdMsg_ParamSet::has_databytes() const {
  return Data_case() == kDataBytes;
}
inline void CmdMsg_ParamSet::set_has_databytes() {
  _oneof_case_[0] = kDataBytes;
}
inline void CmdMsg_ParamSet::clear_databytes() {
  if (has_databytes()) {
    Data_.databytes_ = 0u;
    clear_has_Data();
  }
}
inline ::google::protobuf::uint32 CmdMsg_ParamSet::databytes() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamSet.dataBytes)
  if (has_databytes()) {
    return Data_.databytes_;
  }
  return 0u;
}
inline void CmdMsg_ParamSet::set_databytes(::google::protobuf::uint32 value) {
  if (!has_databytes()) {
    clear_Data();
    set_has_databytes();
  }
  Data_.databytes_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamSet.dataBytes)
}

inline bool CmdMsg_ParamSet::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void CmdMsg_ParamSet::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline CmdMsg_ParamSet::DataCase CmdMsg_ParamSet::Data_case() const {
  return CmdMsg_ParamSet::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_SetParamsCmd

// .HaWC.Targets target = 1;
inline void CmdMsg_SetParamsCmd::clear_target() {
  target_ = 0;
}
inline ::HaWC::Targets CmdMsg_SetParamsCmd::target() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetParamsCmd.target)
  return static_cast< ::HaWC::Targets >(target_);
}
inline void CmdMsg_SetParamsCmd::set_target(::HaWC::Targets value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetParamsCmd.target)
}

// repeated .HaWC.CmdMsg.ParamSet params = 2;
inline int CmdMsg_SetParamsCmd::params_size() const {
  return params_.size();
}
inline void CmdMsg_SetParamsCmd::clear_params() {
  params_.Clear();
}
inline ::HaWC::CmdMsg_ParamSet* CmdMsg_SetParamsCmd::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetParamsCmd.params)
  return params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamSet >*
CmdMsg_SetParamsCmd::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.SetParamsCmd.params)
  return &params_;
}
inline const ::HaWC::CmdMsg_ParamSet& CmdMsg_SetParamsCmd::params(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetParamsCmd.params)
  return params_.Get(index);
}
inline ::HaWC::CmdMsg_ParamSet* CmdMsg_SetParamsCmd::add_params() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.SetParamsCmd.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamSet >&
CmdMsg_SetParamsCmd::params() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.SetParamsCmd.params)
  return params_;
}

// bool reportParamVals = 3;
inline void CmdMsg_SetParamsCmd::clear_reportparamvals() {
  reportparamvals_ = false;
}
inline bool CmdMsg_SetParamsCmd::reportparamvals() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetParamsCmd.reportParamVals)
  return reportparamvals_;
}
inline void CmdMsg_SetParamsCmd::set_reportparamvals(bool value) {
  
  reportparamvals_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetParamsCmd.reportParamVals)
}

// bool reportErrStr = 4;
inline void CmdMsg_SetParamsCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SetParamsCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetParamsCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SetParamsCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetParamsCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_ParamLoc

// string id = 1;
inline void CmdMsg_ParamLoc::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_ParamLoc::id() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamLoc.id)
  return id_.GetNoArena();
}
inline void CmdMsg_ParamLoc::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamLoc.id)
}
#if LANG_CXX11
inline void CmdMsg_ParamLoc::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ParamLoc.id)
}
#endif
inline void CmdMsg_ParamLoc::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ParamLoc.id)
}
inline void CmdMsg_ParamLoc::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ParamLoc.id)
}
inline ::std::string* CmdMsg_ParamLoc::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ParamLoc.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ParamLoc::release_id() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ParamLoc.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_ParamLoc::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ParamLoc.id)
}

// uint32 offset = 2;
inline void CmdMsg_ParamLoc::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_ParamLoc::offset() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ParamLoc.offset)
  return offset_;
}
inline void CmdMsg_ParamLoc::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ParamLoc.offset)
}

// -------------------------------------------------------------------

// CmdMsg_GetParamsCmd

// .HaWC.Targets target = 1;
inline void CmdMsg_GetParamsCmd::clear_target() {
  target_ = 0;
}
inline ::HaWC::Targets CmdMsg_GetParamsCmd::target() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCmd.target)
  return static_cast< ::HaWC::Targets >(target_);
}
inline void CmdMsg_GetParamsCmd::set_target(::HaWC::Targets value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCmd.target)
}

// repeated .HaWC.CmdMsg.ParamLoc locations = 2;
inline int CmdMsg_GetParamsCmd::locations_size() const {
  return locations_.size();
}
inline void CmdMsg_GetParamsCmd::clear_locations() {
  locations_.Clear();
}
inline ::HaWC::CmdMsg_ParamLoc* CmdMsg_GetParamsCmd::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.GetParamsCmd.locations)
  return locations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamLoc >*
CmdMsg_GetParamsCmd::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.GetParamsCmd.locations)
  return &locations_;
}
inline const ::HaWC::CmdMsg_ParamLoc& CmdMsg_GetParamsCmd::locations(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCmd.locations)
  return locations_.Get(index);
}
inline ::HaWC::CmdMsg_ParamLoc* CmdMsg_GetParamsCmd::add_locations() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.GetParamsCmd.locations)
  return locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ParamLoc >&
CmdMsg_GetParamsCmd::locations() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.GetParamsCmd.locations)
  return locations_;
}

// bool reportErrStr = 3;
inline void CmdMsg_GetParamsCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_GetParamsCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_GetParamsCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_GetParamsCfgnCmd

// .HaWC.Targets target = 1;
inline void CmdMsg_GetParamsCfgnCmd::clear_target() {
  target_ = 0;
}
inline ::HaWC::Targets CmdMsg_GetParamsCfgnCmd::target() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCfgnCmd.target)
  return static_cast< ::HaWC::Targets >(target_);
}
inline void CmdMsg_GetParamsCfgnCmd::set_target(::HaWC::Targets value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCfgnCmd.target)
}

// repeated string paramIDs = 2;
inline int CmdMsg_GetParamsCfgnCmd::paramids_size() const {
  return paramids_.size();
}
inline void CmdMsg_GetParamsCfgnCmd::clear_paramids() {
  paramids_.Clear();
}
inline const ::std::string& CmdMsg_GetParamsCfgnCmd::paramids(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  return paramids_.Get(index);
}
inline ::std::string* CmdMsg_GetParamsCfgnCmd::mutable_paramids(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  return paramids_.Mutable(index);
}
inline void CmdMsg_GetParamsCfgnCmd::set_paramids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  paramids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CmdMsg_GetParamsCfgnCmd::set_paramids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  paramids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CmdMsg_GetParamsCfgnCmd::set_paramids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
}
inline void CmdMsg_GetParamsCfgnCmd::set_paramids(int index, const char* value, size_t size) {
  paramids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
}
inline ::std::string* CmdMsg_GetParamsCfgnCmd::add_paramids() {
  // @@protoc_insertion_point(field_add_mutable:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  return paramids_.Add();
}
inline void CmdMsg_GetParamsCfgnCmd::add_paramids(const ::std::string& value) {
  paramids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
}
#if LANG_CXX11
inline void CmdMsg_GetParamsCfgnCmd::add_paramids(::std::string&& value) {
  paramids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
}
#endif
inline void CmdMsg_GetParamsCfgnCmd::add_paramids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  paramids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
}
inline void CmdMsg_GetParamsCfgnCmd::add_paramids(const char* value, size_t size) {
  paramids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdMsg_GetParamsCfgnCmd::paramids() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  return paramids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CmdMsg_GetParamsCfgnCmd::mutable_paramids() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.GetParamsCfgnCmd.paramIDs)
  return &paramids_;
}

// bool reportDescription = 3;
inline void CmdMsg_GetParamsCfgnCmd::clear_reportdescription() {
  reportdescription_ = false;
}
inline bool CmdMsg_GetParamsCfgnCmd::reportdescription() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCfgnCmd.reportDescription)
  return reportdescription_;
}
inline void CmdMsg_GetParamsCfgnCmd::set_reportdescription(bool value) {
  
  reportdescription_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCfgnCmd.reportDescription)
}

// bool reportErrStr = 4;
inline void CmdMsg_GetParamsCfgnCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_GetParamsCfgnCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetParamsCfgnCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_GetParamsCfgnCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetParamsCfgnCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_GetFileHashCmd

// string fileName = 1;
inline void CmdMsg_GetFileHashCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_GetFileHashCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetFileHashCmd.fileName)
  return filename_.GetNoArena();
}
inline void CmdMsg_GetFileHashCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetFileHashCmd.fileName)
}
#if LANG_CXX11
inline void CmdMsg_GetFileHashCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.GetFileHashCmd.fileName)
}
#endif
inline void CmdMsg_GetFileHashCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.GetFileHashCmd.fileName)
}
inline void CmdMsg_GetFileHashCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.GetFileHashCmd.fileName)
}
inline ::std::string* CmdMsg_GetFileHashCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.GetFileHashCmd.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_GetFileHashCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.GetFileHashCmd.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_GetFileHashCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.GetFileHashCmd.fileName)
}

// bool reportErrStr = 2;
inline void CmdMsg_GetFileHashCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_GetFileHashCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetFileHashCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_GetFileHashCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetFileHashCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_AppManagerCmd

// .HaWC.CmdMsg.CloseCmd close = 2;
inline bool CmdMsg_AppManagerCmd::has_close() const {
  return command_case() == kClose;
}
inline void CmdMsg_AppManagerCmd::set_has_close() {
  _oneof_case_[0] = kClose;
}
inline void CmdMsg_AppManagerCmd::clear_close() {
  if (has_close()) {
    delete command_.close_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_CloseCmd& CmdMsg_AppManagerCmd::_internal_close() const {
  return *command_.close_;
}
inline ::HaWC::CmdMsg_CloseCmd* CmdMsg_AppManagerCmd::release_close() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.close)
  if (has_close()) {
    clear_has_command();
      ::HaWC::CmdMsg_CloseCmd* temp = command_.close_;
    command_.close_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_CloseCmd& CmdMsg_AppManagerCmd::close() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.close)
  return has_close()
      ? *command_.close_
      : *reinterpret_cast< ::HaWC::CmdMsg_CloseCmd*>(&::HaWC::_CmdMsg_CloseCmd_default_instance_);
}
inline ::HaWC::CmdMsg_CloseCmd* CmdMsg_AppManagerCmd::mutable_close() {
  if (!has_close()) {
    clear_command();
    set_has_close();
    command_.close_ = CreateMaybeMessage< ::HaWC::CmdMsg_CloseCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.close)
  return command_.close_;
}

// .HaWC.CmdMsg.SaveDefaultConfigCmd saveDefaultConfig = 5;
inline bool CmdMsg_AppManagerCmd::has_savedefaultconfig() const {
  return command_case() == kSaveDefaultConfig;
}
inline void CmdMsg_AppManagerCmd::set_has_savedefaultconfig() {
  _oneof_case_[0] = kSaveDefaultConfig;
}
inline void CmdMsg_AppManagerCmd::clear_savedefaultconfig() {
  if (has_savedefaultconfig()) {
    delete command_.savedefaultconfig_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SaveDefaultConfigCmd& CmdMsg_AppManagerCmd::_internal_savedefaultconfig() const {
  return *command_.savedefaultconfig_;
}
inline ::HaWC::CmdMsg_SaveDefaultConfigCmd* CmdMsg_AppManagerCmd::release_savedefaultconfig() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.saveDefaultConfig)
  if (has_savedefaultconfig()) {
    clear_has_command();
      ::HaWC::CmdMsg_SaveDefaultConfigCmd* temp = command_.savedefaultconfig_;
    command_.savedefaultconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SaveDefaultConfigCmd& CmdMsg_AppManagerCmd::savedefaultconfig() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.saveDefaultConfig)
  return has_savedefaultconfig()
      ? *command_.savedefaultconfig_
      : *reinterpret_cast< ::HaWC::CmdMsg_SaveDefaultConfigCmd*>(&::HaWC::_CmdMsg_SaveDefaultConfigCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SaveDefaultConfigCmd* CmdMsg_AppManagerCmd::mutable_savedefaultconfig() {
  if (!has_savedefaultconfig()) {
    clear_command();
    set_has_savedefaultconfig();
    command_.savedefaultconfig_ = CreateMaybeMessage< ::HaWC::CmdMsg_SaveDefaultConfigCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.saveDefaultConfig)
  return command_.savedefaultconfig_;
}

// .HaWC.CmdMsg.SaveConfigToFileCmd saveConfigToFile = 6;
inline bool CmdMsg_AppManagerCmd::has_saveconfigtofile() const {
  return command_case() == kSaveConfigToFile;
}
inline void CmdMsg_AppManagerCmd::set_has_saveconfigtofile() {
  _oneof_case_[0] = kSaveConfigToFile;
}
inline void CmdMsg_AppManagerCmd::clear_saveconfigtofile() {
  if (has_saveconfigtofile()) {
    delete command_.saveconfigtofile_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SaveConfigToFileCmd& CmdMsg_AppManagerCmd::_internal_saveconfigtofile() const {
  return *command_.saveconfigtofile_;
}
inline ::HaWC::CmdMsg_SaveConfigToFileCmd* CmdMsg_AppManagerCmd::release_saveconfigtofile() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.saveConfigToFile)
  if (has_saveconfigtofile()) {
    clear_has_command();
      ::HaWC::CmdMsg_SaveConfigToFileCmd* temp = command_.saveconfigtofile_;
    command_.saveconfigtofile_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SaveConfigToFileCmd& CmdMsg_AppManagerCmd::saveconfigtofile() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.saveConfigToFile)
  return has_saveconfigtofile()
      ? *command_.saveconfigtofile_
      : *reinterpret_cast< ::HaWC::CmdMsg_SaveConfigToFileCmd*>(&::HaWC::_CmdMsg_SaveConfigToFileCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SaveConfigToFileCmd* CmdMsg_AppManagerCmd::mutable_saveconfigtofile() {
  if (!has_saveconfigtofile()) {
    clear_command();
    set_has_saveconfigtofile();
    command_.saveconfigtofile_ = CreateMaybeMessage< ::HaWC::CmdMsg_SaveConfigToFileCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.saveConfigToFile)
  return command_.saveconfigtofile_;
}

// .HaWC.CmdMsg.LoadConfigFromFileCmd loadConfigFromFile = 7;
inline bool CmdMsg_AppManagerCmd::has_loadconfigfromfile() const {
  return command_case() == kLoadConfigFromFile;
}
inline void CmdMsg_AppManagerCmd::set_has_loadconfigfromfile() {
  _oneof_case_[0] = kLoadConfigFromFile;
}
inline void CmdMsg_AppManagerCmd::clear_loadconfigfromfile() {
  if (has_loadconfigfromfile()) {
    delete command_.loadconfigfromfile_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_LoadConfigFromFileCmd& CmdMsg_AppManagerCmd::_internal_loadconfigfromfile() const {
  return *command_.loadconfigfromfile_;
}
inline ::HaWC::CmdMsg_LoadConfigFromFileCmd* CmdMsg_AppManagerCmd::release_loadconfigfromfile() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.loadConfigFromFile)
  if (has_loadconfigfromfile()) {
    clear_has_command();
      ::HaWC::CmdMsg_LoadConfigFromFileCmd* temp = command_.loadconfigfromfile_;
    command_.loadconfigfromfile_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_LoadConfigFromFileCmd& CmdMsg_AppManagerCmd::loadconfigfromfile() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.loadConfigFromFile)
  return has_loadconfigfromfile()
      ? *command_.loadconfigfromfile_
      : *reinterpret_cast< ::HaWC::CmdMsg_LoadConfigFromFileCmd*>(&::HaWC::_CmdMsg_LoadConfigFromFileCmd_default_instance_);
}
inline ::HaWC::CmdMsg_LoadConfigFromFileCmd* CmdMsg_AppManagerCmd::mutable_loadconfigfromfile() {
  if (!has_loadconfigfromfile()) {
    clear_command();
    set_has_loadconfigfromfile();
    command_.loadconfigfromfile_ = CreateMaybeMessage< ::HaWC::CmdMsg_LoadConfigFromFileCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.loadConfigFromFile)
  return command_.loadconfigfromfile_;
}

// .HaWC.CmdMsg.RestoreFactoryConfigCmd restoreFactoryConfig = 8;
inline bool CmdMsg_AppManagerCmd::has_restorefactoryconfig() const {
  return command_case() == kRestoreFactoryConfig;
}
inline void CmdMsg_AppManagerCmd::set_has_restorefactoryconfig() {
  _oneof_case_[0] = kRestoreFactoryConfig;
}
inline void CmdMsg_AppManagerCmd::clear_restorefactoryconfig() {
  if (has_restorefactoryconfig()) {
    delete command_.restorefactoryconfig_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_RestoreFactoryConfigCmd& CmdMsg_AppManagerCmd::_internal_restorefactoryconfig() const {
  return *command_.restorefactoryconfig_;
}
inline ::HaWC::CmdMsg_RestoreFactoryConfigCmd* CmdMsg_AppManagerCmd::release_restorefactoryconfig() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.restoreFactoryConfig)
  if (has_restorefactoryconfig()) {
    clear_has_command();
      ::HaWC::CmdMsg_RestoreFactoryConfigCmd* temp = command_.restorefactoryconfig_;
    command_.restorefactoryconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_RestoreFactoryConfigCmd& CmdMsg_AppManagerCmd::restorefactoryconfig() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.restoreFactoryConfig)
  return has_restorefactoryconfig()
      ? *command_.restorefactoryconfig_
      : *reinterpret_cast< ::HaWC::CmdMsg_RestoreFactoryConfigCmd*>(&::HaWC::_CmdMsg_RestoreFactoryConfigCmd_default_instance_);
}
inline ::HaWC::CmdMsg_RestoreFactoryConfigCmd* CmdMsg_AppManagerCmd::mutable_restorefactoryconfig() {
  if (!has_restorefactoryconfig()) {
    clear_command();
    set_has_restorefactoryconfig();
    command_.restorefactoryconfig_ = CreateMaybeMessage< ::HaWC::CmdMsg_RestoreFactoryConfigCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.restoreFactoryConfig)
  return command_.restorefactoryconfig_;
}

// .HaWC.CmdMsg.SetParamsCmd setParams = 9;
inline bool CmdMsg_AppManagerCmd::has_setparams() const {
  return command_case() == kSetParams;
}
inline void CmdMsg_AppManagerCmd::set_has_setparams() {
  _oneof_case_[0] = kSetParams;
}
inline void CmdMsg_AppManagerCmd::clear_setparams() {
  if (has_setparams()) {
    delete command_.setparams_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SetParamsCmd& CmdMsg_AppManagerCmd::_internal_setparams() const {
  return *command_.setparams_;
}
inline ::HaWC::CmdMsg_SetParamsCmd* CmdMsg_AppManagerCmd::release_setparams() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.setParams)
  if (has_setparams()) {
    clear_has_command();
      ::HaWC::CmdMsg_SetParamsCmd* temp = command_.setparams_;
    command_.setparams_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SetParamsCmd& CmdMsg_AppManagerCmd::setparams() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.setParams)
  return has_setparams()
      ? *command_.setparams_
      : *reinterpret_cast< ::HaWC::CmdMsg_SetParamsCmd*>(&::HaWC::_CmdMsg_SetParamsCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SetParamsCmd* CmdMsg_AppManagerCmd::mutable_setparams() {
  if (!has_setparams()) {
    clear_command();
    set_has_setparams();
    command_.setparams_ = CreateMaybeMessage< ::HaWC::CmdMsg_SetParamsCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.setParams)
  return command_.setparams_;
}

// .HaWC.CmdMsg.GetParamsCmd getParams = 10;
inline bool CmdMsg_AppManagerCmd::has_getparams() const {
  return command_case() == kGetParams;
}
inline void CmdMsg_AppManagerCmd::set_has_getparams() {
  _oneof_case_[0] = kGetParams;
}
inline void CmdMsg_AppManagerCmd::clear_getparams() {
  if (has_getparams()) {
    delete command_.getparams_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_GetParamsCmd& CmdMsg_AppManagerCmd::_internal_getparams() const {
  return *command_.getparams_;
}
inline ::HaWC::CmdMsg_GetParamsCmd* CmdMsg_AppManagerCmd::release_getparams() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.getParams)
  if (has_getparams()) {
    clear_has_command();
      ::HaWC::CmdMsg_GetParamsCmd* temp = command_.getparams_;
    command_.getparams_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_GetParamsCmd& CmdMsg_AppManagerCmd::getparams() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.getParams)
  return has_getparams()
      ? *command_.getparams_
      : *reinterpret_cast< ::HaWC::CmdMsg_GetParamsCmd*>(&::HaWC::_CmdMsg_GetParamsCmd_default_instance_);
}
inline ::HaWC::CmdMsg_GetParamsCmd* CmdMsg_AppManagerCmd::mutable_getparams() {
  if (!has_getparams()) {
    clear_command();
    set_has_getparams();
    command_.getparams_ = CreateMaybeMessage< ::HaWC::CmdMsg_GetParamsCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.getParams)
  return command_.getparams_;
}

// .HaWC.CmdMsg.GetParamsCfgnCmd getParamsCfgn = 11;
inline bool CmdMsg_AppManagerCmd::has_getparamscfgn() const {
  return command_case() == kGetParamsCfgn;
}
inline void CmdMsg_AppManagerCmd::set_has_getparamscfgn() {
  _oneof_case_[0] = kGetParamsCfgn;
}
inline void CmdMsg_AppManagerCmd::clear_getparamscfgn() {
  if (has_getparamscfgn()) {
    delete command_.getparamscfgn_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_GetParamsCfgnCmd& CmdMsg_AppManagerCmd::_internal_getparamscfgn() const {
  return *command_.getparamscfgn_;
}
inline ::HaWC::CmdMsg_GetParamsCfgnCmd* CmdMsg_AppManagerCmd::release_getparamscfgn() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.getParamsCfgn)
  if (has_getparamscfgn()) {
    clear_has_command();
      ::HaWC::CmdMsg_GetParamsCfgnCmd* temp = command_.getparamscfgn_;
    command_.getparamscfgn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_GetParamsCfgnCmd& CmdMsg_AppManagerCmd::getparamscfgn() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.getParamsCfgn)
  return has_getparamscfgn()
      ? *command_.getparamscfgn_
      : *reinterpret_cast< ::HaWC::CmdMsg_GetParamsCfgnCmd*>(&::HaWC::_CmdMsg_GetParamsCfgnCmd_default_instance_);
}
inline ::HaWC::CmdMsg_GetParamsCfgnCmd* CmdMsg_AppManagerCmd::mutable_getparamscfgn() {
  if (!has_getparamscfgn()) {
    clear_command();
    set_has_getparamscfgn();
    command_.getparamscfgn_ = CreateMaybeMessage< ::HaWC::CmdMsg_GetParamsCfgnCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.getParamsCfgn)
  return command_.getparamscfgn_;
}

// .HaWC.CmdMsg.GetFileHashCmd getFileHash = 15;
inline bool CmdMsg_AppManagerCmd::has_getfilehash() const {
  return command_case() == kGetFileHash;
}
inline void CmdMsg_AppManagerCmd::set_has_getfilehash() {
  _oneof_case_[0] = kGetFileHash;
}
inline void CmdMsg_AppManagerCmd::clear_getfilehash() {
  if (has_getfilehash()) {
    delete command_.getfilehash_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_GetFileHashCmd& CmdMsg_AppManagerCmd::_internal_getfilehash() const {
  return *command_.getfilehash_;
}
inline ::HaWC::CmdMsg_GetFileHashCmd* CmdMsg_AppManagerCmd::release_getfilehash() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.AppManagerCmd.getFileHash)
  if (has_getfilehash()) {
    clear_has_command();
      ::HaWC::CmdMsg_GetFileHashCmd* temp = command_.getfilehash_;
    command_.getfilehash_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_GetFileHashCmd& CmdMsg_AppManagerCmd::getfilehash() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.AppManagerCmd.getFileHash)
  return has_getfilehash()
      ? *command_.getfilehash_
      : *reinterpret_cast< ::HaWC::CmdMsg_GetFileHashCmd*>(&::HaWC::_CmdMsg_GetFileHashCmd_default_instance_);
}
inline ::HaWC::CmdMsg_GetFileHashCmd* CmdMsg_AppManagerCmd::mutable_getfilehash() {
  if (!has_getfilehash()) {
    clear_command();
    set_has_getfilehash();
    command_.getfilehash_ = CreateMaybeMessage< ::HaWC::CmdMsg_GetFileHashCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.AppManagerCmd.getFileHash)
  return command_.getfilehash_;
}

inline bool CmdMsg_AppManagerCmd::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CmdMsg_AppManagerCmd::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline CmdMsg_AppManagerCmd::CommandCase CmdMsg_AppManagerCmd::command_case() const {
  return CmdMsg_AppManagerCmd::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_LineProperty

// bool visible = 1;
inline bool CmdMsg_LineProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_LineProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_LineProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_LineProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_LineProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.visible)
}

// float pt1x = 2;
inline bool CmdMsg_LineProperty::has_pt1x() const {
  return property_case() == kPt1X;
}
inline void CmdMsg_LineProperty::set_has_pt1x() {
  _oneof_case_[0] = kPt1X;
}
inline void CmdMsg_LineProperty::clear_pt1x() {
  if (has_pt1x()) {
    property_.pt1x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LineProperty::pt1x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.pt1x)
  if (has_pt1x()) {
    return property_.pt1x_;
  }
  return 0;
}
inline void CmdMsg_LineProperty::set_pt1x(float value) {
  if (!has_pt1x()) {
    clear_property();
    set_has_pt1x();
  }
  property_.pt1x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.pt1x)
}

// float pt1y = 3;
inline bool CmdMsg_LineProperty::has_pt1y() const {
  return property_case() == kPt1Y;
}
inline void CmdMsg_LineProperty::set_has_pt1y() {
  _oneof_case_[0] = kPt1Y;
}
inline void CmdMsg_LineProperty::clear_pt1y() {
  if (has_pt1y()) {
    property_.pt1y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LineProperty::pt1y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.pt1y)
  if (has_pt1y()) {
    return property_.pt1y_;
  }
  return 0;
}
inline void CmdMsg_LineProperty::set_pt1y(float value) {
  if (!has_pt1y()) {
    clear_property();
    set_has_pt1y();
  }
  property_.pt1y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.pt1y)
}

// float pt2x = 4;
inline bool CmdMsg_LineProperty::has_pt2x() const {
  return property_case() == kPt2X;
}
inline void CmdMsg_LineProperty::set_has_pt2x() {
  _oneof_case_[0] = kPt2X;
}
inline void CmdMsg_LineProperty::clear_pt2x() {
  if (has_pt2x()) {
    property_.pt2x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LineProperty::pt2x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.pt2x)
  if (has_pt2x()) {
    return property_.pt2x_;
  }
  return 0;
}
inline void CmdMsg_LineProperty::set_pt2x(float value) {
  if (!has_pt2x()) {
    clear_property();
    set_has_pt2x();
  }
  property_.pt2x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.pt2x)
}

// float pt2y = 5;
inline bool CmdMsg_LineProperty::has_pt2y() const {
  return property_case() == kPt2Y;
}
inline void CmdMsg_LineProperty::set_has_pt2y() {
  _oneof_case_[0] = kPt2Y;
}
inline void CmdMsg_LineProperty::clear_pt2y() {
  if (has_pt2y()) {
    property_.pt2y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LineProperty::pt2y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.pt2y)
  if (has_pt2y()) {
    return property_.pt2y_;
  }
  return 0;
}
inline void CmdMsg_LineProperty::set_pt2y(float value) {
  if (!has_pt2y()) {
    clear_property();
    set_has_pt2y();
  }
  property_.pt2y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.pt2y)
}

// float width = 6;
inline bool CmdMsg_LineProperty::has_width() const {
  return property_case() == kWidth;
}
inline void CmdMsg_LineProperty::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void CmdMsg_LineProperty::clear_width() {
  if (has_width()) {
    property_.width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LineProperty::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.width)
  if (has_width()) {
    return property_.width_;
  }
  return 0;
}
inline void CmdMsg_LineProperty::set_width(float value) {
  if (!has_width()) {
    clear_property();
    set_has_width();
  }
  property_.width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.width)
}

// string color = 7;
inline bool CmdMsg_LineProperty::has_color() const {
  return property_case() == kColor;
}
inline void CmdMsg_LineProperty::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void CmdMsg_LineProperty::clear_color() {
  if (has_color()) {
    property_.color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_LineProperty::color() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.color)
  if (has_color()) {
    return property_.color_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_LineProperty::set_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.color)
}
#if LANG_CXX11
inline void CmdMsg_LineProperty::set_color(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LineProperty.color)
}
#endif
inline void CmdMsg_LineProperty::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LineProperty.color)
}
inline void CmdMsg_LineProperty::set_color(const char* value, size_t size) {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LineProperty.color)
}
inline ::std::string* CmdMsg_LineProperty::mutable_color() {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LineProperty.color)
  return property_.color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LineProperty::release_color() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LineProperty.color)
  if (has_color()) {
    clear_has_property();
    return property_.color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_LineProperty::set_allocated_color(::std::string* color) {
  if (!has_color()) {
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (color != NULL) {
    set_has_color();
    property_.color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LineProperty.color)
}

// float opacity = 8;
inline bool CmdMsg_LineProperty::has_opacity() const {
  return property_case() == kOpacity;
}
inline void CmdMsg_LineProperty::set_has_opacity() {
  _oneof_case_[0] = kOpacity;
}
inline void CmdMsg_LineProperty::clear_opacity() {
  if (has_opacity()) {
    property_.opacity_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LineProperty::opacity() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperty.opacity)
  if (has_opacity()) {
    return property_.opacity_;
  }
  return 0;
}
inline void CmdMsg_LineProperty::set_opacity(float value) {
  if (!has_opacity()) {
    clear_property();
    set_has_opacity();
  }
  property_.opacity_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LineProperty.opacity)
}

inline bool CmdMsg_LineProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_LineProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_LineProperty::PropertyCase CmdMsg_LineProperty::property_case() const {
  return CmdMsg_LineProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_LineProperties

// repeated .HaWC.CmdMsg.LineProperty properties = 2;
inline int CmdMsg_LineProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_LineProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_LineProperty* CmdMsg_LineProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LineProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LineProperty >*
CmdMsg_LineProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.LineProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_LineProperty& CmdMsg_LineProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LineProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_LineProperty* CmdMsg_LineProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.LineProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LineProperty >&
CmdMsg_LineProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.LineProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_CircleProperty

// bool visible = 1;
inline bool CmdMsg_CircleProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_CircleProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_CircleProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_CircleProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_CircleProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.visible)
}

// float x = 2;
inline bool CmdMsg_CircleProperty::has_x() const {
  return property_case() == kX;
}
inline void CmdMsg_CircleProperty::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void CmdMsg_CircleProperty::clear_x() {
  if (has_x()) {
    property_.x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_CircleProperty::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.x)
  if (has_x()) {
    return property_.x_;
  }
  return 0;
}
inline void CmdMsg_CircleProperty::set_x(float value) {
  if (!has_x()) {
    clear_property();
    set_has_x();
  }
  property_.x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.x)
}

// float y = 3;
inline bool CmdMsg_CircleProperty::has_y() const {
  return property_case() == kY;
}
inline void CmdMsg_CircleProperty::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void CmdMsg_CircleProperty::clear_y() {
  if (has_y()) {
    property_.y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_CircleProperty::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.y)
  if (has_y()) {
    return property_.y_;
  }
  return 0;
}
inline void CmdMsg_CircleProperty::set_y(float value) {
  if (!has_y()) {
    clear_property();
    set_has_y();
  }
  property_.y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.y)
}

// float radius = 4;
inline bool CmdMsg_CircleProperty::has_radius() const {
  return property_case() == kRadius;
}
inline void CmdMsg_CircleProperty::set_has_radius() {
  _oneof_case_[0] = kRadius;
}
inline void CmdMsg_CircleProperty::clear_radius() {
  if (has_radius()) {
    property_.radius_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_CircleProperty::radius() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.radius)
  if (has_radius()) {
    return property_.radius_;
  }
  return 0;
}
inline void CmdMsg_CircleProperty::set_radius(float value) {
  if (!has_radius()) {
    clear_property();
    set_has_radius();
  }
  property_.radius_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.radius)
}

// string color = 5;
inline bool CmdMsg_CircleProperty::has_color() const {
  return property_case() == kColor;
}
inline void CmdMsg_CircleProperty::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void CmdMsg_CircleProperty::clear_color() {
  if (has_color()) {
    property_.color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_CircleProperty::color() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.color)
  if (has_color()) {
    return property_.color_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_CircleProperty::set_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.color)
}
#if LANG_CXX11
inline void CmdMsg_CircleProperty::set_color(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.CircleProperty.color)
}
#endif
inline void CmdMsg_CircleProperty::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.CircleProperty.color)
}
inline void CmdMsg_CircleProperty::set_color(const char* value, size_t size) {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.CircleProperty.color)
}
inline ::std::string* CmdMsg_CircleProperty::mutable_color() {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.CircleProperty.color)
  return property_.color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_CircleProperty::release_color() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.CircleProperty.color)
  if (has_color()) {
    clear_has_property();
    return property_.color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_CircleProperty::set_allocated_color(::std::string* color) {
  if (!has_color()) {
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (color != NULL) {
    set_has_color();
    property_.color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.CircleProperty.color)
}

// float border_width = 6;
inline bool CmdMsg_CircleProperty::has_border_width() const {
  return property_case() == kBorderWidth;
}
inline void CmdMsg_CircleProperty::set_has_border_width() {
  _oneof_case_[0] = kBorderWidth;
}
inline void CmdMsg_CircleProperty::clear_border_width() {
  if (has_border_width()) {
    property_.border_width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_CircleProperty::border_width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.border_width)
  if (has_border_width()) {
    return property_.border_width_;
  }
  return 0;
}
inline void CmdMsg_CircleProperty::set_border_width(float value) {
  if (!has_border_width()) {
    clear_property();
    set_has_border_width();
  }
  property_.border_width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.border_width)
}

// string border_color = 7;
inline bool CmdMsg_CircleProperty::has_border_color() const {
  return property_case() == kBorderColor;
}
inline void CmdMsg_CircleProperty::set_has_border_color() {
  _oneof_case_[0] = kBorderColor;
}
inline void CmdMsg_CircleProperty::clear_border_color() {
  if (has_border_color()) {
    property_.border_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_CircleProperty::border_color() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.border_color)
  if (has_border_color()) {
    return property_.border_color_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_CircleProperty::set_border_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.border_color)
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.border_color)
}
#if LANG_CXX11
inline void CmdMsg_CircleProperty::set_border_color(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.border_color)
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.CircleProperty.border_color)
}
#endif
inline void CmdMsg_CircleProperty::set_border_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.CircleProperty.border_color)
}
inline void CmdMsg_CircleProperty::set_border_color(const char* value, size_t size) {
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.CircleProperty.border_color)
}
inline ::std::string* CmdMsg_CircleProperty::mutable_border_color() {
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.CircleProperty.border_color)
  return property_.border_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_CircleProperty::release_border_color() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.CircleProperty.border_color)
  if (has_border_color()) {
    clear_has_property();
    return property_.border_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_CircleProperty::set_allocated_border_color(::std::string* border_color) {
  if (!has_border_color()) {
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (border_color != NULL) {
    set_has_border_color();
    property_.border_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), border_color);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.CircleProperty.border_color)
}

// float opacity = 8;
inline bool CmdMsg_CircleProperty::has_opacity() const {
  return property_case() == kOpacity;
}
inline void CmdMsg_CircleProperty::set_has_opacity() {
  _oneof_case_[0] = kOpacity;
}
inline void CmdMsg_CircleProperty::clear_opacity() {
  if (has_opacity()) {
    property_.opacity_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_CircleProperty::opacity() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperty.opacity)
  if (has_opacity()) {
    return property_.opacity_;
  }
  return 0;
}
inline void CmdMsg_CircleProperty::set_opacity(float value) {
  if (!has_opacity()) {
    clear_property();
    set_has_opacity();
  }
  property_.opacity_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.CircleProperty.opacity)
}

inline bool CmdMsg_CircleProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_CircleProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_CircleProperty::PropertyCase CmdMsg_CircleProperty::property_case() const {
  return CmdMsg_CircleProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_CircleProperties

// repeated .HaWC.CmdMsg.CircleProperty properties = 2;
inline int CmdMsg_CircleProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_CircleProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_CircleProperty* CmdMsg_CircleProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.CircleProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_CircleProperty >*
CmdMsg_CircleProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.CircleProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_CircleProperty& CmdMsg_CircleProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.CircleProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_CircleProperty* CmdMsg_CircleProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.CircleProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_CircleProperty >&
CmdMsg_CircleProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.CircleProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_RectangleProperty

// bool visible = 1;
inline bool CmdMsg_RectangleProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_RectangleProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_RectangleProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_RectangleProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_RectangleProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.visible)
}

// float x = 2;
inline bool CmdMsg_RectangleProperty::has_x() const {
  return property_case() == kX;
}
inline void CmdMsg_RectangleProperty::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void CmdMsg_RectangleProperty::clear_x() {
  if (has_x()) {
    property_.x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.x)
  if (has_x()) {
    return property_.x_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_x(float value) {
  if (!has_x()) {
    clear_property();
    set_has_x();
  }
  property_.x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.x)
}

// float y = 3;
inline bool CmdMsg_RectangleProperty::has_y() const {
  return property_case() == kY;
}
inline void CmdMsg_RectangleProperty::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void CmdMsg_RectangleProperty::clear_y() {
  if (has_y()) {
    property_.y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.y)
  if (has_y()) {
    return property_.y_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_y(float value) {
  if (!has_y()) {
    clear_property();
    set_has_y();
  }
  property_.y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.y)
}

// float width = 4;
inline bool CmdMsg_RectangleProperty::has_width() const {
  return property_case() == kWidth;
}
inline void CmdMsg_RectangleProperty::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void CmdMsg_RectangleProperty::clear_width() {
  if (has_width()) {
    property_.width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.width)
  if (has_width()) {
    return property_.width_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_width(float value) {
  if (!has_width()) {
    clear_property();
    set_has_width();
  }
  property_.width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.width)
}

// float height = 5;
inline bool CmdMsg_RectangleProperty::has_height() const {
  return property_case() == kHeight;
}
inline void CmdMsg_RectangleProperty::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void CmdMsg_RectangleProperty::clear_height() {
  if (has_height()) {
    property_.height_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::height() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.height)
  if (has_height()) {
    return property_.height_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_height(float value) {
  if (!has_height()) {
    clear_property();
    set_has_height();
  }
  property_.height_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.height)
}

// string color = 6;
inline bool CmdMsg_RectangleProperty::has_color() const {
  return property_case() == kColor;
}
inline void CmdMsg_RectangleProperty::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void CmdMsg_RectangleProperty::clear_color() {
  if (has_color()) {
    property_.color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_RectangleProperty::color() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.color)
  if (has_color()) {
    return property_.color_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_RectangleProperty::set_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.color)
}
#if LANG_CXX11
inline void CmdMsg_RectangleProperty::set_color(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.RectangleProperty.color)
}
#endif
inline void CmdMsg_RectangleProperty::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.RectangleProperty.color)
}
inline void CmdMsg_RectangleProperty::set_color(const char* value, size_t size) {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.RectangleProperty.color)
}
inline ::std::string* CmdMsg_RectangleProperty::mutable_color() {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.RectangleProperty.color)
  return property_.color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_RectangleProperty::release_color() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.RectangleProperty.color)
  if (has_color()) {
    clear_has_property();
    return property_.color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_RectangleProperty::set_allocated_color(::std::string* color) {
  if (!has_color()) {
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (color != NULL) {
    set_has_color();
    property_.color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.RectangleProperty.color)
}

// float border_width = 7;
inline bool CmdMsg_RectangleProperty::has_border_width() const {
  return property_case() == kBorderWidth;
}
inline void CmdMsg_RectangleProperty::set_has_border_width() {
  _oneof_case_[0] = kBorderWidth;
}
inline void CmdMsg_RectangleProperty::clear_border_width() {
  if (has_border_width()) {
    property_.border_width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::border_width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.border_width)
  if (has_border_width()) {
    return property_.border_width_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_border_width(float value) {
  if (!has_border_width()) {
    clear_property();
    set_has_border_width();
  }
  property_.border_width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.border_width)
}

// string border_color = 8;
inline bool CmdMsg_RectangleProperty::has_border_color() const {
  return property_case() == kBorderColor;
}
inline void CmdMsg_RectangleProperty::set_has_border_color() {
  _oneof_case_[0] = kBorderColor;
}
inline void CmdMsg_RectangleProperty::clear_border_color() {
  if (has_border_color()) {
    property_.border_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_RectangleProperty::border_color() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.border_color)
  if (has_border_color()) {
    return property_.border_color_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_RectangleProperty::set_border_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.border_color)
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.border_color)
}
#if LANG_CXX11
inline void CmdMsg_RectangleProperty::set_border_color(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.border_color)
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.RectangleProperty.border_color)
}
#endif
inline void CmdMsg_RectangleProperty::set_border_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.RectangleProperty.border_color)
}
inline void CmdMsg_RectangleProperty::set_border_color(const char* value, size_t size) {
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.border_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.RectangleProperty.border_color)
}
inline ::std::string* CmdMsg_RectangleProperty::mutable_border_color() {
  if (!has_border_color()) {
    clear_property();
    set_has_border_color();
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.RectangleProperty.border_color)
  return property_.border_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_RectangleProperty::release_border_color() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.RectangleProperty.border_color)
  if (has_border_color()) {
    clear_has_property();
    return property_.border_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_RectangleProperty::set_allocated_border_color(::std::string* border_color) {
  if (!has_border_color()) {
    property_.border_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (border_color != NULL) {
    set_has_border_color();
    property_.border_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), border_color);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.RectangleProperty.border_color)
}

// float radius = 9;
inline bool CmdMsg_RectangleProperty::has_radius() const {
  return property_case() == kRadius;
}
inline void CmdMsg_RectangleProperty::set_has_radius() {
  _oneof_case_[0] = kRadius;
}
inline void CmdMsg_RectangleProperty::clear_radius() {
  if (has_radius()) {
    property_.radius_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::radius() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.radius)
  if (has_radius()) {
    return property_.radius_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_radius(float value) {
  if (!has_radius()) {
    clear_property();
    set_has_radius();
  }
  property_.radius_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.radius)
}

// float opacity = 10;
inline bool CmdMsg_RectangleProperty::has_opacity() const {
  return property_case() == kOpacity;
}
inline void CmdMsg_RectangleProperty::set_has_opacity() {
  _oneof_case_[0] = kOpacity;
}
inline void CmdMsg_RectangleProperty::clear_opacity() {
  if (has_opacity()) {
    property_.opacity_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::opacity() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.opacity)
  if (has_opacity()) {
    return property_.opacity_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_opacity(float value) {
  if (!has_opacity()) {
    clear_property();
    set_has_opacity();
  }
  property_.opacity_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.opacity)
}

// float rotation = 11;
inline bool CmdMsg_RectangleProperty::has_rotation() const {
  return property_case() == kRotation;
}
inline void CmdMsg_RectangleProperty::set_has_rotation() {
  _oneof_case_[0] = kRotation;
}
inline void CmdMsg_RectangleProperty::clear_rotation() {
  if (has_rotation()) {
    property_.rotation_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_RectangleProperty::rotation() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperty.rotation)
  if (has_rotation()) {
    return property_.rotation_;
  }
  return 0;
}
inline void CmdMsg_RectangleProperty::set_rotation(float value) {
  if (!has_rotation()) {
    clear_property();
    set_has_rotation();
  }
  property_.rotation_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.RectangleProperty.rotation)
}

inline bool CmdMsg_RectangleProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_RectangleProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_RectangleProperty::PropertyCase CmdMsg_RectangleProperty::property_case() const {
  return CmdMsg_RectangleProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_RectangleProperties

// repeated .HaWC.CmdMsg.RectangleProperty properties = 2;
inline int CmdMsg_RectangleProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_RectangleProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_RectangleProperty* CmdMsg_RectangleProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.RectangleProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_RectangleProperty >*
CmdMsg_RectangleProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.RectangleProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_RectangleProperty& CmdMsg_RectangleProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.RectangleProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_RectangleProperty* CmdMsg_RectangleProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.RectangleProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_RectangleProperty >&
CmdMsg_RectangleProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.RectangleProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_ImageProperty

// bool visible = 1;
inline bool CmdMsg_ImageProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_ImageProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_ImageProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_ImageProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_ImageProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.visible)
}

// float x = 2;
inline bool CmdMsg_ImageProperty::has_x() const {
  return property_case() == kX;
}
inline void CmdMsg_ImageProperty::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void CmdMsg_ImageProperty::clear_x() {
  if (has_x()) {
    property_.x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ImageProperty::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.x)
  if (has_x()) {
    return property_.x_;
  }
  return 0;
}
inline void CmdMsg_ImageProperty::set_x(float value) {
  if (!has_x()) {
    clear_property();
    set_has_x();
  }
  property_.x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.x)
}

// float y = 3;
inline bool CmdMsg_ImageProperty::has_y() const {
  return property_case() == kY;
}
inline void CmdMsg_ImageProperty::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void CmdMsg_ImageProperty::clear_y() {
  if (has_y()) {
    property_.y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ImageProperty::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.y)
  if (has_y()) {
    return property_.y_;
  }
  return 0;
}
inline void CmdMsg_ImageProperty::set_y(float value) {
  if (!has_y()) {
    clear_property();
    set_has_y();
  }
  property_.y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.y)
}

// float width = 4;
inline bool CmdMsg_ImageProperty::has_width() const {
  return property_case() == kWidth;
}
inline void CmdMsg_ImageProperty::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void CmdMsg_ImageProperty::clear_width() {
  if (has_width()) {
    property_.width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ImageProperty::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.width)
  if (has_width()) {
    return property_.width_;
  }
  return 0;
}
inline void CmdMsg_ImageProperty::set_width(float value) {
  if (!has_width()) {
    clear_property();
    set_has_width();
  }
  property_.width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.width)
}

// float height = 5;
inline bool CmdMsg_ImageProperty::has_height() const {
  return property_case() == kHeight;
}
inline void CmdMsg_ImageProperty::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void CmdMsg_ImageProperty::clear_height() {
  if (has_height()) {
    property_.height_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ImageProperty::height() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.height)
  if (has_height()) {
    return property_.height_;
  }
  return 0;
}
inline void CmdMsg_ImageProperty::set_height(float value) {
  if (!has_height()) {
    clear_property();
    set_has_height();
  }
  property_.height_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.height)
}

// string source = 6;
inline bool CmdMsg_ImageProperty::has_source() const {
  return property_case() == kSource;
}
inline void CmdMsg_ImageProperty::set_has_source() {
  _oneof_case_[0] = kSource;
}
inline void CmdMsg_ImageProperty::clear_source() {
  if (has_source()) {
    property_.source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_ImageProperty::source() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.source)
  if (has_source()) {
    return property_.source_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ImageProperty::set_source(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.source)
  if (!has_source()) {
    clear_property();
    set_has_source();
    property_.source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.source)
}
#if LANG_CXX11
inline void CmdMsg_ImageProperty::set_source(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.source)
  if (!has_source()) {
    clear_property();
    set_has_source();
    property_.source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ImageProperty.source)
}
#endif
inline void CmdMsg_ImageProperty::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_source()) {
    clear_property();
    set_has_source();
    property_.source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ImageProperty.source)
}
inline void CmdMsg_ImageProperty::set_source(const char* value, size_t size) {
  if (!has_source()) {
    clear_property();
    set_has_source();
    property_.source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ImageProperty.source)
}
inline ::std::string* CmdMsg_ImageProperty::mutable_source() {
  if (!has_source()) {
    clear_property();
    set_has_source();
    property_.source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ImageProperty.source)
  return property_.source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ImageProperty::release_source() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ImageProperty.source)
  if (has_source()) {
    clear_has_property();
    return property_.source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ImageProperty::set_allocated_source(::std::string* source) {
  if (!has_source()) {
    property_.source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (source != NULL) {
    set_has_source();
    property_.source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ImageProperty.source)
}

// .HaWC.CmdMsg.FillMode fillMode = 7;
inline bool CmdMsg_ImageProperty::has_fillmode() const {
  return property_case() == kFillMode;
}
inline void CmdMsg_ImageProperty::set_has_fillmode() {
  _oneof_case_[0] = kFillMode;
}
inline void CmdMsg_ImageProperty::clear_fillmode() {
  if (has_fillmode()) {
    property_.fillmode_ = 0;
    clear_has_property();
  }
}
inline ::HaWC::CmdMsg_FillMode CmdMsg_ImageProperty::fillmode() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.fillMode)
  if (has_fillmode()) {
    return static_cast< ::HaWC::CmdMsg_FillMode >(property_.fillmode_);
  }
  return static_cast< ::HaWC::CmdMsg_FillMode >(0);
}
inline void CmdMsg_ImageProperty::set_fillmode(::HaWC::CmdMsg_FillMode value) {
  if (!has_fillmode()) {
    clear_property();
    set_has_fillmode();
  }
  property_.fillmode_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.fillMode)
}

// float opacity = 8;
inline bool CmdMsg_ImageProperty::has_opacity() const {
  return property_case() == kOpacity;
}
inline void CmdMsg_ImageProperty::set_has_opacity() {
  _oneof_case_[0] = kOpacity;
}
inline void CmdMsg_ImageProperty::clear_opacity() {
  if (has_opacity()) {
    property_.opacity_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ImageProperty::opacity() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.opacity)
  if (has_opacity()) {
    return property_.opacity_;
  }
  return 0;
}
inline void CmdMsg_ImageProperty::set_opacity(float value) {
  if (!has_opacity()) {
    clear_property();
    set_has_opacity();
  }
  property_.opacity_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.opacity)
}

// float rotation = 9;
inline bool CmdMsg_ImageProperty::has_rotation() const {
  return property_case() == kRotation;
}
inline void CmdMsg_ImageProperty::set_has_rotation() {
  _oneof_case_[0] = kRotation;
}
inline void CmdMsg_ImageProperty::clear_rotation() {
  if (has_rotation()) {
    property_.rotation_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ImageProperty::rotation() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperty.rotation)
  if (has_rotation()) {
    return property_.rotation_;
  }
  return 0;
}
inline void CmdMsg_ImageProperty::set_rotation(float value) {
  if (!has_rotation()) {
    clear_property();
    set_has_rotation();
  }
  property_.rotation_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ImageProperty.rotation)
}

inline bool CmdMsg_ImageProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_ImageProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_ImageProperty::PropertyCase CmdMsg_ImageProperty::property_case() const {
  return CmdMsg_ImageProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_ImageProperties

// repeated .HaWC.CmdMsg.ImageProperty properties = 2;
inline int CmdMsg_ImageProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_ImageProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_ImageProperty* CmdMsg_ImageProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ImageProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ImageProperty >*
CmdMsg_ImageProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.ImageProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_ImageProperty& CmdMsg_ImageProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ImageProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_ImageProperty* CmdMsg_ImageProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.ImageProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ImageProperty >&
CmdMsg_ImageProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.ImageProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_FileListProperty

// string item = 1;
inline bool CmdMsg_FileListProperty::has_item() const {
  return property_case() == kItem;
}
inline void CmdMsg_FileListProperty::set_has_item() {
  _oneof_case_[0] = kItem;
}
inline void CmdMsg_FileListProperty::clear_item() {
  if (has_item()) {
    property_.item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_FileListProperty::item() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.FileListProperty.item)
  if (has_item()) {
    return property_.item_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_FileListProperty::set_item(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.FileListProperty.item)
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.FileListProperty.item)
}
#if LANG_CXX11
inline void CmdMsg_FileListProperty::set_item(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.FileListProperty.item)
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.FileListProperty.item)
}
#endif
inline void CmdMsg_FileListProperty::set_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.FileListProperty.item)
}
inline void CmdMsg_FileListProperty::set_item(const char* value, size_t size) {
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.FileListProperty.item)
}
inline ::std::string* CmdMsg_FileListProperty::mutable_item() {
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.FileListProperty.item)
  return property_.item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_FileListProperty::release_item() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.FileListProperty.item)
  if (has_item()) {
    clear_has_property();
    return property_.item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_FileListProperty::set_allocated_item(::std::string* item) {
  if (!has_item()) {
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (item != NULL) {
    set_has_item();
    property_.item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.FileListProperty.item)
}

inline bool CmdMsg_FileListProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_FileListProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_FileListProperty::PropertyCase CmdMsg_FileListProperty::property_case() const {
  return CmdMsg_FileListProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_FileListProperties

// repeated .HaWC.CmdMsg.FileListProperty properties = 2;
inline int CmdMsg_FileListProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_FileListProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_FileListProperty* CmdMsg_FileListProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.FileListProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_FileListProperty >*
CmdMsg_FileListProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.FileListProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_FileListProperty& CmdMsg_FileListProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.FileListProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_FileListProperty* CmdMsg_FileListProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.FileListProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_FileListProperty >&
CmdMsg_FileListProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.FileListProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_ToolBarProperty

// bool visible = 1;
inline bool CmdMsg_ToolBarProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_ToolBarProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_ToolBarProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_ToolBarProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_ToolBarProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.visible)
}

// float x = 2;
inline bool CmdMsg_ToolBarProperty::has_x() const {
  return property_case() == kX;
}
inline void CmdMsg_ToolBarProperty::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void CmdMsg_ToolBarProperty::clear_x() {
  if (has_x()) {
    property_.x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ToolBarProperty::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.x)
  if (has_x()) {
    return property_.x_;
  }
  return 0;
}
inline void CmdMsg_ToolBarProperty::set_x(float value) {
  if (!has_x()) {
    clear_property();
    set_has_x();
  }
  property_.x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.x)
}

// float y = 3;
inline bool CmdMsg_ToolBarProperty::has_y() const {
  return property_case() == kY;
}
inline void CmdMsg_ToolBarProperty::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void CmdMsg_ToolBarProperty::clear_y() {
  if (has_y()) {
    property_.y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ToolBarProperty::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.y)
  if (has_y()) {
    return property_.y_;
  }
  return 0;
}
inline void CmdMsg_ToolBarProperty::set_y(float value) {
  if (!has_y()) {
    clear_property();
    set_has_y();
  }
  property_.y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.y)
}

// float width = 4;
inline bool CmdMsg_ToolBarProperty::has_width() const {
  return property_case() == kWidth;
}
inline void CmdMsg_ToolBarProperty::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void CmdMsg_ToolBarProperty::clear_width() {
  if (has_width()) {
    property_.width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ToolBarProperty::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.width)
  if (has_width()) {
    return property_.width_;
  }
  return 0;
}
inline void CmdMsg_ToolBarProperty::set_width(float value) {
  if (!has_width()) {
    clear_property();
    set_has_width();
  }
  property_.width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.width)
}

// float height = 5;
inline bool CmdMsg_ToolBarProperty::has_height() const {
  return property_case() == kHeight;
}
inline void CmdMsg_ToolBarProperty::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void CmdMsg_ToolBarProperty::clear_height() {
  if (has_height()) {
    property_.height_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_ToolBarProperty::height() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.height)
  if (has_height()) {
    return property_.height_;
  }
  return 0;
}
inline void CmdMsg_ToolBarProperty::set_height(float value) {
  if (!has_height()) {
    clear_property();
    set_has_height();
  }
  property_.height_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.height)
}

// string options___ = 6;
inline bool CmdMsg_ToolBarProperty::has_options___() const {
  return property_case() == kOptions;
}
inline void CmdMsg_ToolBarProperty::set_has_options___() {
  _oneof_case_[0] = kOptions;
}
inline void CmdMsg_ToolBarProperty::clear_options___() {
  if (has_options___()) {
    property_.options____.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_ToolBarProperty::options___() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.options___)
  if (has_options___()) {
    return property_.options____.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ToolBarProperty::set_options___(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.options___)
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.options___)
}
#if LANG_CXX11
inline void CmdMsg_ToolBarProperty::set_options___(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.options___)
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ToolBarProperty.options___)
}
#endif
inline void CmdMsg_ToolBarProperty::set_options___(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ToolBarProperty.options___)
}
inline void CmdMsg_ToolBarProperty::set_options___(const char* value, size_t size) {
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ToolBarProperty.options___)
}
inline ::std::string* CmdMsg_ToolBarProperty::mutable_options___() {
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ToolBarProperty.options___)
  return property_.options____.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ToolBarProperty::release_options___() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ToolBarProperty.options___)
  if (has_options___()) {
    clear_has_property();
    return property_.options____.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ToolBarProperty::set_allocated_options___(::std::string* options___) {
  if (!has_options___()) {
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (options___ != NULL) {
    set_has_options___();
    property_.options____.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options___);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ToolBarProperty.options___)
}

// uint32 iconsSpacing = 7;
inline bool CmdMsg_ToolBarProperty::has_iconsspacing() const {
  return property_case() == kIconsSpacing;
}
inline void CmdMsg_ToolBarProperty::set_has_iconsspacing() {
  _oneof_case_[0] = kIconsSpacing;
}
inline void CmdMsg_ToolBarProperty::clear_iconsspacing() {
  if (has_iconsspacing()) {
    property_.iconsspacing_ = 0u;
    clear_has_property();
  }
}
inline ::google::protobuf::uint32 CmdMsg_ToolBarProperty::iconsspacing() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.iconsSpacing)
  if (has_iconsspacing()) {
    return property_.iconsspacing_;
  }
  return 0u;
}
inline void CmdMsg_ToolBarProperty::set_iconsspacing(::google::protobuf::uint32 value) {
  if (!has_iconsspacing()) {
    clear_property();
    set_has_iconsspacing();
  }
  property_.iconsspacing_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.iconsSpacing)
}

// uint32 margins = 8;
inline bool CmdMsg_ToolBarProperty::has_margins() const {
  return property_case() == kMargins;
}
inline void CmdMsg_ToolBarProperty::set_has_margins() {
  _oneof_case_[0] = kMargins;
}
inline void CmdMsg_ToolBarProperty::clear_margins() {
  if (has_margins()) {
    property_.margins_ = 0u;
    clear_has_property();
  }
}
inline ::google::protobuf::uint32 CmdMsg_ToolBarProperty::margins() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.margins)
  if (has_margins()) {
    return property_.margins_;
  }
  return 0u;
}
inline void CmdMsg_ToolBarProperty::set_margins(::google::protobuf::uint32 value) {
  if (!has_margins()) {
    clear_property();
    set_has_margins();
  }
  property_.margins_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.margins)
}

// bool isVertical = 9;
inline bool CmdMsg_ToolBarProperty::has_isvertical() const {
  return property_case() == kIsVertical;
}
inline void CmdMsg_ToolBarProperty::set_has_isvertical() {
  _oneof_case_[0] = kIsVertical;
}
inline void CmdMsg_ToolBarProperty::clear_isvertical() {
  if (has_isvertical()) {
    property_.isvertical_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_ToolBarProperty::isvertical() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.isVertical)
  if (has_isvertical()) {
    return property_.isvertical_;
  }
  return false;
}
inline void CmdMsg_ToolBarProperty::set_isvertical(bool value) {
  if (!has_isvertical()) {
    clear_property();
    set_has_isvertical();
  }
  property_.isvertical_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.isVertical)
}

// string backColor = 10;
inline bool CmdMsg_ToolBarProperty::has_backcolor() const {
  return property_case() == kBackColor;
}
inline void CmdMsg_ToolBarProperty::set_has_backcolor() {
  _oneof_case_[0] = kBackColor;
}
inline void CmdMsg_ToolBarProperty::clear_backcolor() {
  if (has_backcolor()) {
    property_.backcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_ToolBarProperty::backcolor() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.backColor)
  if (has_backcolor()) {
    return property_.backcolor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ToolBarProperty::set_backcolor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.backColor)
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.backColor)
}
#if LANG_CXX11
inline void CmdMsg_ToolBarProperty::set_backcolor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.backColor)
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ToolBarProperty.backColor)
}
#endif
inline void CmdMsg_ToolBarProperty::set_backcolor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ToolBarProperty.backColor)
}
inline void CmdMsg_ToolBarProperty::set_backcolor(const char* value, size_t size) {
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ToolBarProperty.backColor)
}
inline ::std::string* CmdMsg_ToolBarProperty::mutable_backcolor() {
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ToolBarProperty.backColor)
  return property_.backcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ToolBarProperty::release_backcolor() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ToolBarProperty.backColor)
  if (has_backcolor()) {
    clear_has_property();
    return property_.backcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ToolBarProperty::set_allocated_backcolor(::std::string* backcolor) {
  if (!has_backcolor()) {
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (backcolor != NULL) {
    set_has_backcolor();
    property_.backcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backcolor);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ToolBarProperty.backColor)
}

// int32 selected = 11;
inline bool CmdMsg_ToolBarProperty::has_selected() const {
  return property_case() == kSelected;
}
inline void CmdMsg_ToolBarProperty::set_has_selected() {
  _oneof_case_[0] = kSelected;
}
inline void CmdMsg_ToolBarProperty::clear_selected() {
  if (has_selected()) {
    property_.selected_ = 0;
    clear_has_property();
  }
}
inline ::google::protobuf::int32 CmdMsg_ToolBarProperty::selected() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.selected)
  if (has_selected()) {
    return property_.selected_;
  }
  return 0;
}
inline void CmdMsg_ToolBarProperty::set_selected(::google::protobuf::int32 value) {
  if (!has_selected()) {
    clear_property();
    set_has_selected();
  }
  property_.selected_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selected)
}

// string selectedColor = 12;
inline bool CmdMsg_ToolBarProperty::has_selectedcolor() const {
  return property_case() == kSelectedColor;
}
inline void CmdMsg_ToolBarProperty::set_has_selectedcolor() {
  _oneof_case_[0] = kSelectedColor;
}
inline void CmdMsg_ToolBarProperty::clear_selectedcolor() {
  if (has_selectedcolor()) {
    property_.selectedcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_ToolBarProperty::selectedcolor() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.selectedColor)
  if (has_selectedcolor()) {
    return property_.selectedcolor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ToolBarProperty::set_selectedcolor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedColor)
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedColor)
}
#if LANG_CXX11
inline void CmdMsg_ToolBarProperty::set_selectedcolor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedColor)
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ToolBarProperty.selectedColor)
}
#endif
inline void CmdMsg_ToolBarProperty::set_selectedcolor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ToolBarProperty.selectedColor)
}
inline void CmdMsg_ToolBarProperty::set_selectedcolor(const char* value, size_t size) {
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ToolBarProperty.selectedColor)
}
inline ::std::string* CmdMsg_ToolBarProperty::mutable_selectedcolor() {
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ToolBarProperty.selectedColor)
  return property_.selectedcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ToolBarProperty::release_selectedcolor() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ToolBarProperty.selectedColor)
  if (has_selectedcolor()) {
    clear_has_property();
    return property_.selectedcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ToolBarProperty::set_allocated_selectedcolor(::std::string* selectedcolor) {
  if (!has_selectedcolor()) {
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (selectedcolor != NULL) {
    set_has_selectedcolor();
    property_.selectedcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selectedcolor);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ToolBarProperty.selectedColor)
}

// string selectedBorderColor = 13;
inline bool CmdMsg_ToolBarProperty::has_selectedbordercolor() const {
  return property_case() == kSelectedBorderColor;
}
inline void CmdMsg_ToolBarProperty::set_has_selectedbordercolor() {
  _oneof_case_[0] = kSelectedBorderColor;
}
inline void CmdMsg_ToolBarProperty::clear_selectedbordercolor() {
  if (has_selectedbordercolor()) {
    property_.selectedbordercolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_ToolBarProperty::selectedbordercolor() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
  if (has_selectedbordercolor()) {
    return property_.selectedbordercolor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ToolBarProperty::set_selectedbordercolor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
  if (!has_selectedbordercolor()) {
    clear_property();
    set_has_selectedbordercolor();
    property_.selectedbordercolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedbordercolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
}
#if LANG_CXX11
inline void CmdMsg_ToolBarProperty::set_selectedbordercolor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
  if (!has_selectedbordercolor()) {
    clear_property();
    set_has_selectedbordercolor();
    property_.selectedbordercolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedbordercolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
}
#endif
inline void CmdMsg_ToolBarProperty::set_selectedbordercolor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_selectedbordercolor()) {
    clear_property();
    set_has_selectedbordercolor();
    property_.selectedbordercolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedbordercolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
}
inline void CmdMsg_ToolBarProperty::set_selectedbordercolor(const char* value, size_t size) {
  if (!has_selectedbordercolor()) {
    clear_property();
    set_has_selectedbordercolor();
    property_.selectedbordercolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedbordercolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
}
inline ::std::string* CmdMsg_ToolBarProperty::mutable_selectedbordercolor() {
  if (!has_selectedbordercolor()) {
    clear_property();
    set_has_selectedbordercolor();
    property_.selectedbordercolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
  return property_.selectedbordercolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ToolBarProperty::release_selectedbordercolor() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
  if (has_selectedbordercolor()) {
    clear_has_property();
    return property_.selectedbordercolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ToolBarProperty::set_allocated_selectedbordercolor(::std::string* selectedbordercolor) {
  if (!has_selectedbordercolor()) {
    property_.selectedbordercolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (selectedbordercolor != NULL) {
    set_has_selectedbordercolor();
    property_.selectedbordercolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selectedbordercolor);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ToolBarProperty.selectedBorderColor)
}

// int32 selectedBorderWidth = 14;
inline bool CmdMsg_ToolBarProperty::has_selectedborderwidth() const {
  return property_case() == kSelectedBorderWidth;
}
inline void CmdMsg_ToolBarProperty::set_has_selectedborderwidth() {
  _oneof_case_[0] = kSelectedBorderWidth;
}
inline void CmdMsg_ToolBarProperty::clear_selectedborderwidth() {
  if (has_selectedborderwidth()) {
    property_.selectedborderwidth_ = 0;
    clear_has_property();
  }
}
inline ::google::protobuf::int32 CmdMsg_ToolBarProperty::selectedborderwidth() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperty.selectedBorderWidth)
  if (has_selectedborderwidth()) {
    return property_.selectedborderwidth_;
  }
  return 0;
}
inline void CmdMsg_ToolBarProperty::set_selectedborderwidth(::google::protobuf::int32 value) {
  if (!has_selectedborderwidth()) {
    clear_property();
    set_has_selectedborderwidth();
  }
  property_.selectedborderwidth_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ToolBarProperty.selectedBorderWidth)
}

inline bool CmdMsg_ToolBarProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_ToolBarProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_ToolBarProperty::PropertyCase CmdMsg_ToolBarProperty::property_case() const {
  return CmdMsg_ToolBarProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_ListProperty

// string item = 1;
inline bool CmdMsg_ListProperty::has_item() const {
  return property_case() == kItem;
}
inline void CmdMsg_ListProperty::set_has_item() {
  _oneof_case_[0] = kItem;
}
inline void CmdMsg_ListProperty::clear_item() {
  if (has_item()) {
    property_.item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_ListProperty::item() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ListProperty.item)
  if (has_item()) {
    return property_.item_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_ListProperty::set_item(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ListProperty.item)
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ListProperty.item)
}
#if LANG_CXX11
inline void CmdMsg_ListProperty::set_item(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.ListProperty.item)
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.ListProperty.item)
}
#endif
inline void CmdMsg_ListProperty::set_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.ListProperty.item)
}
inline void CmdMsg_ListProperty::set_item(const char* value, size_t size) {
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.ListProperty.item)
}
inline ::std::string* CmdMsg_ListProperty::mutable_item() {
  if (!has_item()) {
    clear_property();
    set_has_item();
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ListProperty.item)
  return property_.item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_ListProperty::release_item() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ListProperty.item)
  if (has_item()) {
    clear_has_property();
    return property_.item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_ListProperty::set_allocated_item(::std::string* item) {
  if (!has_item()) {
    property_.item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (item != NULL) {
    set_has_item();
    property_.item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.ListProperty.item)
}

inline bool CmdMsg_ListProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_ListProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_ListProperty::PropertyCase CmdMsg_ListProperty::property_case() const {
  return CmdMsg_ListProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_ListProperties

// repeated .HaWC.CmdMsg.ListProperty properties = 2;
inline int CmdMsg_ListProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_ListProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_ListProperty* CmdMsg_ListProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ListProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ListProperty >*
CmdMsg_ListProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.ListProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_ListProperty& CmdMsg_ListProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ListProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_ListProperty* CmdMsg_ListProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.ListProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ListProperty >&
CmdMsg_ListProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.ListProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_ToolBarProperties

// repeated .HaWC.CmdMsg.ToolBarProperty properties = 2;
inline int CmdMsg_ToolBarProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_ToolBarProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_ToolBarProperty* CmdMsg_ToolBarProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ToolBarProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ToolBarProperty >*
CmdMsg_ToolBarProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.ToolBarProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_ToolBarProperty& CmdMsg_ToolBarProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ToolBarProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_ToolBarProperty* CmdMsg_ToolBarProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.ToolBarProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_ToolBarProperty >&
CmdMsg_ToolBarProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.ToolBarProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_MenuProperty

// bool visible = 1;
inline bool CmdMsg_MenuProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_MenuProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_MenuProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_MenuProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_MenuProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.visible)
}

// float x = 2;
inline bool CmdMsg_MenuProperty::has_x() const {
  return property_case() == kX;
}
inline void CmdMsg_MenuProperty::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void CmdMsg_MenuProperty::clear_x() {
  if (has_x()) {
    property_.x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_MenuProperty::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.x)
  if (has_x()) {
    return property_.x_;
  }
  return 0;
}
inline void CmdMsg_MenuProperty::set_x(float value) {
  if (!has_x()) {
    clear_property();
    set_has_x();
  }
  property_.x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.x)
}

// float y = 3;
inline bool CmdMsg_MenuProperty::has_y() const {
  return property_case() == kY;
}
inline void CmdMsg_MenuProperty::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void CmdMsg_MenuProperty::clear_y() {
  if (has_y()) {
    property_.y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_MenuProperty::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.y)
  if (has_y()) {
    return property_.y_;
  }
  return 0;
}
inline void CmdMsg_MenuProperty::set_y(float value) {
  if (!has_y()) {
    clear_property();
    set_has_y();
  }
  property_.y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.y)
}

// float width = 4;
inline bool CmdMsg_MenuProperty::has_width() const {
  return property_case() == kWidth;
}
inline void CmdMsg_MenuProperty::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void CmdMsg_MenuProperty::clear_width() {
  if (has_width()) {
    property_.width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_MenuProperty::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.width)
  if (has_width()) {
    return property_.width_;
  }
  return 0;
}
inline void CmdMsg_MenuProperty::set_width(float value) {
  if (!has_width()) {
    clear_property();
    set_has_width();
  }
  property_.width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.width)
}

// float itemHeight = 5;
inline bool CmdMsg_MenuProperty::has_itemheight() const {
  return property_case() == kItemHeight;
}
inline void CmdMsg_MenuProperty::set_has_itemheight() {
  _oneof_case_[0] = kItemHeight;
}
inline void CmdMsg_MenuProperty::clear_itemheight() {
  if (has_itemheight()) {
    property_.itemheight_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_MenuProperty::itemheight() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.itemHeight)
  if (has_itemheight()) {
    return property_.itemheight_;
  }
  return 0;
}
inline void CmdMsg_MenuProperty::set_itemheight(float value) {
  if (!has_itemheight()) {
    clear_property();
    set_has_itemheight();
  }
  property_.itemheight_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.itemHeight)
}

// string options___ = 6;
inline bool CmdMsg_MenuProperty::has_options___() const {
  return property_case() == kOptions;
}
inline void CmdMsg_MenuProperty::set_has_options___() {
  _oneof_case_[0] = kOptions;
}
inline void CmdMsg_MenuProperty::clear_options___() {
  if (has_options___()) {
    property_.options____.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_MenuProperty::options___() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.options___)
  if (has_options___()) {
    return property_.options____.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_MenuProperty::set_options___(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.options___)
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.options___)
}
#if LANG_CXX11
inline void CmdMsg_MenuProperty::set_options___(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.options___)
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.MenuProperty.options___)
}
#endif
inline void CmdMsg_MenuProperty::set_options___(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.MenuProperty.options___)
}
inline void CmdMsg_MenuProperty::set_options___(const char* value, size_t size) {
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.options____.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.MenuProperty.options___)
}
inline ::std::string* CmdMsg_MenuProperty::mutable_options___() {
  if (!has_options___()) {
    clear_property();
    set_has_options___();
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.MenuProperty.options___)
  return property_.options____.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_MenuProperty::release_options___() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.MenuProperty.options___)
  if (has_options___()) {
    clear_has_property();
    return property_.options____.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_MenuProperty::set_allocated_options___(::std::string* options___) {
  if (!has_options___()) {
    property_.options____.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (options___ != NULL) {
    set_has_options___();
    property_.options____.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options___);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.MenuProperty.options___)
}

// bool highlightText = 7;
inline bool CmdMsg_MenuProperty::has_highlighttext() const {
  return property_case() == kHighlightText;
}
inline void CmdMsg_MenuProperty::set_has_highlighttext() {
  _oneof_case_[0] = kHighlightText;
}
inline void CmdMsg_MenuProperty::clear_highlighttext() {
  if (has_highlighttext()) {
    property_.highlighttext_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_MenuProperty::highlighttext() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.highlightText)
  if (has_highlighttext()) {
    return property_.highlighttext_;
  }
  return false;
}
inline void CmdMsg_MenuProperty::set_highlighttext(bool value) {
  if (!has_highlighttext()) {
    clear_property();
    set_has_highlighttext();
  }
  property_.highlighttext_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.highlightText)
}

// string backColor = 8;
inline bool CmdMsg_MenuProperty::has_backcolor() const {
  return property_case() == kBackColor;
}
inline void CmdMsg_MenuProperty::set_has_backcolor() {
  _oneof_case_[0] = kBackColor;
}
inline void CmdMsg_MenuProperty::clear_backcolor() {
  if (has_backcolor()) {
    property_.backcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_MenuProperty::backcolor() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.backColor)
  if (has_backcolor()) {
    return property_.backcolor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_MenuProperty::set_backcolor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.backColor)
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.backColor)
}
#if LANG_CXX11
inline void CmdMsg_MenuProperty::set_backcolor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.backColor)
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.MenuProperty.backColor)
}
#endif
inline void CmdMsg_MenuProperty::set_backcolor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.MenuProperty.backColor)
}
inline void CmdMsg_MenuProperty::set_backcolor(const char* value, size_t size) {
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.backcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.MenuProperty.backColor)
}
inline ::std::string* CmdMsg_MenuProperty::mutable_backcolor() {
  if (!has_backcolor()) {
    clear_property();
    set_has_backcolor();
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.MenuProperty.backColor)
  return property_.backcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_MenuProperty::release_backcolor() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.MenuProperty.backColor)
  if (has_backcolor()) {
    clear_has_property();
    return property_.backcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_MenuProperty::set_allocated_backcolor(::std::string* backcolor) {
  if (!has_backcolor()) {
    property_.backcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (backcolor != NULL) {
    set_has_backcolor();
    property_.backcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backcolor);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.MenuProperty.backColor)
}

// string textColor = 9;
inline bool CmdMsg_MenuProperty::has_textcolor() const {
  return property_case() == kTextColor;
}
inline void CmdMsg_MenuProperty::set_has_textcolor() {
  _oneof_case_[0] = kTextColor;
}
inline void CmdMsg_MenuProperty::clear_textcolor() {
  if (has_textcolor()) {
    property_.textcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_MenuProperty::textcolor() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.textColor)
  if (has_textcolor()) {
    return property_.textcolor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_MenuProperty::set_textcolor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.textColor)
  if (!has_textcolor()) {
    clear_property();
    set_has_textcolor();
    property_.textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.textcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.textColor)
}
#if LANG_CXX11
inline void CmdMsg_MenuProperty::set_textcolor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.textColor)
  if (!has_textcolor()) {
    clear_property();
    set_has_textcolor();
    property_.textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.textcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.MenuProperty.textColor)
}
#endif
inline void CmdMsg_MenuProperty::set_textcolor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_textcolor()) {
    clear_property();
    set_has_textcolor();
    property_.textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.textcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.MenuProperty.textColor)
}
inline void CmdMsg_MenuProperty::set_textcolor(const char* value, size_t size) {
  if (!has_textcolor()) {
    clear_property();
    set_has_textcolor();
    property_.textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.textcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.MenuProperty.textColor)
}
inline ::std::string* CmdMsg_MenuProperty::mutable_textcolor() {
  if (!has_textcolor()) {
    clear_property();
    set_has_textcolor();
    property_.textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.MenuProperty.textColor)
  return property_.textcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_MenuProperty::release_textcolor() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.MenuProperty.textColor)
  if (has_textcolor()) {
    clear_has_property();
    return property_.textcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_MenuProperty::set_allocated_textcolor(::std::string* textcolor) {
  if (!has_textcolor()) {
    property_.textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (textcolor != NULL) {
    set_has_textcolor();
    property_.textcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), textcolor);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.MenuProperty.textColor)
}

// string selectedColor = 10;
inline bool CmdMsg_MenuProperty::has_selectedcolor() const {
  return property_case() == kSelectedColor;
}
inline void CmdMsg_MenuProperty::set_has_selectedcolor() {
  _oneof_case_[0] = kSelectedColor;
}
inline void CmdMsg_MenuProperty::clear_selectedcolor() {
  if (has_selectedcolor()) {
    property_.selectedcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_MenuProperty::selectedcolor() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.selectedColor)
  if (has_selectedcolor()) {
    return property_.selectedcolor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_MenuProperty::set_selectedcolor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.selectedColor)
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.selectedColor)
}
#if LANG_CXX11
inline void CmdMsg_MenuProperty::set_selectedcolor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.selectedColor)
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.MenuProperty.selectedColor)
}
#endif
inline void CmdMsg_MenuProperty::set_selectedcolor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.MenuProperty.selectedColor)
}
inline void CmdMsg_MenuProperty::set_selectedcolor(const char* value, size_t size) {
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.selectedcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.MenuProperty.selectedColor)
}
inline ::std::string* CmdMsg_MenuProperty::mutable_selectedcolor() {
  if (!has_selectedcolor()) {
    clear_property();
    set_has_selectedcolor();
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.MenuProperty.selectedColor)
  return property_.selectedcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_MenuProperty::release_selectedcolor() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.MenuProperty.selectedColor)
  if (has_selectedcolor()) {
    clear_has_property();
    return property_.selectedcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_MenuProperty::set_allocated_selectedcolor(::std::string* selectedcolor) {
  if (!has_selectedcolor()) {
    property_.selectedcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (selectedcolor != NULL) {
    set_has_selectedcolor();
    property_.selectedcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selectedcolor);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.MenuProperty.selectedColor)
}

// int32 selected = 11;
inline bool CmdMsg_MenuProperty::has_selected() const {
  return property_case() == kSelected;
}
inline void CmdMsg_MenuProperty::set_has_selected() {
  _oneof_case_[0] = kSelected;
}
inline void CmdMsg_MenuProperty::clear_selected() {
  if (has_selected()) {
    property_.selected_ = 0;
    clear_has_property();
  }
}
inline ::google::protobuf::int32 CmdMsg_MenuProperty::selected() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperty.selected)
  if (has_selected()) {
    return property_.selected_;
  }
  return 0;
}
inline void CmdMsg_MenuProperty::set_selected(::google::protobuf::int32 value) {
  if (!has_selected()) {
    clear_property();
    set_has_selected();
  }
  property_.selected_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.MenuProperty.selected)
}

inline bool CmdMsg_MenuProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_MenuProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_MenuProperty::PropertyCase CmdMsg_MenuProperty::property_case() const {
  return CmdMsg_MenuProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_MenuProperties

// repeated .HaWC.CmdMsg.MenuProperty properties = 2;
inline int CmdMsg_MenuProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_MenuProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_MenuProperty* CmdMsg_MenuProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.MenuProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_MenuProperty >*
CmdMsg_MenuProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.MenuProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_MenuProperty& CmdMsg_MenuProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.MenuProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_MenuProperty* CmdMsg_MenuProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.MenuProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_MenuProperty >&
CmdMsg_MenuProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.MenuProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_LabelProperty

// bool visible = 1;
inline bool CmdMsg_LabelProperty::has_visible() const {
  return property_case() == kVisible;
}
inline void CmdMsg_LabelProperty::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void CmdMsg_LabelProperty::clear_visible() {
  if (has_visible()) {
    property_.visible_ = false;
    clear_has_property();
  }
}
inline bool CmdMsg_LabelProperty::visible() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.visible)
  if (has_visible()) {
    return property_.visible_;
  }
  return false;
}
inline void CmdMsg_LabelProperty::set_visible(bool value) {
  if (!has_visible()) {
    clear_property();
    set_has_visible();
  }
  property_.visible_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.visible)
}

// float x = 2;
inline bool CmdMsg_LabelProperty::has_x() const {
  return property_case() == kX;
}
inline void CmdMsg_LabelProperty::set_has_x() {
  _oneof_case_[0] = kX;
}
inline void CmdMsg_LabelProperty::clear_x() {
  if (has_x()) {
    property_.x_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.x)
  if (has_x()) {
    return property_.x_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_x(float value) {
  if (!has_x()) {
    clear_property();
    set_has_x();
  }
  property_.x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.x)
}

// float y = 3;
inline bool CmdMsg_LabelProperty::has_y() const {
  return property_case() == kY;
}
inline void CmdMsg_LabelProperty::set_has_y() {
  _oneof_case_[0] = kY;
}
inline void CmdMsg_LabelProperty::clear_y() {
  if (has_y()) {
    property_.y_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.y)
  if (has_y()) {
    return property_.y_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_y(float value) {
  if (!has_y()) {
    clear_property();
    set_has_y();
  }
  property_.y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.y)
}

// float width = 4;
inline bool CmdMsg_LabelProperty::has_width() const {
  return property_case() == kWidth;
}
inline void CmdMsg_LabelProperty::set_has_width() {
  _oneof_case_[0] = kWidth;
}
inline void CmdMsg_LabelProperty::clear_width() {
  if (has_width()) {
    property_.width_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.width)
  if (has_width()) {
    return property_.width_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_width(float value) {
  if (!has_width()) {
    clear_property();
    set_has_width();
  }
  property_.width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.width)
}

// float height = 5;
inline bool CmdMsg_LabelProperty::has_height() const {
  return property_case() == kHeight;
}
inline void CmdMsg_LabelProperty::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void CmdMsg_LabelProperty::clear_height() {
  if (has_height()) {
    property_.height_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::height() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.height)
  if (has_height()) {
    return property_.height_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_height(float value) {
  if (!has_height()) {
    clear_property();
    set_has_height();
  }
  property_.height_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.height)
}

// string text = 6;
inline bool CmdMsg_LabelProperty::has_text() const {
  return property_case() == kText;
}
inline void CmdMsg_LabelProperty::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void CmdMsg_LabelProperty::clear_text() {
  if (has_text()) {
    property_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_LabelProperty::text() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.text)
  if (has_text()) {
    return property_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_LabelProperty::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.text)
  if (!has_text()) {
    clear_property();
    set_has_text();
    property_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.text)
}
#if LANG_CXX11
inline void CmdMsg_LabelProperty::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.text)
  if (!has_text()) {
    clear_property();
    set_has_text();
    property_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LabelProperty.text)
}
#endif
inline void CmdMsg_LabelProperty::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_text()) {
    clear_property();
    set_has_text();
    property_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LabelProperty.text)
}
inline void CmdMsg_LabelProperty::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_property();
    set_has_text();
    property_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LabelProperty.text)
}
inline ::std::string* CmdMsg_LabelProperty::mutable_text() {
  if (!has_text()) {
    clear_property();
    set_has_text();
    property_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LabelProperty.text)
  return property_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LabelProperty::release_text() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LabelProperty.text)
  if (has_text()) {
    clear_has_property();
    return property_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_LabelProperty::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    property_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (text != NULL) {
    set_has_text();
    property_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LabelProperty.text)
}

// string font_family = 7;
inline bool CmdMsg_LabelProperty::has_font_family() const {
  return property_case() == kFontFamily;
}
inline void CmdMsg_LabelProperty::set_has_font_family() {
  _oneof_case_[0] = kFontFamily;
}
inline void CmdMsg_LabelProperty::clear_font_family() {
  if (has_font_family()) {
    property_.font_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_LabelProperty::font_family() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.font_family)
  if (has_font_family()) {
    return property_.font_family_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_LabelProperty::set_font_family(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.font_family)
  if (!has_font_family()) {
    clear_property();
    set_has_font_family();
    property_.font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.font_family)
}
#if LANG_CXX11
inline void CmdMsg_LabelProperty::set_font_family(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.font_family)
  if (!has_font_family()) {
    clear_property();
    set_has_font_family();
    property_.font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LabelProperty.font_family)
}
#endif
inline void CmdMsg_LabelProperty::set_font_family(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_font_family()) {
    clear_property();
    set_has_font_family();
    property_.font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LabelProperty.font_family)
}
inline void CmdMsg_LabelProperty::set_font_family(const char* value, size_t size) {
  if (!has_font_family()) {
    clear_property();
    set_has_font_family();
    property_.font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.font_family_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LabelProperty.font_family)
}
inline ::std::string* CmdMsg_LabelProperty::mutable_font_family() {
  if (!has_font_family()) {
    clear_property();
    set_has_font_family();
    property_.font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LabelProperty.font_family)
  return property_.font_family_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LabelProperty::release_font_family() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LabelProperty.font_family)
  if (has_font_family()) {
    clear_has_property();
    return property_.font_family_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_LabelProperty::set_allocated_font_family(::std::string* font_family) {
  if (!has_font_family()) {
    property_.font_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (font_family != NULL) {
    set_has_font_family();
    property_.font_family_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_family);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LabelProperty.font_family)
}

// float font_pointSize = 8;
inline bool CmdMsg_LabelProperty::has_font_pointsize() const {
  return property_case() == kFontPointSize;
}
inline void CmdMsg_LabelProperty::set_has_font_pointsize() {
  _oneof_case_[0] = kFontPointSize;
}
inline void CmdMsg_LabelProperty::clear_font_pointsize() {
  if (has_font_pointsize()) {
    property_.font_pointsize_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::font_pointsize() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.font_pointSize)
  if (has_font_pointsize()) {
    return property_.font_pointsize_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_font_pointsize(float value) {
  if (!has_font_pointsize()) {
    clear_property();
    set_has_font_pointsize();
  }
  property_.font_pointsize_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.font_pointSize)
}

// string color = 9;
inline bool CmdMsg_LabelProperty::has_color() const {
  return property_case() == kColor;
}
inline void CmdMsg_LabelProperty::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void CmdMsg_LabelProperty::clear_color() {
  if (has_color()) {
    property_.color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_property();
  }
}
inline const ::std::string& CmdMsg_LabelProperty::color() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.color)
  if (has_color()) {
    return property_.color_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CmdMsg_LabelProperty::set_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.color)
}
#if LANG_CXX11
inline void CmdMsg_LabelProperty::set_color(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.color)
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LabelProperty.color)
}
#endif
inline void CmdMsg_LabelProperty::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LabelProperty.color)
}
inline void CmdMsg_LabelProperty::set_color(const char* value, size_t size) {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  property_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LabelProperty.color)
}
inline ::std::string* CmdMsg_LabelProperty::mutable_color() {
  if (!has_color()) {
    clear_property();
    set_has_color();
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LabelProperty.color)
  return property_.color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LabelProperty::release_color() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LabelProperty.color)
  if (has_color()) {
    clear_has_property();
    return property_.color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CmdMsg_LabelProperty::set_allocated_color(::std::string* color) {
  if (!has_color()) {
    property_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_property();
  if (color != NULL) {
    set_has_color();
    property_.color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LabelProperty.color)
}

// float opacity = 10;
inline bool CmdMsg_LabelProperty::has_opacity() const {
  return property_case() == kOpacity;
}
inline void CmdMsg_LabelProperty::set_has_opacity() {
  _oneof_case_[0] = kOpacity;
}
inline void CmdMsg_LabelProperty::clear_opacity() {
  if (has_opacity()) {
    property_.opacity_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::opacity() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.opacity)
  if (has_opacity()) {
    return property_.opacity_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_opacity(float value) {
  if (!has_opacity()) {
    clear_property();
    set_has_opacity();
  }
  property_.opacity_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.opacity)
}

// float rotation = 11;
inline bool CmdMsg_LabelProperty::has_rotation() const {
  return property_case() == kRotation;
}
inline void CmdMsg_LabelProperty::set_has_rotation() {
  _oneof_case_[0] = kRotation;
}
inline void CmdMsg_LabelProperty::clear_rotation() {
  if (has_rotation()) {
    property_.rotation_ = 0;
    clear_has_property();
  }
}
inline float CmdMsg_LabelProperty::rotation() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.rotation)
  if (has_rotation()) {
    return property_.rotation_;
  }
  return 0;
}
inline void CmdMsg_LabelProperty::set_rotation(float value) {
  if (!has_rotation()) {
    clear_property();
    set_has_rotation();
  }
  property_.rotation_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.rotation)
}

// .HaWC.CmdMsg.WrapMode wrapMode = 12;
inline bool CmdMsg_LabelProperty::has_wrapmode() const {
  return property_case() == kWrapMode;
}
inline void CmdMsg_LabelProperty::set_has_wrapmode() {
  _oneof_case_[0] = kWrapMode;
}
inline void CmdMsg_LabelProperty::clear_wrapmode() {
  if (has_wrapmode()) {
    property_.wrapmode_ = 0;
    clear_has_property();
  }
}
inline ::HaWC::CmdMsg_WrapMode CmdMsg_LabelProperty::wrapmode() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.wrapMode)
  if (has_wrapmode()) {
    return static_cast< ::HaWC::CmdMsg_WrapMode >(property_.wrapmode_);
  }
  return static_cast< ::HaWC::CmdMsg_WrapMode >(0);
}
inline void CmdMsg_LabelProperty::set_wrapmode(::HaWC::CmdMsg_WrapMode value) {
  if (!has_wrapmode()) {
    clear_property();
    set_has_wrapmode();
  }
  property_.wrapmode_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.wrapMode)
}

// .HaWC.CmdMsg.TextFormat textFormat = 13;
inline bool CmdMsg_LabelProperty::has_textformat() const {
  return property_case() == kTextFormat;
}
inline void CmdMsg_LabelProperty::set_has_textformat() {
  _oneof_case_[0] = kTextFormat;
}
inline void CmdMsg_LabelProperty::clear_textformat() {
  if (has_textformat()) {
    property_.textformat_ = 0;
    clear_has_property();
  }
}
inline ::HaWC::CmdMsg_TextFormat CmdMsg_LabelProperty::textformat() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperty.textFormat)
  if (has_textformat()) {
    return static_cast< ::HaWC::CmdMsg_TextFormat >(property_.textformat_);
  }
  return static_cast< ::HaWC::CmdMsg_TextFormat >(0);
}
inline void CmdMsg_LabelProperty::set_textformat(::HaWC::CmdMsg_TextFormat value) {
  if (!has_textformat()) {
    clear_property();
    set_has_textformat();
  }
  property_.textformat_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LabelProperty.textFormat)
}

inline bool CmdMsg_LabelProperty::has_property() const {
  return property_case() != PROPERTY_NOT_SET;
}
inline void CmdMsg_LabelProperty::clear_has_property() {
  _oneof_case_[0] = PROPERTY_NOT_SET;
}
inline CmdMsg_LabelProperty::PropertyCase CmdMsg_LabelProperty::property_case() const {
  return CmdMsg_LabelProperty::PropertyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_LabelProperties

// repeated .HaWC.CmdMsg.LabelProperty properties = 2;
inline int CmdMsg_LabelProperties::properties_size() const {
  return properties_.size();
}
inline void CmdMsg_LabelProperties::clear_properties() {
  properties_.Clear();
}
inline ::HaWC::CmdMsg_LabelProperty* CmdMsg_LabelProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LabelProperties.properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LabelProperty >*
CmdMsg_LabelProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.LabelProperties.properties)
  return &properties_;
}
inline const ::HaWC::CmdMsg_LabelProperty& CmdMsg_LabelProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LabelProperties.properties)
  return properties_.Get(index);
}
inline ::HaWC::CmdMsg_LabelProperty* CmdMsg_LabelProperties::add_properties() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.LabelProperties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_LabelProperty >&
CmdMsg_LabelProperties::properties() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.LabelProperties.properties)
  return properties_;
}

// -------------------------------------------------------------------

// CmdMsg_Component

// string objectName = 1;
inline void CmdMsg_Component::clear_objectname() {
  objectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_Component::objectname() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.objectName)
  return objectname_.GetNoArena();
}
inline void CmdMsg_Component::set_objectname(const ::std::string& value) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.Component.objectName)
}
#if LANG_CXX11
inline void CmdMsg_Component::set_objectname(::std::string&& value) {
  
  objectname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.Component.objectName)
}
#endif
inline void CmdMsg_Component::set_objectname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.Component.objectName)
}
inline void CmdMsg_Component::set_objectname(const char* value, size_t size) {
  
  objectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.Component.objectName)
}
inline ::std::string* CmdMsg_Component::mutable_objectname() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.objectName)
  return objectname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_Component::release_objectname() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.objectName)
  
  return objectname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_Component::set_allocated_objectname(::std::string* objectname) {
  if (objectname != NULL) {
    
  } else {
    
  }
  objectname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectname);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.Component.objectName)
}

// .HaWC.CmdMsg.LineProperties line = 2;
inline bool CmdMsg_Component::has_line() const {
  return properties_case() == kLine;
}
inline void CmdMsg_Component::set_has_line() {
  _oneof_case_[0] = kLine;
}
inline void CmdMsg_Component::clear_line() {
  if (has_line()) {
    delete properties_.line_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_LineProperties& CmdMsg_Component::_internal_line() const {
  return *properties_.line_;
}
inline ::HaWC::CmdMsg_LineProperties* CmdMsg_Component::release_line() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.line)
  if (has_line()) {
    clear_has_properties();
      ::HaWC::CmdMsg_LineProperties* temp = properties_.line_;
    properties_.line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_LineProperties& CmdMsg_Component::line() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.line)
  return has_line()
      ? *properties_.line_
      : *reinterpret_cast< ::HaWC::CmdMsg_LineProperties*>(&::HaWC::_CmdMsg_LineProperties_default_instance_);
}
inline ::HaWC::CmdMsg_LineProperties* CmdMsg_Component::mutable_line() {
  if (!has_line()) {
    clear_properties();
    set_has_line();
    properties_.line_ = CreateMaybeMessage< ::HaWC::CmdMsg_LineProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.line)
  return properties_.line_;
}

// .HaWC.CmdMsg.CircleProperties circle = 3;
inline bool CmdMsg_Component::has_circle() const {
  return properties_case() == kCircle;
}
inline void CmdMsg_Component::set_has_circle() {
  _oneof_case_[0] = kCircle;
}
inline void CmdMsg_Component::clear_circle() {
  if (has_circle()) {
    delete properties_.circle_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_CircleProperties& CmdMsg_Component::_internal_circle() const {
  return *properties_.circle_;
}
inline ::HaWC::CmdMsg_CircleProperties* CmdMsg_Component::release_circle() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.circle)
  if (has_circle()) {
    clear_has_properties();
      ::HaWC::CmdMsg_CircleProperties* temp = properties_.circle_;
    properties_.circle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_CircleProperties& CmdMsg_Component::circle() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.circle)
  return has_circle()
      ? *properties_.circle_
      : *reinterpret_cast< ::HaWC::CmdMsg_CircleProperties*>(&::HaWC::_CmdMsg_CircleProperties_default_instance_);
}
inline ::HaWC::CmdMsg_CircleProperties* CmdMsg_Component::mutable_circle() {
  if (!has_circle()) {
    clear_properties();
    set_has_circle();
    properties_.circle_ = CreateMaybeMessage< ::HaWC::CmdMsg_CircleProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.circle)
  return properties_.circle_;
}

// .HaWC.CmdMsg.RectangleProperties rectangle = 4;
inline bool CmdMsg_Component::has_rectangle() const {
  return properties_case() == kRectangle;
}
inline void CmdMsg_Component::set_has_rectangle() {
  _oneof_case_[0] = kRectangle;
}
inline void CmdMsg_Component::clear_rectangle() {
  if (has_rectangle()) {
    delete properties_.rectangle_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_RectangleProperties& CmdMsg_Component::_internal_rectangle() const {
  return *properties_.rectangle_;
}
inline ::HaWC::CmdMsg_RectangleProperties* CmdMsg_Component::release_rectangle() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.rectangle)
  if (has_rectangle()) {
    clear_has_properties();
      ::HaWC::CmdMsg_RectangleProperties* temp = properties_.rectangle_;
    properties_.rectangle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_RectangleProperties& CmdMsg_Component::rectangle() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.rectangle)
  return has_rectangle()
      ? *properties_.rectangle_
      : *reinterpret_cast< ::HaWC::CmdMsg_RectangleProperties*>(&::HaWC::_CmdMsg_RectangleProperties_default_instance_);
}
inline ::HaWC::CmdMsg_RectangleProperties* CmdMsg_Component::mutable_rectangle() {
  if (!has_rectangle()) {
    clear_properties();
    set_has_rectangle();
    properties_.rectangle_ = CreateMaybeMessage< ::HaWC::CmdMsg_RectangleProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.rectangle)
  return properties_.rectangle_;
}

// .HaWC.CmdMsg.ImageProperties image = 5;
inline bool CmdMsg_Component::has_image() const {
  return properties_case() == kImage;
}
inline void CmdMsg_Component::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void CmdMsg_Component::clear_image() {
  if (has_image()) {
    delete properties_.image_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_ImageProperties& CmdMsg_Component::_internal_image() const {
  return *properties_.image_;
}
inline ::HaWC::CmdMsg_ImageProperties* CmdMsg_Component::release_image() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.image)
  if (has_image()) {
    clear_has_properties();
      ::HaWC::CmdMsg_ImageProperties* temp = properties_.image_;
    properties_.image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_ImageProperties& CmdMsg_Component::image() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.image)
  return has_image()
      ? *properties_.image_
      : *reinterpret_cast< ::HaWC::CmdMsg_ImageProperties*>(&::HaWC::_CmdMsg_ImageProperties_default_instance_);
}
inline ::HaWC::CmdMsg_ImageProperties* CmdMsg_Component::mutable_image() {
  if (!has_image()) {
    clear_properties();
    set_has_image();
    properties_.image_ = CreateMaybeMessage< ::HaWC::CmdMsg_ImageProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.image)
  return properties_.image_;
}

// .HaWC.CmdMsg.FileListProperties fileList = 6;
inline bool CmdMsg_Component::has_filelist() const {
  return properties_case() == kFileList;
}
inline void CmdMsg_Component::set_has_filelist() {
  _oneof_case_[0] = kFileList;
}
inline void CmdMsg_Component::clear_filelist() {
  if (has_filelist()) {
    delete properties_.filelist_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_FileListProperties& CmdMsg_Component::_internal_filelist() const {
  return *properties_.filelist_;
}
inline ::HaWC::CmdMsg_FileListProperties* CmdMsg_Component::release_filelist() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.fileList)
  if (has_filelist()) {
    clear_has_properties();
      ::HaWC::CmdMsg_FileListProperties* temp = properties_.filelist_;
    properties_.filelist_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_FileListProperties& CmdMsg_Component::filelist() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.fileList)
  return has_filelist()
      ? *properties_.filelist_
      : *reinterpret_cast< ::HaWC::CmdMsg_FileListProperties*>(&::HaWC::_CmdMsg_FileListProperties_default_instance_);
}
inline ::HaWC::CmdMsg_FileListProperties* CmdMsg_Component::mutable_filelist() {
  if (!has_filelist()) {
    clear_properties();
    set_has_filelist();
    properties_.filelist_ = CreateMaybeMessage< ::HaWC::CmdMsg_FileListProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.fileList)
  return properties_.filelist_;
}

// .HaWC.CmdMsg.ToolBarProperties toolbar = 7;
inline bool CmdMsg_Component::has_toolbar() const {
  return properties_case() == kToolbar;
}
inline void CmdMsg_Component::set_has_toolbar() {
  _oneof_case_[0] = kToolbar;
}
inline void CmdMsg_Component::clear_toolbar() {
  if (has_toolbar()) {
    delete properties_.toolbar_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_ToolBarProperties& CmdMsg_Component::_internal_toolbar() const {
  return *properties_.toolbar_;
}
inline ::HaWC::CmdMsg_ToolBarProperties* CmdMsg_Component::release_toolbar() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.toolbar)
  if (has_toolbar()) {
    clear_has_properties();
      ::HaWC::CmdMsg_ToolBarProperties* temp = properties_.toolbar_;
    properties_.toolbar_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_ToolBarProperties& CmdMsg_Component::toolbar() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.toolbar)
  return has_toolbar()
      ? *properties_.toolbar_
      : *reinterpret_cast< ::HaWC::CmdMsg_ToolBarProperties*>(&::HaWC::_CmdMsg_ToolBarProperties_default_instance_);
}
inline ::HaWC::CmdMsg_ToolBarProperties* CmdMsg_Component::mutable_toolbar() {
  if (!has_toolbar()) {
    clear_properties();
    set_has_toolbar();
    properties_.toolbar_ = CreateMaybeMessage< ::HaWC::CmdMsg_ToolBarProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.toolbar)
  return properties_.toolbar_;
}

// .HaWC.CmdMsg.ListProperties list = 8;
inline bool CmdMsg_Component::has_list() const {
  return properties_case() == kList;
}
inline void CmdMsg_Component::set_has_list() {
  _oneof_case_[0] = kList;
}
inline void CmdMsg_Component::clear_list() {
  if (has_list()) {
    delete properties_.list_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_ListProperties& CmdMsg_Component::_internal_list() const {
  return *properties_.list_;
}
inline ::HaWC::CmdMsg_ListProperties* CmdMsg_Component::release_list() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.list)
  if (has_list()) {
    clear_has_properties();
      ::HaWC::CmdMsg_ListProperties* temp = properties_.list_;
    properties_.list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_ListProperties& CmdMsg_Component::list() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.list)
  return has_list()
      ? *properties_.list_
      : *reinterpret_cast< ::HaWC::CmdMsg_ListProperties*>(&::HaWC::_CmdMsg_ListProperties_default_instance_);
}
inline ::HaWC::CmdMsg_ListProperties* CmdMsg_Component::mutable_list() {
  if (!has_list()) {
    clear_properties();
    set_has_list();
    properties_.list_ = CreateMaybeMessage< ::HaWC::CmdMsg_ListProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.list)
  return properties_.list_;
}

// .HaWC.CmdMsg.MenuProperties menu = 9;
inline bool CmdMsg_Component::has_menu() const {
  return properties_case() == kMenu;
}
inline void CmdMsg_Component::set_has_menu() {
  _oneof_case_[0] = kMenu;
}
inline void CmdMsg_Component::clear_menu() {
  if (has_menu()) {
    delete properties_.menu_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_MenuProperties& CmdMsg_Component::_internal_menu() const {
  return *properties_.menu_;
}
inline ::HaWC::CmdMsg_MenuProperties* CmdMsg_Component::release_menu() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.menu)
  if (has_menu()) {
    clear_has_properties();
      ::HaWC::CmdMsg_MenuProperties* temp = properties_.menu_;
    properties_.menu_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_MenuProperties& CmdMsg_Component::menu() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.menu)
  return has_menu()
      ? *properties_.menu_
      : *reinterpret_cast< ::HaWC::CmdMsg_MenuProperties*>(&::HaWC::_CmdMsg_MenuProperties_default_instance_);
}
inline ::HaWC::CmdMsg_MenuProperties* CmdMsg_Component::mutable_menu() {
  if (!has_menu()) {
    clear_properties();
    set_has_menu();
    properties_.menu_ = CreateMaybeMessage< ::HaWC::CmdMsg_MenuProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.menu)
  return properties_.menu_;
}

// .HaWC.CmdMsg.LabelProperties text = 10;
inline bool CmdMsg_Component::has_text() const {
  return properties_case() == kText;
}
inline void CmdMsg_Component::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void CmdMsg_Component::clear_text() {
  if (has_text()) {
    delete properties_.text_;
    clear_has_properties();
  }
}
inline const ::HaWC::CmdMsg_LabelProperties& CmdMsg_Component::_internal_text() const {
  return *properties_.text_;
}
inline ::HaWC::CmdMsg_LabelProperties* CmdMsg_Component::release_text() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.Component.text)
  if (has_text()) {
    clear_has_properties();
      ::HaWC::CmdMsg_LabelProperties* temp = properties_.text_;
    properties_.text_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_LabelProperties& CmdMsg_Component::text() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.Component.text)
  return has_text()
      ? *properties_.text_
      : *reinterpret_cast< ::HaWC::CmdMsg_LabelProperties*>(&::HaWC::_CmdMsg_LabelProperties_default_instance_);
}
inline ::HaWC::CmdMsg_LabelProperties* CmdMsg_Component::mutable_text() {
  if (!has_text()) {
    clear_properties();
    set_has_text();
    properties_.text_ = CreateMaybeMessage< ::HaWC::CmdMsg_LabelProperties >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.Component.text)
  return properties_.text_;
}

inline bool CmdMsg_Component::has_properties() const {
  return properties_case() != PROPERTIES_NOT_SET;
}
inline void CmdMsg_Component::clear_has_properties() {
  _oneof_case_[0] = PROPERTIES_NOT_SET;
}
inline CmdMsg_Component::PropertiesCase CmdMsg_Component::properties_case() const {
  return CmdMsg_Component::PropertiesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_ComponentList

// repeated .HaWC.CmdMsg.Component components = 1;
inline int CmdMsg_ComponentList::components_size() const {
  return components_.size();
}
inline void CmdMsg_ComponentList::clear_components() {
  components_.Clear();
}
inline ::HaWC::CmdMsg_Component* CmdMsg_ComponentList::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ComponentList.components)
  return components_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_Component >*
CmdMsg_ComponentList::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.ComponentList.components)
  return &components_;
}
inline const ::HaWC::CmdMsg_Component& CmdMsg_ComponentList::components(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ComponentList.components)
  return components_.Get(index);
}
inline ::HaWC::CmdMsg_Component* CmdMsg_ComponentList::add_components() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.ComponentList.components)
  return components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_Component >&
CmdMsg_ComponentList::components() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.ComponentList.components)
  return components_;
}

// -------------------------------------------------------------------

// CmdMsg_OverlayCmd

// uint32 viewPortID = 1;
inline void CmdMsg_OverlayCmd::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_OverlayCmd::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.OverlayCmd.viewPortID)
  return viewportid_;
}
inline void CmdMsg_OverlayCmd::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.OverlayCmd.viewPortID)
}

// .HaWC.CmdMsg.ComponentList createScreen = 5;
inline bool CmdMsg_OverlayCmd::has_createscreen() const {
  return command_case() == kCreateScreen;
}
inline void CmdMsg_OverlayCmd::set_has_createscreen() {
  _oneof_case_[0] = kCreateScreen;
}
inline void CmdMsg_OverlayCmd::clear_createscreen() {
  if (has_createscreen()) {
    delete command_.createscreen_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_ComponentList& CmdMsg_OverlayCmd::_internal_createscreen() const {
  return *command_.createscreen_;
}
inline ::HaWC::CmdMsg_ComponentList* CmdMsg_OverlayCmd::release_createscreen() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.OverlayCmd.createScreen)
  if (has_createscreen()) {
    clear_has_command();
      ::HaWC::CmdMsg_ComponentList* temp = command_.createscreen_;
    command_.createscreen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_ComponentList& CmdMsg_OverlayCmd::createscreen() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.OverlayCmd.createScreen)
  return has_createscreen()
      ? *command_.createscreen_
      : *reinterpret_cast< ::HaWC::CmdMsg_ComponentList*>(&::HaWC::_CmdMsg_ComponentList_default_instance_);
}
inline ::HaWC::CmdMsg_ComponentList* CmdMsg_OverlayCmd::mutable_createscreen() {
  if (!has_createscreen()) {
    clear_command();
    set_has_createscreen();
    command_.createscreen_ = CreateMaybeMessage< ::HaWC::CmdMsg_ComponentList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.OverlayCmd.createScreen)
  return command_.createscreen_;
}

// .HaWC.CmdMsg.ComponentList updateSreen = 6;
inline bool CmdMsg_OverlayCmd::has_updatesreen() const {
  return command_case() == kUpdateSreen;
}
inline void CmdMsg_OverlayCmd::set_has_updatesreen() {
  _oneof_case_[0] = kUpdateSreen;
}
inline void CmdMsg_OverlayCmd::clear_updatesreen() {
  if (has_updatesreen()) {
    delete command_.updatesreen_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_ComponentList& CmdMsg_OverlayCmd::_internal_updatesreen() const {
  return *command_.updatesreen_;
}
inline ::HaWC::CmdMsg_ComponentList* CmdMsg_OverlayCmd::release_updatesreen() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.OverlayCmd.updateSreen)
  if (has_updatesreen()) {
    clear_has_command();
      ::HaWC::CmdMsg_ComponentList* temp = command_.updatesreen_;
    command_.updatesreen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_ComponentList& CmdMsg_OverlayCmd::updatesreen() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.OverlayCmd.updateSreen)
  return has_updatesreen()
      ? *command_.updatesreen_
      : *reinterpret_cast< ::HaWC::CmdMsg_ComponentList*>(&::HaWC::_CmdMsg_ComponentList_default_instance_);
}
inline ::HaWC::CmdMsg_ComponentList* CmdMsg_OverlayCmd::mutable_updatesreen() {
  if (!has_updatesreen()) {
    clear_command();
    set_has_updatesreen();
    command_.updatesreen_ = CreateMaybeMessage< ::HaWC::CmdMsg_ComponentList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.OverlayCmd.updateSreen)
  return command_.updatesreen_;
}

inline bool CmdMsg_OverlayCmd::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CmdMsg_OverlayCmd::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline CmdMsg_OverlayCmd::CommandCase CmdMsg_OverlayCmd::command_case() const {
  return CmdMsg_OverlayCmd::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_SetFeedSourceCmd

// int32 feedID = 1;
inline void CmdMsg_SetFeedSourceCmd::clear_feedid() {
  feedid_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetFeedSourceCmd::feedid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetFeedSourceCmd.feedID)
  return feedid_;
}
inline void CmdMsg_SetFeedSourceCmd::set_feedid(::google::protobuf::int32 value) {
  
  feedid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetFeedSourceCmd.feedID)
}

// .HaWC.FeedType type = 2;
inline void CmdMsg_SetFeedSourceCmd::clear_type() {
  type_ = 0;
}
inline ::HaWC::FeedType CmdMsg_SetFeedSourceCmd::type() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetFeedSourceCmd.type)
  return static_cast< ::HaWC::FeedType >(type_);
}
inline void CmdMsg_SetFeedSourceCmd::set_type(::HaWC::FeedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetFeedSourceCmd.type)
}

// string sourceStr = 3;
inline void CmdMsg_SetFeedSourceCmd::clear_sourcestr() {
  sourcestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_SetFeedSourceCmd::sourcestr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
  return sourcestr_.GetNoArena();
}
inline void CmdMsg_SetFeedSourceCmd::set_sourcestr(const ::std::string& value) {
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
}
#if LANG_CXX11
inline void CmdMsg_SetFeedSourceCmd::set_sourcestr(::std::string&& value) {
  
  sourcestr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
}
#endif
inline void CmdMsg_SetFeedSourceCmd::set_sourcestr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
}
inline void CmdMsg_SetFeedSourceCmd::set_sourcestr(const char* value, size_t size) {
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
}
inline ::std::string* CmdMsg_SetFeedSourceCmd::mutable_sourcestr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
  return sourcestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_SetFeedSourceCmd::release_sourcestr() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
  
  return sourcestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_SetFeedSourceCmd::set_allocated_sourcestr(::std::string* sourcestr) {
  if (sourcestr != NULL) {
    
  } else {
    
  }
  sourcestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcestr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.SetFeedSourceCmd.sourceStr)
}

// uint32 qosTimeout = 4;
inline void CmdMsg_SetFeedSourceCmd::clear_qostimeout() {
  qostimeout_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_SetFeedSourceCmd::qostimeout() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetFeedSourceCmd.qosTimeout)
  return qostimeout_;
}
inline void CmdMsg_SetFeedSourceCmd::set_qostimeout(::google::protobuf::uint32 value) {
  
  qostimeout_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetFeedSourceCmd.qosTimeout)
}

// uint32 qosRefresh = 5;
inline void CmdMsg_SetFeedSourceCmd::clear_qosrefresh() {
  qosrefresh_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_SetFeedSourceCmd::qosrefresh() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetFeedSourceCmd.qosRefresh)
  return qosrefresh_;
}
inline void CmdMsg_SetFeedSourceCmd::set_qosrefresh(::google::protobuf::uint32 value) {
  
  qosrefresh_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetFeedSourceCmd.qosRefresh)
}

// -------------------------------------------------------------------

// CmdMsg_SetViewFeedCmd

// uint32 viewPortID = 1;
inline void CmdMsg_SetViewFeedCmd::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_SetViewFeedCmd::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewFeedCmd.viewPortID)
  return viewportid_;
}
inline void CmdMsg_SetViewFeedCmd::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewFeedCmd.viewPortID)
}

// int32 feedID = 2;
inline void CmdMsg_SetViewFeedCmd::clear_feedid() {
  feedid_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetViewFeedCmd::feedid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewFeedCmd.feedID)
  return feedid_;
}
inline void CmdMsg_SetViewFeedCmd::set_feedid(::google::protobuf::int32 value) {
  
  feedid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewFeedCmd.feedID)
}

// -------------------------------------------------------------------

// CmdMsg_SetViewWindowCmd

// uint32 viewPortID = 1;
inline void CmdMsg_SetViewWindowCmd::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_SetViewWindowCmd::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.viewPortID)
  return viewportid_;
}
inline void CmdMsg_SetViewWindowCmd::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.viewPortID)
}

// int32 x = 2;
inline void CmdMsg_SetViewWindowCmd::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetViewWindowCmd::x() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.x)
  return x_;
}
inline void CmdMsg_SetViewWindowCmd::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.x)
}

// int32 y = 3;
inline void CmdMsg_SetViewWindowCmd::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetViewWindowCmd::y() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.y)
  return y_;
}
inline void CmdMsg_SetViewWindowCmd::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.y)
}

// int32 z = 4;
inline void CmdMsg_SetViewWindowCmd::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetViewWindowCmd::z() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.z)
  return z_;
}
inline void CmdMsg_SetViewWindowCmd::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.z)
}

// int32 width = 5;
inline void CmdMsg_SetViewWindowCmd::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetViewWindowCmd::width() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.width)
  return width_;
}
inline void CmdMsg_SetViewWindowCmd::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.width)
}

// int32 height = 6;
inline void CmdMsg_SetViewWindowCmd::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CmdMsg_SetViewWindowCmd::height() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.height)
  return height_;
}
inline void CmdMsg_SetViewWindowCmd::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.height)
}

// double alpha = 7;
inline void CmdMsg_SetViewWindowCmd::clear_alpha() {
  alpha_ = 0;
}
inline double CmdMsg_SetViewWindowCmd::alpha() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.alpha)
  return alpha_;
}
inline void CmdMsg_SetViewWindowCmd::set_alpha(double value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.alpha)
}

// bool enableOverlay = 8;
inline void CmdMsg_SetViewWindowCmd::clear_enableoverlay() {
  enableoverlay_ = false;
}
inline bool CmdMsg_SetViewWindowCmd::enableoverlay() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetViewWindowCmd.enableOverlay)
  return enableoverlay_;
}
inline void CmdMsg_SetViewWindowCmd::set_enableoverlay(bool value) {
  
  enableoverlay_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetViewWindowCmd.enableOverlay)
}

// -------------------------------------------------------------------

// CmdMsg_SetDisplayCfgCmd

// bool reportParamVals = 1;
inline void CmdMsg_SetDisplayCfgCmd::clear_reportparamvals() {
  reportparamvals_ = false;
}
inline bool CmdMsg_SetDisplayCfgCmd::reportparamvals() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.reportParamVals)
  return reportparamvals_;
}
inline void CmdMsg_SetDisplayCfgCmd::set_reportparamvals(bool value) {
  
  reportparamvals_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetDisplayCfgCmd.reportParamVals)
}

// bool reportErrStr = 2;
inline void CmdMsg_SetDisplayCfgCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SetDisplayCfgCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SetDisplayCfgCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SetDisplayCfgCmd.reportErrStr)
}

// repeated .HaWC.CmdMsg.SetFeedSourceCmd feedSrcs = 5;
inline int CmdMsg_SetDisplayCfgCmd::feedsrcs_size() const {
  return feedsrcs_.size();
}
inline void CmdMsg_SetDisplayCfgCmd::clear_feedsrcs() {
  feedsrcs_.Clear();
}
inline ::HaWC::CmdMsg_SetFeedSourceCmd* CmdMsg_SetDisplayCfgCmd::mutable_feedsrcs(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetDisplayCfgCmd.feedSrcs)
  return feedsrcs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetFeedSourceCmd >*
CmdMsg_SetDisplayCfgCmd::mutable_feedsrcs() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.SetDisplayCfgCmd.feedSrcs)
  return &feedsrcs_;
}
inline const ::HaWC::CmdMsg_SetFeedSourceCmd& CmdMsg_SetDisplayCfgCmd::feedsrcs(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.feedSrcs)
  return feedsrcs_.Get(index);
}
inline ::HaWC::CmdMsg_SetFeedSourceCmd* CmdMsg_SetDisplayCfgCmd::add_feedsrcs() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.SetDisplayCfgCmd.feedSrcs)
  return feedsrcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetFeedSourceCmd >&
CmdMsg_SetDisplayCfgCmd::feedsrcs() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.SetDisplayCfgCmd.feedSrcs)
  return feedsrcs_;
}

// .HaWC.CmdMsg.OverlayCmd mainOverlay = 7;
inline bool CmdMsg_SetDisplayCfgCmd::has_mainoverlay() const {
  return this != internal_default_instance() && mainoverlay_ != NULL;
}
inline void CmdMsg_SetDisplayCfgCmd::clear_mainoverlay() {
  if (GetArenaNoVirtual() == NULL && mainoverlay_ != NULL) {
    delete mainoverlay_;
  }
  mainoverlay_ = NULL;
}
inline const ::HaWC::CmdMsg_OverlayCmd& CmdMsg_SetDisplayCfgCmd::_internal_mainoverlay() const {
  return *mainoverlay_;
}
inline const ::HaWC::CmdMsg_OverlayCmd& CmdMsg_SetDisplayCfgCmd::mainoverlay() const {
  const ::HaWC::CmdMsg_OverlayCmd* p = mainoverlay_;
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.mainOverlay)
  return p != NULL ? *p : *reinterpret_cast<const ::HaWC::CmdMsg_OverlayCmd*>(
      &::HaWC::_CmdMsg_OverlayCmd_default_instance_);
}
inline ::HaWC::CmdMsg_OverlayCmd* CmdMsg_SetDisplayCfgCmd::release_mainoverlay() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.SetDisplayCfgCmd.mainOverlay)
  
  ::HaWC::CmdMsg_OverlayCmd* temp = mainoverlay_;
  mainoverlay_ = NULL;
  return temp;
}
inline ::HaWC::CmdMsg_OverlayCmd* CmdMsg_SetDisplayCfgCmd::mutable_mainoverlay() {
  
  if (mainoverlay_ == NULL) {
    auto* p = CreateMaybeMessage<::HaWC::CmdMsg_OverlayCmd>(GetArenaNoVirtual());
    mainoverlay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetDisplayCfgCmd.mainOverlay)
  return mainoverlay_;
}
inline void CmdMsg_SetDisplayCfgCmd::set_allocated_mainoverlay(::HaWC::CmdMsg_OverlayCmd* mainoverlay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mainoverlay_;
  }
  if (mainoverlay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mainoverlay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mainoverlay, submessage_arena);
    }
    
  } else {
    
  }
  mainoverlay_ = mainoverlay;
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.SetDisplayCfgCmd.mainOverlay)
}

// repeated .HaWC.CmdMsg.SetViewFeedCmd viewFeeds = 9;
inline int CmdMsg_SetDisplayCfgCmd::viewfeeds_size() const {
  return viewfeeds_.size();
}
inline void CmdMsg_SetDisplayCfgCmd::clear_viewfeeds() {
  viewfeeds_.Clear();
}
inline ::HaWC::CmdMsg_SetViewFeedCmd* CmdMsg_SetDisplayCfgCmd::mutable_viewfeeds(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetDisplayCfgCmd.viewFeeds)
  return viewfeeds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewFeedCmd >*
CmdMsg_SetDisplayCfgCmd::mutable_viewfeeds() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.SetDisplayCfgCmd.viewFeeds)
  return &viewfeeds_;
}
inline const ::HaWC::CmdMsg_SetViewFeedCmd& CmdMsg_SetDisplayCfgCmd::viewfeeds(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.viewFeeds)
  return viewfeeds_.Get(index);
}
inline ::HaWC::CmdMsg_SetViewFeedCmd* CmdMsg_SetDisplayCfgCmd::add_viewfeeds() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.SetDisplayCfgCmd.viewFeeds)
  return viewfeeds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewFeedCmd >&
CmdMsg_SetDisplayCfgCmd::viewfeeds() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.SetDisplayCfgCmd.viewFeeds)
  return viewfeeds_;
}

// repeated .HaWC.CmdMsg.SetViewWindowCmd viewWindows = 10;
inline int CmdMsg_SetDisplayCfgCmd::viewwindows_size() const {
  return viewwindows_.size();
}
inline void CmdMsg_SetDisplayCfgCmd::clear_viewwindows() {
  viewwindows_.Clear();
}
inline ::HaWC::CmdMsg_SetViewWindowCmd* CmdMsg_SetDisplayCfgCmd::mutable_viewwindows(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetDisplayCfgCmd.viewWindows)
  return viewwindows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewWindowCmd >*
CmdMsg_SetDisplayCfgCmd::mutable_viewwindows() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.SetDisplayCfgCmd.viewWindows)
  return &viewwindows_;
}
inline const ::HaWC::CmdMsg_SetViewWindowCmd& CmdMsg_SetDisplayCfgCmd::viewwindows(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.viewWindows)
  return viewwindows_.Get(index);
}
inline ::HaWC::CmdMsg_SetViewWindowCmd* CmdMsg_SetDisplayCfgCmd::add_viewwindows() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.SetDisplayCfgCmd.viewWindows)
  return viewwindows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_SetViewWindowCmd >&
CmdMsg_SetDisplayCfgCmd::viewwindows() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.SetDisplayCfgCmd.viewWindows)
  return viewwindows_;
}

// repeated .HaWC.CmdMsg.OverlayCmd viewOverlays = 12;
inline int CmdMsg_SetDisplayCfgCmd::viewoverlays_size() const {
  return viewoverlays_.size();
}
inline void CmdMsg_SetDisplayCfgCmd::clear_viewoverlays() {
  viewoverlays_.Clear();
}
inline ::HaWC::CmdMsg_OverlayCmd* CmdMsg_SetDisplayCfgCmd::mutable_viewoverlays(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SetDisplayCfgCmd.viewOverlays)
  return viewoverlays_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_OverlayCmd >*
CmdMsg_SetDisplayCfgCmd::mutable_viewoverlays() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.SetDisplayCfgCmd.viewOverlays)
  return &viewoverlays_;
}
inline const ::HaWC::CmdMsg_OverlayCmd& CmdMsg_SetDisplayCfgCmd::viewoverlays(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SetDisplayCfgCmd.viewOverlays)
  return viewoverlays_.Get(index);
}
inline ::HaWC::CmdMsg_OverlayCmd* CmdMsg_SetDisplayCfgCmd::add_viewoverlays() {
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.SetDisplayCfgCmd.viewOverlays)
  return viewoverlays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::CmdMsg_OverlayCmd >&
CmdMsg_SetDisplayCfgCmd::viewoverlays() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.SetDisplayCfgCmd.viewOverlays)
  return viewoverlays_;
}

// -------------------------------------------------------------------

// CmdMsg_GetDisplayCfgCmd

// bool reportErrStr = 2;
inline void CmdMsg_GetDisplayCfgCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_GetDisplayCfgCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetDisplayCfgCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_GetDisplayCfgCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetDisplayCfgCmd.reportErrStr)
}

// repeated int32 feedSrcIDs = 5;
inline int CmdMsg_GetDisplayCfgCmd::feedsrcids_size() const {
  return feedsrcids_.size();
}
inline void CmdMsg_GetDisplayCfgCmd::clear_feedsrcids() {
  feedsrcids_.Clear();
}
inline ::google::protobuf::int32 CmdMsg_GetDisplayCfgCmd::feedsrcids(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetDisplayCfgCmd.feedSrcIDs)
  return feedsrcids_.Get(index);
}
inline void CmdMsg_GetDisplayCfgCmd::set_feedsrcids(int index, ::google::protobuf::int32 value) {
  feedsrcids_.Set(index, value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetDisplayCfgCmd.feedSrcIDs)
}
inline void CmdMsg_GetDisplayCfgCmd::add_feedsrcids(::google::protobuf::int32 value) {
  feedsrcids_.Add(value);
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.GetDisplayCfgCmd.feedSrcIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CmdMsg_GetDisplayCfgCmd::feedsrcids() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.GetDisplayCfgCmd.feedSrcIDs)
  return feedsrcids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CmdMsg_GetDisplayCfgCmd::mutable_feedsrcids() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.GetDisplayCfgCmd.feedSrcIDs)
  return &feedsrcids_;
}

// repeated uint32 viewFeedIDs = 9;
inline int CmdMsg_GetDisplayCfgCmd::viewfeedids_size() const {
  return viewfeedids_.size();
}
inline void CmdMsg_GetDisplayCfgCmd::clear_viewfeedids() {
  viewfeedids_.Clear();
}
inline ::google::protobuf::uint32 CmdMsg_GetDisplayCfgCmd::viewfeedids(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetDisplayCfgCmd.viewFeedIDs)
  return viewfeedids_.Get(index);
}
inline void CmdMsg_GetDisplayCfgCmd::set_viewfeedids(int index, ::google::protobuf::uint32 value) {
  viewfeedids_.Set(index, value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetDisplayCfgCmd.viewFeedIDs)
}
inline void CmdMsg_GetDisplayCfgCmd::add_viewfeedids(::google::protobuf::uint32 value) {
  viewfeedids_.Add(value);
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.GetDisplayCfgCmd.viewFeedIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CmdMsg_GetDisplayCfgCmd::viewfeedids() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.GetDisplayCfgCmd.viewFeedIDs)
  return viewfeedids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CmdMsg_GetDisplayCfgCmd::mutable_viewfeedids() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.GetDisplayCfgCmd.viewFeedIDs)
  return &viewfeedids_;
}

// repeated uint32 viewWindowIDs = 10;
inline int CmdMsg_GetDisplayCfgCmd::viewwindowids_size() const {
  return viewwindowids_.size();
}
inline void CmdMsg_GetDisplayCfgCmd::clear_viewwindowids() {
  viewwindowids_.Clear();
}
inline ::google::protobuf::uint32 CmdMsg_GetDisplayCfgCmd::viewwindowids(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.GetDisplayCfgCmd.viewWindowIDs)
  return viewwindowids_.Get(index);
}
inline void CmdMsg_GetDisplayCfgCmd::set_viewwindowids(int index, ::google::protobuf::uint32 value) {
  viewwindowids_.Set(index, value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.GetDisplayCfgCmd.viewWindowIDs)
}
inline void CmdMsg_GetDisplayCfgCmd::add_viewwindowids(::google::protobuf::uint32 value) {
  viewwindowids_.Add(value);
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.GetDisplayCfgCmd.viewWindowIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CmdMsg_GetDisplayCfgCmd::viewwindowids() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.GetDisplayCfgCmd.viewWindowIDs)
  return viewwindowids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CmdMsg_GetDisplayCfgCmd::mutable_viewwindowids() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.GetDisplayCfgCmd.viewWindowIDs)
  return &viewwindowids_;
}

// -------------------------------------------------------------------

// CmdMsg_SaveDefaultDisplayCmd

// bool reportErrStr = 1;
inline void CmdMsg_SaveDefaultDisplayCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SaveDefaultDisplayCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveDefaultDisplayCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SaveDefaultDisplayCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveDefaultDisplayCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_SaveDisplayToFileCmd

// string fileName = 1;
inline void CmdMsg_SaveDisplayToFileCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_SaveDisplayToFileCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
  return filename_.GetNoArena();
}
inline void CmdMsg_SaveDisplayToFileCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
}
#if LANG_CXX11
inline void CmdMsg_SaveDisplayToFileCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
}
#endif
inline void CmdMsg_SaveDisplayToFileCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
}
inline void CmdMsg_SaveDisplayToFileCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
}
inline ::std::string* CmdMsg_SaveDisplayToFileCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_SaveDisplayToFileCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_SaveDisplayToFileCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.SaveDisplayToFileCmd.fileName)
}

// bool reportErrStr = 2;
inline void CmdMsg_SaveDisplayToFileCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SaveDisplayToFileCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveDisplayToFileCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SaveDisplayToFileCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveDisplayToFileCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_LoadDisplayFromFileCmd

// string fileName = 1;
inline void CmdMsg_LoadDisplayFromFileCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_LoadDisplayFromFileCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
  return filename_.GetNoArena();
}
inline void CmdMsg_LoadDisplayFromFileCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
}
#if LANG_CXX11
inline void CmdMsg_LoadDisplayFromFileCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
}
#endif
inline void CmdMsg_LoadDisplayFromFileCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
}
inline void CmdMsg_LoadDisplayFromFileCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
}
inline ::std::string* CmdMsg_LoadDisplayFromFileCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LoadDisplayFromFileCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_LoadDisplayFromFileCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LoadDisplayFromFileCmd.fileName)
}

// bool reportErrStr = 2;
inline void CmdMsg_LoadDisplayFromFileCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_LoadDisplayFromFileCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadDisplayFromFileCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_LoadDisplayFromFileCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadDisplayFromFileCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_SaveOverlayToFileCmd

// bool mainOverlay = 1;
inline void CmdMsg_SaveOverlayToFileCmd::clear_mainoverlay() {
  mainoverlay_ = false;
}
inline bool CmdMsg_SaveOverlayToFileCmd::mainoverlay() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveOverlayToFileCmd.mainOverlay)
  return mainoverlay_;
}
inline void CmdMsg_SaveOverlayToFileCmd::set_mainoverlay(bool value) {
  
  mainoverlay_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveOverlayToFileCmd.mainOverlay)
}

// uint32 viewPortID = 2;
inline void CmdMsg_SaveOverlayToFileCmd::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_SaveOverlayToFileCmd::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveOverlayToFileCmd.viewPortID)
  return viewportid_;
}
inline void CmdMsg_SaveOverlayToFileCmd::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveOverlayToFileCmd.viewPortID)
}

// string filename = 3;
inline void CmdMsg_SaveOverlayToFileCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_SaveOverlayToFileCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
  return filename_.GetNoArena();
}
inline void CmdMsg_SaveOverlayToFileCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
}
#if LANG_CXX11
inline void CmdMsg_SaveOverlayToFileCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
}
#endif
inline void CmdMsg_SaveOverlayToFileCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
}
inline void CmdMsg_SaveOverlayToFileCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
}
inline ::std::string* CmdMsg_SaveOverlayToFileCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_SaveOverlayToFileCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_SaveOverlayToFileCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.SaveOverlayToFileCmd.filename)
}

// bool reportErrStr = 5;
inline void CmdMsg_SaveOverlayToFileCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_SaveOverlayToFileCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.SaveOverlayToFileCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_SaveOverlayToFileCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.SaveOverlayToFileCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_LoadOverlayFromFileCmd

// bool mainOverlay = 1;
inline void CmdMsg_LoadOverlayFromFileCmd::clear_mainoverlay() {
  mainoverlay_ = false;
}
inline bool CmdMsg_LoadOverlayFromFileCmd::mainoverlay() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadOverlayFromFileCmd.mainOverlay)
  return mainoverlay_;
}
inline void CmdMsg_LoadOverlayFromFileCmd::set_mainoverlay(bool value) {
  
  mainoverlay_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadOverlayFromFileCmd.mainOverlay)
}

// uint32 viewPortID = 2;
inline void CmdMsg_LoadOverlayFromFileCmd::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg_LoadOverlayFromFileCmd::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadOverlayFromFileCmd.viewPortID)
  return viewportid_;
}
inline void CmdMsg_LoadOverlayFromFileCmd::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadOverlayFromFileCmd.viewPortID)
}

// string filename = 3;
inline void CmdMsg_LoadOverlayFromFileCmd::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdMsg_LoadOverlayFromFileCmd::filename() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
  return filename_.GetNoArena();
}
inline void CmdMsg_LoadOverlayFromFileCmd::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
}
#if LANG_CXX11
inline void CmdMsg_LoadOverlayFromFileCmd::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
}
#endif
inline void CmdMsg_LoadOverlayFromFileCmd::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
}
inline void CmdMsg_LoadOverlayFromFileCmd::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
}
inline ::std::string* CmdMsg_LoadOverlayFromFileCmd::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdMsg_LoadOverlayFromFileCmd::release_filename() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdMsg_LoadOverlayFromFileCmd::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HaWC.CmdMsg.LoadOverlayFromFileCmd.filename)
}

// bool reportErrStr = 5;
inline void CmdMsg_LoadOverlayFromFileCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_LoadOverlayFromFileCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadOverlayFromFileCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_LoadOverlayFromFileCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadOverlayFromFileCmd.reportErrStr)
}

// -------------------------------------------------------------------

// CmdMsg_LoadFontsCmd

// bool reportParamVals = 1;
inline void CmdMsg_LoadFontsCmd::clear_reportparamvals() {
  reportparamvals_ = false;
}
inline bool CmdMsg_LoadFontsCmd::reportparamvals() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadFontsCmd.reportParamVals)
  return reportparamvals_;
}
inline void CmdMsg_LoadFontsCmd::set_reportparamvals(bool value) {
  
  reportparamvals_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadFontsCmd.reportParamVals)
}

// bool reportErrStr = 2;
inline void CmdMsg_LoadFontsCmd::clear_reporterrstr() {
  reporterrstr_ = false;
}
inline bool CmdMsg_LoadFontsCmd::reporterrstr() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadFontsCmd.reportErrStr)
  return reporterrstr_;
}
inline void CmdMsg_LoadFontsCmd::set_reporterrstr(bool value) {
  
  reporterrstr_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadFontsCmd.reportErrStr)
}

// bool overwriteFiles = 3;
inline void CmdMsg_LoadFontsCmd::clear_overwritefiles() {
  overwritefiles_ = false;
}
inline bool CmdMsg_LoadFontsCmd::overwritefiles() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadFontsCmd.overwriteFiles)
  return overwritefiles_;
}
inline void CmdMsg_LoadFontsCmd::set_overwritefiles(bool value) {
  
  overwritefiles_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadFontsCmd.overwriteFiles)
}

// repeated string fontFiles = 4;
inline int CmdMsg_LoadFontsCmd::fontfiles_size() const {
  return fontfiles_.size();
}
inline void CmdMsg_LoadFontsCmd::clear_fontfiles() {
  fontfiles_.Clear();
}
inline const ::std::string& CmdMsg_LoadFontsCmd::fontfiles(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  return fontfiles_.Get(index);
}
inline ::std::string* CmdMsg_LoadFontsCmd::mutable_fontfiles(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  return fontfiles_.Mutable(index);
}
inline void CmdMsg_LoadFontsCmd::set_fontfiles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  fontfiles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CmdMsg_LoadFontsCmd::set_fontfiles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  fontfiles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CmdMsg_LoadFontsCmd::set_fontfiles(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fontfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
}
inline void CmdMsg_LoadFontsCmd::set_fontfiles(int index, const char* value, size_t size) {
  fontfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
}
inline ::std::string* CmdMsg_LoadFontsCmd::add_fontfiles() {
  // @@protoc_insertion_point(field_add_mutable:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  return fontfiles_.Add();
}
inline void CmdMsg_LoadFontsCmd::add_fontfiles(const ::std::string& value) {
  fontfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
}
#if LANG_CXX11
inline void CmdMsg_LoadFontsCmd::add_fontfiles(::std::string&& value) {
  fontfiles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
}
#endif
inline void CmdMsg_LoadFontsCmd::add_fontfiles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fontfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
}
inline void CmdMsg_LoadFontsCmd::add_fontfiles(const char* value, size_t size) {
  fontfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdMsg_LoadFontsCmd::fontfiles() const {
  // @@protoc_insertion_point(field_list:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  return fontfiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CmdMsg_LoadFontsCmd::mutable_fontfiles() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.CmdMsg.LoadFontsCmd.fontFiles)
  return &fontfiles_;
}

// -------------------------------------------------------------------

// CmdMsg_RestoreFactoryDisplayCmd

// -------------------------------------------------------------------

// CmdMsg_DisplayCmd

// .HaWC.CmdMsg.SetDisplayCfgCmd setDisplayCfg = 1;
inline bool CmdMsg_DisplayCmd::has_setdisplaycfg() const {
  return command_case() == kSetDisplayCfg;
}
inline void CmdMsg_DisplayCmd::set_has_setdisplaycfg() {
  _oneof_case_[0] = kSetDisplayCfg;
}
inline void CmdMsg_DisplayCmd::clear_setdisplaycfg() {
  if (has_setdisplaycfg()) {
    delete command_.setdisplaycfg_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SetDisplayCfgCmd& CmdMsg_DisplayCmd::_internal_setdisplaycfg() const {
  return *command_.setdisplaycfg_;
}
inline ::HaWC::CmdMsg_SetDisplayCfgCmd* CmdMsg_DisplayCmd::release_setdisplaycfg() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.setDisplayCfg)
  if (has_setdisplaycfg()) {
    clear_has_command();
      ::HaWC::CmdMsg_SetDisplayCfgCmd* temp = command_.setdisplaycfg_;
    command_.setdisplaycfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SetDisplayCfgCmd& CmdMsg_DisplayCmd::setdisplaycfg() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.setDisplayCfg)
  return has_setdisplaycfg()
      ? *command_.setdisplaycfg_
      : *reinterpret_cast< ::HaWC::CmdMsg_SetDisplayCfgCmd*>(&::HaWC::_CmdMsg_SetDisplayCfgCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SetDisplayCfgCmd* CmdMsg_DisplayCmd::mutable_setdisplaycfg() {
  if (!has_setdisplaycfg()) {
    clear_command();
    set_has_setdisplaycfg();
    command_.setdisplaycfg_ = CreateMaybeMessage< ::HaWC::CmdMsg_SetDisplayCfgCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.setDisplayCfg)
  return command_.setdisplaycfg_;
}

// .HaWC.CmdMsg.GetDisplayCfgCmd getDisplayCfg = 2;
inline bool CmdMsg_DisplayCmd::has_getdisplaycfg() const {
  return command_case() == kGetDisplayCfg;
}
inline void CmdMsg_DisplayCmd::set_has_getdisplaycfg() {
  _oneof_case_[0] = kGetDisplayCfg;
}
inline void CmdMsg_DisplayCmd::clear_getdisplaycfg() {
  if (has_getdisplaycfg()) {
    delete command_.getdisplaycfg_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_GetDisplayCfgCmd& CmdMsg_DisplayCmd::_internal_getdisplaycfg() const {
  return *command_.getdisplaycfg_;
}
inline ::HaWC::CmdMsg_GetDisplayCfgCmd* CmdMsg_DisplayCmd::release_getdisplaycfg() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.getDisplayCfg)
  if (has_getdisplaycfg()) {
    clear_has_command();
      ::HaWC::CmdMsg_GetDisplayCfgCmd* temp = command_.getdisplaycfg_;
    command_.getdisplaycfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_GetDisplayCfgCmd& CmdMsg_DisplayCmd::getdisplaycfg() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.getDisplayCfg)
  return has_getdisplaycfg()
      ? *command_.getdisplaycfg_
      : *reinterpret_cast< ::HaWC::CmdMsg_GetDisplayCfgCmd*>(&::HaWC::_CmdMsg_GetDisplayCfgCmd_default_instance_);
}
inline ::HaWC::CmdMsg_GetDisplayCfgCmd* CmdMsg_DisplayCmd::mutable_getdisplaycfg() {
  if (!has_getdisplaycfg()) {
    clear_command();
    set_has_getdisplaycfg();
    command_.getdisplaycfg_ = CreateMaybeMessage< ::HaWC::CmdMsg_GetDisplayCfgCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.getDisplayCfg)
  return command_.getdisplaycfg_;
}

// .HaWC.CmdMsg.SaveDefaultDisplayCmd saveDefaultDisplayCmd = 5;
inline bool CmdMsg_DisplayCmd::has_savedefaultdisplaycmd() const {
  return command_case() == kSaveDefaultDisplayCmd;
}
inline void CmdMsg_DisplayCmd::set_has_savedefaultdisplaycmd() {
  _oneof_case_[0] = kSaveDefaultDisplayCmd;
}
inline void CmdMsg_DisplayCmd::clear_savedefaultdisplaycmd() {
  if (has_savedefaultdisplaycmd()) {
    delete command_.savedefaultdisplaycmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SaveDefaultDisplayCmd& CmdMsg_DisplayCmd::_internal_savedefaultdisplaycmd() const {
  return *command_.savedefaultdisplaycmd_;
}
inline ::HaWC::CmdMsg_SaveDefaultDisplayCmd* CmdMsg_DisplayCmd::release_savedefaultdisplaycmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.saveDefaultDisplayCmd)
  if (has_savedefaultdisplaycmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_SaveDefaultDisplayCmd* temp = command_.savedefaultdisplaycmd_;
    command_.savedefaultdisplaycmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SaveDefaultDisplayCmd& CmdMsg_DisplayCmd::savedefaultdisplaycmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.saveDefaultDisplayCmd)
  return has_savedefaultdisplaycmd()
      ? *command_.savedefaultdisplaycmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_SaveDefaultDisplayCmd*>(&::HaWC::_CmdMsg_SaveDefaultDisplayCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SaveDefaultDisplayCmd* CmdMsg_DisplayCmd::mutable_savedefaultdisplaycmd() {
  if (!has_savedefaultdisplaycmd()) {
    clear_command();
    set_has_savedefaultdisplaycmd();
    command_.savedefaultdisplaycmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_SaveDefaultDisplayCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.saveDefaultDisplayCmd)
  return command_.savedefaultdisplaycmd_;
}

// .HaWC.CmdMsg.SaveDisplayToFileCmd saveDisplayCmd = 6;
inline bool CmdMsg_DisplayCmd::has_savedisplaycmd() const {
  return command_case() == kSaveDisplayCmd;
}
inline void CmdMsg_DisplayCmd::set_has_savedisplaycmd() {
  _oneof_case_[0] = kSaveDisplayCmd;
}
inline void CmdMsg_DisplayCmd::clear_savedisplaycmd() {
  if (has_savedisplaycmd()) {
    delete command_.savedisplaycmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SaveDisplayToFileCmd& CmdMsg_DisplayCmd::_internal_savedisplaycmd() const {
  return *command_.savedisplaycmd_;
}
inline ::HaWC::CmdMsg_SaveDisplayToFileCmd* CmdMsg_DisplayCmd::release_savedisplaycmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.saveDisplayCmd)
  if (has_savedisplaycmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_SaveDisplayToFileCmd* temp = command_.savedisplaycmd_;
    command_.savedisplaycmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SaveDisplayToFileCmd& CmdMsg_DisplayCmd::savedisplaycmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.saveDisplayCmd)
  return has_savedisplaycmd()
      ? *command_.savedisplaycmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_SaveDisplayToFileCmd*>(&::HaWC::_CmdMsg_SaveDisplayToFileCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SaveDisplayToFileCmd* CmdMsg_DisplayCmd::mutable_savedisplaycmd() {
  if (!has_savedisplaycmd()) {
    clear_command();
    set_has_savedisplaycmd();
    command_.savedisplaycmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_SaveDisplayToFileCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.saveDisplayCmd)
  return command_.savedisplaycmd_;
}

// .HaWC.CmdMsg.LoadDisplayFromFileCmd loadDisplayCmd = 7;
inline bool CmdMsg_DisplayCmd::has_loaddisplaycmd() const {
  return command_case() == kLoadDisplayCmd;
}
inline void CmdMsg_DisplayCmd::set_has_loaddisplaycmd() {
  _oneof_case_[0] = kLoadDisplayCmd;
}
inline void CmdMsg_DisplayCmd::clear_loaddisplaycmd() {
  if (has_loaddisplaycmd()) {
    delete command_.loaddisplaycmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_LoadDisplayFromFileCmd& CmdMsg_DisplayCmd::_internal_loaddisplaycmd() const {
  return *command_.loaddisplaycmd_;
}
inline ::HaWC::CmdMsg_LoadDisplayFromFileCmd* CmdMsg_DisplayCmd::release_loaddisplaycmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.loadDisplayCmd)
  if (has_loaddisplaycmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_LoadDisplayFromFileCmd* temp = command_.loaddisplaycmd_;
    command_.loaddisplaycmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_LoadDisplayFromFileCmd& CmdMsg_DisplayCmd::loaddisplaycmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.loadDisplayCmd)
  return has_loaddisplaycmd()
      ? *command_.loaddisplaycmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_LoadDisplayFromFileCmd*>(&::HaWC::_CmdMsg_LoadDisplayFromFileCmd_default_instance_);
}
inline ::HaWC::CmdMsg_LoadDisplayFromFileCmd* CmdMsg_DisplayCmd::mutable_loaddisplaycmd() {
  if (!has_loaddisplaycmd()) {
    clear_command();
    set_has_loaddisplaycmd();
    command_.loaddisplaycmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_LoadDisplayFromFileCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.loadDisplayCmd)
  return command_.loaddisplaycmd_;
}

// .HaWC.CmdMsg.RestoreFactoryDisplayCmd restoreFactoryDisplayCfgn = 8;
inline bool CmdMsg_DisplayCmd::has_restorefactorydisplaycfgn() const {
  return command_case() == kRestoreFactoryDisplayCfgn;
}
inline void CmdMsg_DisplayCmd::set_has_restorefactorydisplaycfgn() {
  _oneof_case_[0] = kRestoreFactoryDisplayCfgn;
}
inline void CmdMsg_DisplayCmd::clear_restorefactorydisplaycfgn() {
  if (has_restorefactorydisplaycfgn()) {
    delete command_.restorefactorydisplaycfgn_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_RestoreFactoryDisplayCmd& CmdMsg_DisplayCmd::_internal_restorefactorydisplaycfgn() const {
  return *command_.restorefactorydisplaycfgn_;
}
inline ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* CmdMsg_DisplayCmd::release_restorefactorydisplaycfgn() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.restoreFactoryDisplayCfgn)
  if (has_restorefactorydisplaycfgn()) {
    clear_has_command();
      ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* temp = command_.restorefactorydisplaycfgn_;
    command_.restorefactorydisplaycfgn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_RestoreFactoryDisplayCmd& CmdMsg_DisplayCmd::restorefactorydisplaycfgn() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.restoreFactoryDisplayCfgn)
  return has_restorefactorydisplaycfgn()
      ? *command_.restorefactorydisplaycfgn_
      : *reinterpret_cast< ::HaWC::CmdMsg_RestoreFactoryDisplayCmd*>(&::HaWC::_CmdMsg_RestoreFactoryDisplayCmd_default_instance_);
}
inline ::HaWC::CmdMsg_RestoreFactoryDisplayCmd* CmdMsg_DisplayCmd::mutable_restorefactorydisplaycfgn() {
  if (!has_restorefactorydisplaycfgn()) {
    clear_command();
    set_has_restorefactorydisplaycfgn();
    command_.restorefactorydisplaycfgn_ = CreateMaybeMessage< ::HaWC::CmdMsg_RestoreFactoryDisplayCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.restoreFactoryDisplayCfgn)
  return command_.restorefactorydisplaycfgn_;
}

// .HaWC.CmdMsg.LoadFontsCmd loadFontsCmd = 10;
inline bool CmdMsg_DisplayCmd::has_loadfontscmd() const {
  return command_case() == kLoadFontsCmd;
}
inline void CmdMsg_DisplayCmd::set_has_loadfontscmd() {
  _oneof_case_[0] = kLoadFontsCmd;
}
inline void CmdMsg_DisplayCmd::clear_loadfontscmd() {
  if (has_loadfontscmd()) {
    delete command_.loadfontscmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_LoadFontsCmd& CmdMsg_DisplayCmd::_internal_loadfontscmd() const {
  return *command_.loadfontscmd_;
}
inline ::HaWC::CmdMsg_LoadFontsCmd* CmdMsg_DisplayCmd::release_loadfontscmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.loadFontsCmd)
  if (has_loadfontscmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_LoadFontsCmd* temp = command_.loadfontscmd_;
    command_.loadfontscmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_LoadFontsCmd& CmdMsg_DisplayCmd::loadfontscmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.loadFontsCmd)
  return has_loadfontscmd()
      ? *command_.loadfontscmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_LoadFontsCmd*>(&::HaWC::_CmdMsg_LoadFontsCmd_default_instance_);
}
inline ::HaWC::CmdMsg_LoadFontsCmd* CmdMsg_DisplayCmd::mutable_loadfontscmd() {
  if (!has_loadfontscmd()) {
    clear_command();
    set_has_loadfontscmd();
    command_.loadfontscmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_LoadFontsCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.loadFontsCmd)
  return command_.loadfontscmd_;
}

// .HaWC.CmdMsg.SaveOverlayToFileCmd saveOverlayToFileCmd = 15;
inline bool CmdMsg_DisplayCmd::has_saveoverlaytofilecmd() const {
  return command_case() == kSaveOverlayToFileCmd;
}
inline void CmdMsg_DisplayCmd::set_has_saveoverlaytofilecmd() {
  _oneof_case_[0] = kSaveOverlayToFileCmd;
}
inline void CmdMsg_DisplayCmd::clear_saveoverlaytofilecmd() {
  if (has_saveoverlaytofilecmd()) {
    delete command_.saveoverlaytofilecmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_SaveOverlayToFileCmd& CmdMsg_DisplayCmd::_internal_saveoverlaytofilecmd() const {
  return *command_.saveoverlaytofilecmd_;
}
inline ::HaWC::CmdMsg_SaveOverlayToFileCmd* CmdMsg_DisplayCmd::release_saveoverlaytofilecmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.saveOverlayToFileCmd)
  if (has_saveoverlaytofilecmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_SaveOverlayToFileCmd* temp = command_.saveoverlaytofilecmd_;
    command_.saveoverlaytofilecmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_SaveOverlayToFileCmd& CmdMsg_DisplayCmd::saveoverlaytofilecmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.saveOverlayToFileCmd)
  return has_saveoverlaytofilecmd()
      ? *command_.saveoverlaytofilecmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_SaveOverlayToFileCmd*>(&::HaWC::_CmdMsg_SaveOverlayToFileCmd_default_instance_);
}
inline ::HaWC::CmdMsg_SaveOverlayToFileCmd* CmdMsg_DisplayCmd::mutable_saveoverlaytofilecmd() {
  if (!has_saveoverlaytofilecmd()) {
    clear_command();
    set_has_saveoverlaytofilecmd();
    command_.saveoverlaytofilecmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_SaveOverlayToFileCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.saveOverlayToFileCmd)
  return command_.saveoverlaytofilecmd_;
}

// .HaWC.CmdMsg.LoadOverlayFromFileCmd loadOverlayFromFileCmd = 16;
inline bool CmdMsg_DisplayCmd::has_loadoverlayfromfilecmd() const {
  return command_case() == kLoadOverlayFromFileCmd;
}
inline void CmdMsg_DisplayCmd::set_has_loadoverlayfromfilecmd() {
  _oneof_case_[0] = kLoadOverlayFromFileCmd;
}
inline void CmdMsg_DisplayCmd::clear_loadoverlayfromfilecmd() {
  if (has_loadoverlayfromfilecmd()) {
    delete command_.loadoverlayfromfilecmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_LoadOverlayFromFileCmd& CmdMsg_DisplayCmd::_internal_loadoverlayfromfilecmd() const {
  return *command_.loadoverlayfromfilecmd_;
}
inline ::HaWC::CmdMsg_LoadOverlayFromFileCmd* CmdMsg_DisplayCmd::release_loadoverlayfromfilecmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.DisplayCmd.loadOverlayFromFileCmd)
  if (has_loadoverlayfromfilecmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_LoadOverlayFromFileCmd* temp = command_.loadoverlayfromfilecmd_;
    command_.loadoverlayfromfilecmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_LoadOverlayFromFileCmd& CmdMsg_DisplayCmd::loadoverlayfromfilecmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.DisplayCmd.loadOverlayFromFileCmd)
  return has_loadoverlayfromfilecmd()
      ? *command_.loadoverlayfromfilecmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_LoadOverlayFromFileCmd*>(&::HaWC::_CmdMsg_LoadOverlayFromFileCmd_default_instance_);
}
inline ::HaWC::CmdMsg_LoadOverlayFromFileCmd* CmdMsg_DisplayCmd::mutable_loadoverlayfromfilecmd() {
  if (!has_loadoverlayfromfilecmd()) {
    clear_command();
    set_has_loadoverlayfromfilecmd();
    command_.loadoverlayfromfilecmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_LoadOverlayFromFileCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.DisplayCmd.loadOverlayFromFileCmd)
  return command_.loadoverlayfromfilecmd_;
}

inline bool CmdMsg_DisplayCmd::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CmdMsg_DisplayCmd::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline CmdMsg_DisplayCmd::CommandCase CmdMsg_DisplayCmd::command_case() const {
  return CmdMsg_DisplayCmd::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CmdMsg_IO_Cmd

// -------------------------------------------------------------------

// CmdMsg

// uint32 seqNum = 1;
inline void CmdMsg::clear_seqnum() {
  seqnum_ = 0u;
}
inline ::google::protobuf::uint32 CmdMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.seqNum)
  return seqnum_;
}
inline void CmdMsg::set_seqnum(::google::protobuf::uint32 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:HaWC.CmdMsg.seqNum)
}

// .HaWC.CmdMsg.AppManagerCmd appCmd = 4;
inline bool CmdMsg::has_appcmd() const {
  return command_case() == kAppCmd;
}
inline void CmdMsg::set_has_appcmd() {
  _oneof_case_[0] = kAppCmd;
}
inline void CmdMsg::clear_appcmd() {
  if (has_appcmd()) {
    delete command_.appcmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_AppManagerCmd& CmdMsg::_internal_appcmd() const {
  return *command_.appcmd_;
}
inline ::HaWC::CmdMsg_AppManagerCmd* CmdMsg::release_appcmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.appCmd)
  if (has_appcmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_AppManagerCmd* temp = command_.appcmd_;
    command_.appcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_AppManagerCmd& CmdMsg::appcmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.appCmd)
  return has_appcmd()
      ? *command_.appcmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_AppManagerCmd*>(&::HaWC::_CmdMsg_AppManagerCmd_default_instance_);
}
inline ::HaWC::CmdMsg_AppManagerCmd* CmdMsg::mutable_appcmd() {
  if (!has_appcmd()) {
    clear_command();
    set_has_appcmd();
    command_.appcmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_AppManagerCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.appCmd)
  return command_.appcmd_;
}

// .HaWC.CmdMsg.DisplayCmd displayCmd = 5;
inline bool CmdMsg::has_displaycmd() const {
  return command_case() == kDisplayCmd;
}
inline void CmdMsg::set_has_displaycmd() {
  _oneof_case_[0] = kDisplayCmd;
}
inline void CmdMsg::clear_displaycmd() {
  if (has_displaycmd()) {
    delete command_.displaycmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_DisplayCmd& CmdMsg::_internal_displaycmd() const {
  return *command_.displaycmd_;
}
inline ::HaWC::CmdMsg_DisplayCmd* CmdMsg::release_displaycmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.displayCmd)
  if (has_displaycmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_DisplayCmd* temp = command_.displaycmd_;
    command_.displaycmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_DisplayCmd& CmdMsg::displaycmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.displayCmd)
  return has_displaycmd()
      ? *command_.displaycmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_DisplayCmd*>(&::HaWC::_CmdMsg_DisplayCmd_default_instance_);
}
inline ::HaWC::CmdMsg_DisplayCmd* CmdMsg::mutable_displaycmd() {
  if (!has_displaycmd()) {
    clear_command();
    set_has_displaycmd();
    command_.displaycmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_DisplayCmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.displayCmd)
  return command_.displaycmd_;
}

// .HaWC.CmdMsg.IO_Cmd ioCmd = 6;
inline bool CmdMsg::has_iocmd() const {
  return command_case() == kIoCmd;
}
inline void CmdMsg::set_has_iocmd() {
  _oneof_case_[0] = kIoCmd;
}
inline void CmdMsg::clear_iocmd() {
  if (has_iocmd()) {
    delete command_.iocmd_;
    clear_has_command();
  }
}
inline const ::HaWC::CmdMsg_IO_Cmd& CmdMsg::_internal_iocmd() const {
  return *command_.iocmd_;
}
inline ::HaWC::CmdMsg_IO_Cmd* CmdMsg::release_iocmd() {
  // @@protoc_insertion_point(field_release:HaWC.CmdMsg.ioCmd)
  if (has_iocmd()) {
    clear_has_command();
      ::HaWC::CmdMsg_IO_Cmd* temp = command_.iocmd_;
    command_.iocmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::CmdMsg_IO_Cmd& CmdMsg::iocmd() const {
  // @@protoc_insertion_point(field_get:HaWC.CmdMsg.ioCmd)
  return has_iocmd()
      ? *command_.iocmd_
      : *reinterpret_cast< ::HaWC::CmdMsg_IO_Cmd*>(&::HaWC::_CmdMsg_IO_Cmd_default_instance_);
}
inline ::HaWC::CmdMsg_IO_Cmd* CmdMsg::mutable_iocmd() {
  if (!has_iocmd()) {
    clear_command();
    set_has_iocmd();
    command_.iocmd_ = CreateMaybeMessage< ::HaWC::CmdMsg_IO_Cmd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.CmdMsg.ioCmd)
  return command_.iocmd_;
}

inline bool CmdMsg::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CmdMsg::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline CmdMsg::CommandCase CmdMsg::command_case() const {
  return CmdMsg::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RspMsg_ResetEvt

// uint32 sessionID = 1;
inline void RspMsg_ResetEvt::clear_sessionid() {
  sessionid_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_ResetEvt::sessionid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ResetEvt.sessionID)
  return sessionid_;
}
inline void RspMsg_ResetEvt::set_sessionid(::google::protobuf::uint32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ResetEvt.sessionID)
}

// -------------------------------------------------------------------

// RspMsg_SaveConfigRsp

// bool result = 1;
inline void RspMsg_SaveConfigRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_SaveConfigRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.SaveConfigRsp.result)
  return result_;
}
inline void RspMsg_SaveConfigRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.SaveConfigRsp.result)
}

// string errStr = 2;
inline void RspMsg_SaveConfigRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_SaveConfigRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.SaveConfigRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_SaveConfigRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.SaveConfigRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_SaveConfigRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.SaveConfigRsp.errStr)
}
#endif
inline void RspMsg_SaveConfigRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.SaveConfigRsp.errStr)
}
inline void RspMsg_SaveConfigRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.SaveConfigRsp.errStr)
}
inline ::std::string* RspMsg_SaveConfigRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.SaveConfigRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_SaveConfigRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.SaveConfigRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_SaveConfigRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.SaveConfigRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_LoadConfigRsp

// bool result = 1;
inline void RspMsg_LoadConfigRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_LoadConfigRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadConfigRsp.result)
  return result_;
}
inline void RspMsg_LoadConfigRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadConfigRsp.result)
}

// string errStr = 2;
inline void RspMsg_LoadConfigRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_LoadConfigRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadConfigRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_LoadConfigRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadConfigRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_LoadConfigRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.LoadConfigRsp.errStr)
}
#endif
inline void RspMsg_LoadConfigRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.LoadConfigRsp.errStr)
}
inline void RspMsg_LoadConfigRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.LoadConfigRsp.errStr)
}
inline ::std::string* RspMsg_LoadConfigRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.LoadConfigRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_LoadConfigRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.LoadConfigRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_LoadConfigRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.LoadConfigRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_ParamDetails

// string paramID = 1;
inline void RspMsg_ParamDetails::clear_paramid() {
  paramid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_ParamDetails::paramid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.paramID)
  return paramid_.GetNoArena();
}
inline void RspMsg_ParamDetails::set_paramid(const ::std::string& value) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.paramID)
}
#if LANG_CXX11
inline void RspMsg_ParamDetails::set_paramid(::std::string&& value) {
  
  paramid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.ParamDetails.paramID)
}
#endif
inline void RspMsg_ParamDetails::set_paramid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.ParamDetails.paramID)
}
inline void RspMsg_ParamDetails::set_paramid(const char* value, size_t size) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.ParamDetails.paramID)
}
inline ::std::string* RspMsg_ParamDetails::mutable_paramid() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamDetails.paramID)
  return paramid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_ParamDetails::release_paramid() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ParamDetails.paramID)
  
  return paramid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_ParamDetails::set_allocated_paramid(::std::string* paramid) {
  if (paramid != NULL) {
    
  } else {
    
  }
  paramid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramid);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.ParamDetails.paramID)
}

// uint32 offset = 2;
inline void RspMsg_ParamDetails::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_ParamDetails::offset() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.offset)
  return offset_;
}
inline void RspMsg_ParamDetails::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.offset)
}

// bool updated = 3;
inline void RspMsg_ParamDetails::clear_updated() {
  updated_ = false;
}
inline bool RspMsg_ParamDetails::updated() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.updated)
  return updated_;
}
inline void RspMsg_ParamDetails::set_updated(bool value) {
  
  updated_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.updated)
}

// bool saved = 4;
inline void RspMsg_ParamDetails::clear_saved() {
  saved_ = false;
}
inline bool RspMsg_ParamDetails::saved() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.saved)
  return saved_;
}
inline void RspMsg_ParamDetails::set_saved(bool value) {
  
  saved_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.saved)
}

// bool takenAffect = 5;
inline void RspMsg_ParamDetails::clear_takenaffect() {
  takenaffect_ = false;
}
inline bool RspMsg_ParamDetails::takenaffect() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.takenAffect)
  return takenaffect_;
}
inline void RspMsg_ParamDetails::set_takenaffect(bool value) {
  
  takenaffect_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.takenAffect)
}

// bool boolVal = 10;
inline bool RspMsg_ParamDetails::has_boolval() const {
  return Data_case() == kBoolVal;
}
inline void RspMsg_ParamDetails::set_has_boolval() {
  _oneof_case_[0] = kBoolVal;
}
inline void RspMsg_ParamDetails::clear_boolval() {
  if (has_boolval()) {
    Data_.boolval_ = false;
    clear_has_Data();
  }
}
inline bool RspMsg_ParamDetails::boolval() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.boolVal)
  if (has_boolval()) {
    return Data_.boolval_;
  }
  return false;
}
inline void RspMsg_ParamDetails::set_boolval(bool value) {
  if (!has_boolval()) {
    clear_Data();
    set_has_boolval();
  }
  Data_.boolval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.boolVal)
}

// uint32 uintVal = 11;
inline bool RspMsg_ParamDetails::has_uintval() const {
  return Data_case() == kUintVal;
}
inline void RspMsg_ParamDetails::set_has_uintval() {
  _oneof_case_[0] = kUintVal;
}
inline void RspMsg_ParamDetails::clear_uintval() {
  if (has_uintval()) {
    Data_.uintval_ = 0u;
    clear_has_Data();
  }
}
inline ::google::protobuf::uint32 RspMsg_ParamDetails::uintval() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.uintVal)
  if (has_uintval()) {
    return Data_.uintval_;
  }
  return 0u;
}
inline void RspMsg_ParamDetails::set_uintval(::google::protobuf::uint32 value) {
  if (!has_uintval()) {
    clear_Data();
    set_has_uintval();
  }
  Data_.uintval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.uintVal)
}

// sint32 intVal = 12;
inline bool RspMsg_ParamDetails::has_intval() const {
  return Data_case() == kIntVal;
}
inline void RspMsg_ParamDetails::set_has_intval() {
  _oneof_case_[0] = kIntVal;
}
inline void RspMsg_ParamDetails::clear_intval() {
  if (has_intval()) {
    Data_.intval_ = 0;
    clear_has_Data();
  }
}
inline ::google::protobuf::int32 RspMsg_ParamDetails::intval() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.intVal)
  if (has_intval()) {
    return Data_.intval_;
  }
  return 0;
}
inline void RspMsg_ParamDetails::set_intval(::google::protobuf::int32 value) {
  if (!has_intval()) {
    clear_Data();
    set_has_intval();
  }
  Data_.intval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.intVal)
}

// double doubleVal = 13;
inline bool RspMsg_ParamDetails::has_doubleval() const {
  return Data_case() == kDoubleVal;
}
inline void RspMsg_ParamDetails::set_has_doubleval() {
  _oneof_case_[0] = kDoubleVal;
}
inline void RspMsg_ParamDetails::clear_doubleval() {
  if (has_doubleval()) {
    Data_.doubleval_ = 0;
    clear_has_Data();
  }
}
inline double RspMsg_ParamDetails::doubleval() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.doubleVal)
  if (has_doubleval()) {
    return Data_.doubleval_;
  }
  return 0;
}
inline void RspMsg_ParamDetails::set_doubleval(double value) {
  if (!has_doubleval()) {
    clear_Data();
    set_has_doubleval();
  }
  Data_.doubleval_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.doubleVal)
}

// string strVal = 14;
inline bool RspMsg_ParamDetails::has_strval() const {
  return Data_case() == kStrVal;
}
inline void RspMsg_ParamDetails::set_has_strval() {
  _oneof_case_[0] = kStrVal;
}
inline void RspMsg_ParamDetails::clear_strval() {
  if (has_strval()) {
    Data_.strval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Data();
  }
}
inline const ::std::string& RspMsg_ParamDetails::strval() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.strVal)
  if (has_strval()) {
    return Data_.strval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RspMsg_ParamDetails::set_strval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.strVal)
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.strVal)
}
#if LANG_CXX11
inline void RspMsg_ParamDetails::set_strval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.strVal)
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.ParamDetails.strVal)
}
#endif
inline void RspMsg_ParamDetails::set_strval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.ParamDetails.strVal)
}
inline void RspMsg_ParamDetails::set_strval(const char* value, size_t size) {
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.ParamDetails.strVal)
}
inline ::std::string* RspMsg_ParamDetails::mutable_strval() {
  if (!has_strval()) {
    clear_Data();
    set_has_strval();
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamDetails.strVal)
  return Data_.strval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_ParamDetails::release_strval() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ParamDetails.strVal)
  if (has_strval()) {
    clear_has_Data();
    return Data_.strval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RspMsg_ParamDetails::set_allocated_strval(::std::string* strval) {
  if (!has_strval()) {
    Data_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Data();
  if (strval != NULL) {
    set_has_strval();
    Data_.strval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strval);
  }
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.ParamDetails.strVal)
}

// uint32 dataBytes = 15;
inline bool RspMsg_ParamDetails::has_databytes() const {
  return Data_case() == kDataBytes;
}
inline void RspMsg_ParamDetails::set_has_databytes() {
  _oneof_case_[0] = kDataBytes;
}
inline void RspMsg_ParamDetails::clear_databytes() {
  if (has_databytes()) {
    Data_.databytes_ = 0u;
    clear_has_Data();
  }
}
inline ::google::protobuf::uint32 RspMsg_ParamDetails::databytes() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamDetails.dataBytes)
  if (has_databytes()) {
    return Data_.databytes_;
  }
  return 0u;
}
inline void RspMsg_ParamDetails::set_databytes(::google::protobuf::uint32 value) {
  if (!has_databytes()) {
    clear_Data();
    set_has_databytes();
  }
  Data_.databytes_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamDetails.dataBytes)
}

inline bool RspMsg_ParamDetails::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void RspMsg_ParamDetails::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline RspMsg_ParamDetails::DataCase RspMsg_ParamDetails::Data_case() const {
  return RspMsg_ParamDetails::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RspMsg_ParamsRsp

// .HaWC.Targets target = 1;
inline void RspMsg_ParamsRsp::clear_target() {
  target_ = 0;
}
inline ::HaWC::Targets RspMsg_ParamsRsp::target() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsRsp.target)
  return static_cast< ::HaWC::Targets >(target_);
}
inline void RspMsg_ParamsRsp::set_target(::HaWC::Targets value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamsRsp.target)
}

// repeated .HaWC.RspMsg.ParamDetails params = 2;
inline int RspMsg_ParamsRsp::params_size() const {
  return params_.size();
}
inline void RspMsg_ParamsRsp::clear_params() {
  params_.Clear();
}
inline ::HaWC::RspMsg_ParamDetails* RspMsg_ParamsRsp::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamsRsp.params)
  return params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamDetails >*
RspMsg_ParamsRsp::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.ParamsRsp.params)
  return &params_;
}
inline const ::HaWC::RspMsg_ParamDetails& RspMsg_ParamsRsp::params(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsRsp.params)
  return params_.Get(index);
}
inline ::HaWC::RspMsg_ParamDetails* RspMsg_ParamsRsp::add_params() {
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.ParamsRsp.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamDetails >&
RspMsg_ParamsRsp::params() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.ParamsRsp.params)
  return params_;
}

// bool result = 3;
inline void RspMsg_ParamsRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_ParamsRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsRsp.result)
  return result_;
}
inline void RspMsg_ParamsRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamsRsp.result)
}

// string errStr = 4;
inline void RspMsg_ParamsRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_ParamsRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_ParamsRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamsRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_ParamsRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.ParamsRsp.errStr)
}
#endif
inline void RspMsg_ParamsRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.ParamsRsp.errStr)
}
inline void RspMsg_ParamsRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.ParamsRsp.errStr)
}
inline ::std::string* RspMsg_ParamsRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamsRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_ParamsRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ParamsRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_ParamsRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.ParamsRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_ParamCfgn

// string paramID = 1;
inline void RspMsg_ParamCfgn::clear_paramid() {
  paramid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_ParamCfgn::paramid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.paramID)
  return paramid_.GetNoArena();
}
inline void RspMsg_ParamCfgn::set_paramid(const ::std::string& value) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.paramID)
}
#if LANG_CXX11
inline void RspMsg_ParamCfgn::set_paramid(::std::string&& value) {
  
  paramid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.ParamCfgn.paramID)
}
#endif
inline void RspMsg_ParamCfgn::set_paramid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.ParamCfgn.paramID)
}
inline void RspMsg_ParamCfgn::set_paramid(const char* value, size_t size) {
  
  paramid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.ParamCfgn.paramID)
}
inline ::std::string* RspMsg_ParamCfgn::mutable_paramid() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamCfgn.paramID)
  return paramid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_ParamCfgn::release_paramid() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ParamCfgn.paramID)
  
  return paramid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_ParamCfgn::set_allocated_paramid(::std::string* paramid) {
  if (paramid != NULL) {
    
  } else {
    
  }
  paramid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramid);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.ParamCfgn.paramID)
}

// .HaWC.RspMsg.DataTypes dataType = 2;
inline void RspMsg_ParamCfgn::clear_datatype() {
  datatype_ = 0;
}
inline ::HaWC::RspMsg_DataTypes RspMsg_ParamCfgn::datatype() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.dataType)
  return static_cast< ::HaWC::RspMsg_DataTypes >(datatype_);
}
inline void RspMsg_ParamCfgn::set_datatype(::HaWC::RspMsg_DataTypes value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.dataType)
}

// uint32 count = 3;
inline void RspMsg_ParamCfgn::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_ParamCfgn::count() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.count)
  return count_;
}
inline void RspMsg_ParamCfgn::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.count)
}

// bool appResetReqd = 4;
inline void RspMsg_ParamCfgn::clear_appresetreqd() {
  appresetreqd_ = false;
}
inline bool RspMsg_ParamCfgn::appresetreqd() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.appResetReqd)
  return appresetreqd_;
}
inline void RspMsg_ParamCfgn::set_appresetreqd(bool value) {
  
  appresetreqd_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.appResetReqd)
}

// bool osResetReqd = 5;
inline void RspMsg_ParamCfgn::clear_osresetreqd() {
  osresetreqd_ = false;
}
inline bool RspMsg_ParamCfgn::osresetreqd() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.osResetReqd)
  return osresetreqd_;
}
inline void RspMsg_ParamCfgn::set_osresetreqd(bool value) {
  
  osresetreqd_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.osResetReqd)
}

// bool readble = 6;
inline void RspMsg_ParamCfgn::clear_readble() {
  readble_ = false;
}
inline bool RspMsg_ParamCfgn::readble() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.readble)
  return readble_;
}
inline void RspMsg_ParamCfgn::set_readble(bool value) {
  
  readble_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.readble)
}

// bool writeable = 7;
inline void RspMsg_ParamCfgn::clear_writeable() {
  writeable_ = false;
}
inline bool RspMsg_ParamCfgn::writeable() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.writeable)
  return writeable_;
}
inline void RspMsg_ParamCfgn::set_writeable(bool value) {
  
  writeable_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.writeable)
}

// bool scriptable = 8;
inline void RspMsg_ParamCfgn::clear_scriptable() {
  scriptable_ = false;
}
inline bool RspMsg_ParamCfgn::scriptable() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.scriptable)
  return scriptable_;
}
inline void RspMsg_ParamCfgn::set_scriptable(bool value) {
  
  scriptable_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.scriptable)
}

// string description = 9;
inline void RspMsg_ParamCfgn::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_ParamCfgn::description() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamCfgn.description)
  return description_.GetNoArena();
}
inline void RspMsg_ParamCfgn::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamCfgn.description)
}
#if LANG_CXX11
inline void RspMsg_ParamCfgn::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.ParamCfgn.description)
}
#endif
inline void RspMsg_ParamCfgn::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.ParamCfgn.description)
}
inline void RspMsg_ParamCfgn::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.ParamCfgn.description)
}
inline ::std::string* RspMsg_ParamCfgn::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamCfgn.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_ParamCfgn::release_description() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ParamCfgn.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_ParamCfgn::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.ParamCfgn.description)
}

// -------------------------------------------------------------------

// RspMsg_ParamsCfgnRsp

// .HaWC.Targets target = 1;
inline void RspMsg_ParamsCfgnRsp::clear_target() {
  target_ = 0;
}
inline ::HaWC::Targets RspMsg_ParamsCfgnRsp::target() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsCfgnRsp.target)
  return static_cast< ::HaWC::Targets >(target_);
}
inline void RspMsg_ParamsCfgnRsp::set_target(::HaWC::Targets value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamsCfgnRsp.target)
}

// repeated .HaWC.RspMsg.ParamCfgn params = 2;
inline int RspMsg_ParamsCfgnRsp::params_size() const {
  return params_.size();
}
inline void RspMsg_ParamsCfgnRsp::clear_params() {
  params_.Clear();
}
inline ::HaWC::RspMsg_ParamCfgn* RspMsg_ParamsCfgnRsp::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamsCfgnRsp.params)
  return params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamCfgn >*
RspMsg_ParamsCfgnRsp::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.ParamsCfgnRsp.params)
  return &params_;
}
inline const ::HaWC::RspMsg_ParamCfgn& RspMsg_ParamsCfgnRsp::params(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsCfgnRsp.params)
  return params_.Get(index);
}
inline ::HaWC::RspMsg_ParamCfgn* RspMsg_ParamsCfgnRsp::add_params() {
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.ParamsCfgnRsp.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ParamCfgn >&
RspMsg_ParamsCfgnRsp::params() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.ParamsCfgnRsp.params)
  return params_;
}

// bool result = 3;
inline void RspMsg_ParamsCfgnRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_ParamsCfgnRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsCfgnRsp.result)
  return result_;
}
inline void RspMsg_ParamsCfgnRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamsCfgnRsp.result)
}

// string errStr = 4;
inline void RspMsg_ParamsCfgnRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_ParamsCfgnRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ParamsCfgnRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_ParamsCfgnRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ParamsCfgnRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_ParamsCfgnRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.ParamsCfgnRsp.errStr)
}
#endif
inline void RspMsg_ParamsCfgnRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.ParamsCfgnRsp.errStr)
}
inline void RspMsg_ParamsCfgnRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.ParamsCfgnRsp.errStr)
}
inline ::std::string* RspMsg_ParamsCfgnRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ParamsCfgnRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_ParamsCfgnRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ParamsCfgnRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_ParamsCfgnRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.ParamsCfgnRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_FileHashRsp

// bytes fileHash = 1;
inline void RspMsg_FileHashRsp::clear_filehash() {
  filehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_FileHashRsp::filehash() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FileHashRsp.fileHash)
  return filehash_.GetNoArena();
}
inline void RspMsg_FileHashRsp::set_filehash(const ::std::string& value) {
  
  filehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FileHashRsp.fileHash)
}
#if LANG_CXX11
inline void RspMsg_FileHashRsp::set_filehash(::std::string&& value) {
  
  filehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.FileHashRsp.fileHash)
}
#endif
inline void RspMsg_FileHashRsp::set_filehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.FileHashRsp.fileHash)
}
inline void RspMsg_FileHashRsp::set_filehash(const void* value, size_t size) {
  
  filehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.FileHashRsp.fileHash)
}
inline ::std::string* RspMsg_FileHashRsp::mutable_filehash() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.FileHashRsp.fileHash)
  return filehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_FileHashRsp::release_filehash() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.FileHashRsp.fileHash)
  
  return filehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_FileHashRsp::set_allocated_filehash(::std::string* filehash) {
  if (filehash != NULL) {
    
  } else {
    
  }
  filehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filehash);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.FileHashRsp.fileHash)
}

// bool result = 2;
inline void RspMsg_FileHashRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_FileHashRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FileHashRsp.result)
  return result_;
}
inline void RspMsg_FileHashRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FileHashRsp.result)
}

// string errStr = 3;
inline void RspMsg_FileHashRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_FileHashRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FileHashRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_FileHashRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FileHashRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_FileHashRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.FileHashRsp.errStr)
}
#endif
inline void RspMsg_FileHashRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.FileHashRsp.errStr)
}
inline void RspMsg_FileHashRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.FileHashRsp.errStr)
}
inline ::std::string* RspMsg_FileHashRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.FileHashRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_FileHashRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.FileHashRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_FileHashRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.FileHashRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_AppManagerRsp

// .HaWC.RspMsg.SaveConfigRsp saveConfig = 5;
inline bool RspMsg_AppManagerRsp::has_saveconfig() const {
  return response_case() == kSaveConfig;
}
inline void RspMsg_AppManagerRsp::set_has_saveconfig() {
  _oneof_case_[0] = kSaveConfig;
}
inline void RspMsg_AppManagerRsp::clear_saveconfig() {
  if (has_saveconfig()) {
    delete response_.saveconfig_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_SaveConfigRsp& RspMsg_AppManagerRsp::_internal_saveconfig() const {
  return *response_.saveconfig_;
}
inline ::HaWC::RspMsg_SaveConfigRsp* RspMsg_AppManagerRsp::release_saveconfig() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.AppManagerRsp.saveConfig)
  if (has_saveconfig()) {
    clear_has_response();
      ::HaWC::RspMsg_SaveConfigRsp* temp = response_.saveconfig_;
    response_.saveconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_SaveConfigRsp& RspMsg_AppManagerRsp::saveconfig() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.AppManagerRsp.saveConfig)
  return has_saveconfig()
      ? *response_.saveconfig_
      : *reinterpret_cast< ::HaWC::RspMsg_SaveConfigRsp*>(&::HaWC::_RspMsg_SaveConfigRsp_default_instance_);
}
inline ::HaWC::RspMsg_SaveConfigRsp* RspMsg_AppManagerRsp::mutable_saveconfig() {
  if (!has_saveconfig()) {
    clear_response();
    set_has_saveconfig();
    response_.saveconfig_ = CreateMaybeMessage< ::HaWC::RspMsg_SaveConfigRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.AppManagerRsp.saveConfig)
  return response_.saveconfig_;
}

// .HaWC.RspMsg.LoadConfigRsp loadConfigRsp = 7;
inline bool RspMsg_AppManagerRsp::has_loadconfigrsp() const {
  return response_case() == kLoadConfigRsp;
}
inline void RspMsg_AppManagerRsp::set_has_loadconfigrsp() {
  _oneof_case_[0] = kLoadConfigRsp;
}
inline void RspMsg_AppManagerRsp::clear_loadconfigrsp() {
  if (has_loadconfigrsp()) {
    delete response_.loadconfigrsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_LoadConfigRsp& RspMsg_AppManagerRsp::_internal_loadconfigrsp() const {
  return *response_.loadconfigrsp_;
}
inline ::HaWC::RspMsg_LoadConfigRsp* RspMsg_AppManagerRsp::release_loadconfigrsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.AppManagerRsp.loadConfigRsp)
  if (has_loadconfigrsp()) {
    clear_has_response();
      ::HaWC::RspMsg_LoadConfigRsp* temp = response_.loadconfigrsp_;
    response_.loadconfigrsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_LoadConfigRsp& RspMsg_AppManagerRsp::loadconfigrsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.AppManagerRsp.loadConfigRsp)
  return has_loadconfigrsp()
      ? *response_.loadconfigrsp_
      : *reinterpret_cast< ::HaWC::RspMsg_LoadConfigRsp*>(&::HaWC::_RspMsg_LoadConfigRsp_default_instance_);
}
inline ::HaWC::RspMsg_LoadConfigRsp* RspMsg_AppManagerRsp::mutable_loadconfigrsp() {
  if (!has_loadconfigrsp()) {
    clear_response();
    set_has_loadconfigrsp();
    response_.loadconfigrsp_ = CreateMaybeMessage< ::HaWC::RspMsg_LoadConfigRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.AppManagerRsp.loadConfigRsp)
  return response_.loadconfigrsp_;
}

// .HaWC.RspMsg.ParamsRsp params = 9;
inline bool RspMsg_AppManagerRsp::has_params() const {
  return response_case() == kParams;
}
inline void RspMsg_AppManagerRsp::set_has_params() {
  _oneof_case_[0] = kParams;
}
inline void RspMsg_AppManagerRsp::clear_params() {
  if (has_params()) {
    delete response_.params_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_ParamsRsp& RspMsg_AppManagerRsp::_internal_params() const {
  return *response_.params_;
}
inline ::HaWC::RspMsg_ParamsRsp* RspMsg_AppManagerRsp::release_params() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.AppManagerRsp.params)
  if (has_params()) {
    clear_has_response();
      ::HaWC::RspMsg_ParamsRsp* temp = response_.params_;
    response_.params_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_ParamsRsp& RspMsg_AppManagerRsp::params() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.AppManagerRsp.params)
  return has_params()
      ? *response_.params_
      : *reinterpret_cast< ::HaWC::RspMsg_ParamsRsp*>(&::HaWC::_RspMsg_ParamsRsp_default_instance_);
}
inline ::HaWC::RspMsg_ParamsRsp* RspMsg_AppManagerRsp::mutable_params() {
  if (!has_params()) {
    clear_response();
    set_has_params();
    response_.params_ = CreateMaybeMessage< ::HaWC::RspMsg_ParamsRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.AppManagerRsp.params)
  return response_.params_;
}

// .HaWC.RspMsg.ParamsCfgnRsp getParamsCfgn = 11;
inline bool RspMsg_AppManagerRsp::has_getparamscfgn() const {
  return response_case() == kGetParamsCfgn;
}
inline void RspMsg_AppManagerRsp::set_has_getparamscfgn() {
  _oneof_case_[0] = kGetParamsCfgn;
}
inline void RspMsg_AppManagerRsp::clear_getparamscfgn() {
  if (has_getparamscfgn()) {
    delete response_.getparamscfgn_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_ParamsCfgnRsp& RspMsg_AppManagerRsp::_internal_getparamscfgn() const {
  return *response_.getparamscfgn_;
}
inline ::HaWC::RspMsg_ParamsCfgnRsp* RspMsg_AppManagerRsp::release_getparamscfgn() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.AppManagerRsp.getParamsCfgn)
  if (has_getparamscfgn()) {
    clear_has_response();
      ::HaWC::RspMsg_ParamsCfgnRsp* temp = response_.getparamscfgn_;
    response_.getparamscfgn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_ParamsCfgnRsp& RspMsg_AppManagerRsp::getparamscfgn() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.AppManagerRsp.getParamsCfgn)
  return has_getparamscfgn()
      ? *response_.getparamscfgn_
      : *reinterpret_cast< ::HaWC::RspMsg_ParamsCfgnRsp*>(&::HaWC::_RspMsg_ParamsCfgnRsp_default_instance_);
}
inline ::HaWC::RspMsg_ParamsCfgnRsp* RspMsg_AppManagerRsp::mutable_getparamscfgn() {
  if (!has_getparamscfgn()) {
    clear_response();
    set_has_getparamscfgn();
    response_.getparamscfgn_ = CreateMaybeMessage< ::HaWC::RspMsg_ParamsCfgnRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.AppManagerRsp.getParamsCfgn)
  return response_.getparamscfgn_;
}

// .HaWC.RspMsg.FileHashRsp fileHash = 15;
inline bool RspMsg_AppManagerRsp::has_filehash() const {
  return response_case() == kFileHash;
}
inline void RspMsg_AppManagerRsp::set_has_filehash() {
  _oneof_case_[0] = kFileHash;
}
inline void RspMsg_AppManagerRsp::clear_filehash() {
  if (has_filehash()) {
    delete response_.filehash_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_FileHashRsp& RspMsg_AppManagerRsp::_internal_filehash() const {
  return *response_.filehash_;
}
inline ::HaWC::RspMsg_FileHashRsp* RspMsg_AppManagerRsp::release_filehash() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.AppManagerRsp.fileHash)
  if (has_filehash()) {
    clear_has_response();
      ::HaWC::RspMsg_FileHashRsp* temp = response_.filehash_;
    response_.filehash_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_FileHashRsp& RspMsg_AppManagerRsp::filehash() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.AppManagerRsp.fileHash)
  return has_filehash()
      ? *response_.filehash_
      : *reinterpret_cast< ::HaWC::RspMsg_FileHashRsp*>(&::HaWC::_RspMsg_FileHashRsp_default_instance_);
}
inline ::HaWC::RspMsg_FileHashRsp* RspMsg_AppManagerRsp::mutable_filehash() {
  if (!has_filehash()) {
    clear_response();
    set_has_filehash();
    response_.filehash_ = CreateMaybeMessage< ::HaWC::RspMsg_FileHashRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.AppManagerRsp.fileHash)
  return response_.filehash_;
}

// .HaWC.RspMsg.ResetEvt resetEvent = 25;
inline bool RspMsg_AppManagerRsp::has_resetevent() const {
  return response_case() == kResetEvent;
}
inline void RspMsg_AppManagerRsp::set_has_resetevent() {
  _oneof_case_[0] = kResetEvent;
}
inline void RspMsg_AppManagerRsp::clear_resetevent() {
  if (has_resetevent()) {
    delete response_.resetevent_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_ResetEvt& RspMsg_AppManagerRsp::_internal_resetevent() const {
  return *response_.resetevent_;
}
inline ::HaWC::RspMsg_ResetEvt* RspMsg_AppManagerRsp::release_resetevent() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.AppManagerRsp.resetEvent)
  if (has_resetevent()) {
    clear_has_response();
      ::HaWC::RspMsg_ResetEvt* temp = response_.resetevent_;
    response_.resetevent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_ResetEvt& RspMsg_AppManagerRsp::resetevent() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.AppManagerRsp.resetEvent)
  return has_resetevent()
      ? *response_.resetevent_
      : *reinterpret_cast< ::HaWC::RspMsg_ResetEvt*>(&::HaWC::_RspMsg_ResetEvt_default_instance_);
}
inline ::HaWC::RspMsg_ResetEvt* RspMsg_AppManagerRsp::mutable_resetevent() {
  if (!has_resetevent()) {
    clear_response();
    set_has_resetevent();
    response_.resetevent_ = CreateMaybeMessage< ::HaWC::RspMsg_ResetEvt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.AppManagerRsp.resetEvent)
  return response_.resetevent_;
}

inline bool RspMsg_AppManagerRsp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void RspMsg_AppManagerRsp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline RspMsg_AppManagerRsp::ResponseCase RspMsg_AppManagerRsp::response_case() const {
  return RspMsg_AppManagerRsp::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RspMsg_FeedSourceRsp

// int32 feedID = 1;
inline void RspMsg_FeedSourceRsp::clear_feedid() {
  feedid_ = 0;
}
inline ::google::protobuf::int32 RspMsg_FeedSourceRsp::feedid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FeedSourceRsp.feedID)
  return feedid_;
}
inline void RspMsg_FeedSourceRsp::set_feedid(::google::protobuf::int32 value) {
  
  feedid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FeedSourceRsp.feedID)
}

// .HaWC.FeedType type = 2;
inline void RspMsg_FeedSourceRsp::clear_type() {
  type_ = 0;
}
inline ::HaWC::FeedType RspMsg_FeedSourceRsp::type() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FeedSourceRsp.type)
  return static_cast< ::HaWC::FeedType >(type_);
}
inline void RspMsg_FeedSourceRsp::set_type(::HaWC::FeedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FeedSourceRsp.type)
}

// string sourceStr = 3;
inline void RspMsg_FeedSourceRsp::clear_sourcestr() {
  sourcestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_FeedSourceRsp::sourcestr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FeedSourceRsp.sourceStr)
  return sourcestr_.GetNoArena();
}
inline void RspMsg_FeedSourceRsp::set_sourcestr(const ::std::string& value) {
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FeedSourceRsp.sourceStr)
}
#if LANG_CXX11
inline void RspMsg_FeedSourceRsp::set_sourcestr(::std::string&& value) {
  
  sourcestr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.FeedSourceRsp.sourceStr)
}
#endif
inline void RspMsg_FeedSourceRsp::set_sourcestr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.FeedSourceRsp.sourceStr)
}
inline void RspMsg_FeedSourceRsp::set_sourcestr(const char* value, size_t size) {
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.FeedSourceRsp.sourceStr)
}
inline ::std::string* RspMsg_FeedSourceRsp::mutable_sourcestr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.FeedSourceRsp.sourceStr)
  return sourcestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_FeedSourceRsp::release_sourcestr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.FeedSourceRsp.sourceStr)
  
  return sourcestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_FeedSourceRsp::set_allocated_sourcestr(::std::string* sourcestr) {
  if (sourcestr != NULL) {
    
  } else {
    
  }
  sourcestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcestr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.FeedSourceRsp.sourceStr)
}

// uint32 qosFrameTimeout = 4;
inline void RspMsg_FeedSourceRsp::clear_qosframetimeout() {
  qosframetimeout_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_FeedSourceRsp::qosframetimeout() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FeedSourceRsp.qosFrameTimeout)
  return qosframetimeout_;
}
inline void RspMsg_FeedSourceRsp::set_qosframetimeout(::google::protobuf::uint32 value) {
  
  qosframetimeout_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FeedSourceRsp.qosFrameTimeout)
}

// uint32 qosFrameRefresh = 5;
inline void RspMsg_FeedSourceRsp::clear_qosframerefresh() {
  qosframerefresh_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_FeedSourceRsp::qosframerefresh() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.FeedSourceRsp.qosFrameRefresh)
  return qosframerefresh_;
}
inline void RspMsg_FeedSourceRsp::set_qosframerefresh(::google::protobuf::uint32 value) {
  
  qosframerefresh_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.FeedSourceRsp.qosFrameRefresh)
}

// -------------------------------------------------------------------

// RspMsg_OverlayCreateRsp

// -------------------------------------------------------------------

// RspMsg_OverlayUpdateRsp

// -------------------------------------------------------------------

// RspMsg_OverlayRsp

// uint32 viewPortID = 1;
inline void RspMsg_OverlayRsp::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_OverlayRsp::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.OverlayRsp.viewPortID)
  return viewportid_;
}
inline void RspMsg_OverlayRsp::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.OverlayRsp.viewPortID)
}

// .HaWC.RspMsg.OverlayCreateRsp createScreen = 5;
inline bool RspMsg_OverlayRsp::has_createscreen() const {
  return response_case() == kCreateScreen;
}
inline void RspMsg_OverlayRsp::set_has_createscreen() {
  _oneof_case_[0] = kCreateScreen;
}
inline void RspMsg_OverlayRsp::clear_createscreen() {
  if (has_createscreen()) {
    delete response_.createscreen_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_OverlayCreateRsp& RspMsg_OverlayRsp::_internal_createscreen() const {
  return *response_.createscreen_;
}
inline ::HaWC::RspMsg_OverlayCreateRsp* RspMsg_OverlayRsp::release_createscreen() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.OverlayRsp.createScreen)
  if (has_createscreen()) {
    clear_has_response();
      ::HaWC::RspMsg_OverlayCreateRsp* temp = response_.createscreen_;
    response_.createscreen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_OverlayCreateRsp& RspMsg_OverlayRsp::createscreen() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.OverlayRsp.createScreen)
  return has_createscreen()
      ? *response_.createscreen_
      : *reinterpret_cast< ::HaWC::RspMsg_OverlayCreateRsp*>(&::HaWC::_RspMsg_OverlayCreateRsp_default_instance_);
}
inline ::HaWC::RspMsg_OverlayCreateRsp* RspMsg_OverlayRsp::mutable_createscreen() {
  if (!has_createscreen()) {
    clear_response();
    set_has_createscreen();
    response_.createscreen_ = CreateMaybeMessage< ::HaWC::RspMsg_OverlayCreateRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.OverlayRsp.createScreen)
  return response_.createscreen_;
}

// .HaWC.RspMsg.OverlayUpdateRsp updateSreen = 6;
inline bool RspMsg_OverlayRsp::has_updatesreen() const {
  return response_case() == kUpdateSreen;
}
inline void RspMsg_OverlayRsp::set_has_updatesreen() {
  _oneof_case_[0] = kUpdateSreen;
}
inline void RspMsg_OverlayRsp::clear_updatesreen() {
  if (has_updatesreen()) {
    delete response_.updatesreen_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_OverlayUpdateRsp& RspMsg_OverlayRsp::_internal_updatesreen() const {
  return *response_.updatesreen_;
}
inline ::HaWC::RspMsg_OverlayUpdateRsp* RspMsg_OverlayRsp::release_updatesreen() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.OverlayRsp.updateSreen)
  if (has_updatesreen()) {
    clear_has_response();
      ::HaWC::RspMsg_OverlayUpdateRsp* temp = response_.updatesreen_;
    response_.updatesreen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_OverlayUpdateRsp& RspMsg_OverlayRsp::updatesreen() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.OverlayRsp.updateSreen)
  return has_updatesreen()
      ? *response_.updatesreen_
      : *reinterpret_cast< ::HaWC::RspMsg_OverlayUpdateRsp*>(&::HaWC::_RspMsg_OverlayUpdateRsp_default_instance_);
}
inline ::HaWC::RspMsg_OverlayUpdateRsp* RspMsg_OverlayRsp::mutable_updatesreen() {
  if (!has_updatesreen()) {
    clear_response();
    set_has_updatesreen();
    response_.updatesreen_ = CreateMaybeMessage< ::HaWC::RspMsg_OverlayUpdateRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.OverlayRsp.updateSreen)
  return response_.updatesreen_;
}

inline bool RspMsg_OverlayRsp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void RspMsg_OverlayRsp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline RspMsg_OverlayRsp::ResponseCase RspMsg_OverlayRsp::response_case() const {
  return RspMsg_OverlayRsp::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RspMsg_ViewFeedRsp

// uint32 viewPortID = 1;
inline void RspMsg_ViewFeedRsp::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_ViewFeedRsp::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewFeedRsp.viewPortID)
  return viewportid_;
}
inline void RspMsg_ViewFeedRsp::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewFeedRsp.viewPortID)
}

// int32 feedID = 2;
inline void RspMsg_ViewFeedRsp::clear_feedid() {
  feedid_ = 0;
}
inline ::google::protobuf::int32 RspMsg_ViewFeedRsp::feedid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewFeedRsp.feedID)
  return feedid_;
}
inline void RspMsg_ViewFeedRsp::set_feedid(::google::protobuf::int32 value) {
  
  feedid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewFeedRsp.feedID)
}

// -------------------------------------------------------------------

// RspMsg_ViewWindowRsp

// uint32 viewPortID = 1;
inline void RspMsg_ViewWindowRsp::clear_viewportid() {
  viewportid_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_ViewWindowRsp::viewportid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.viewPortID)
  return viewportid_;
}
inline void RspMsg_ViewWindowRsp::set_viewportid(::google::protobuf::uint32 value) {
  
  viewportid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.viewPortID)
}

// int32 x = 2;
inline void RspMsg_ViewWindowRsp::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 RspMsg_ViewWindowRsp::x() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.x)
  return x_;
}
inline void RspMsg_ViewWindowRsp::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.x)
}

// int32 y = 3;
inline void RspMsg_ViewWindowRsp::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 RspMsg_ViewWindowRsp::y() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.y)
  return y_;
}
inline void RspMsg_ViewWindowRsp::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.y)
}

// int32 z = 4;
inline void RspMsg_ViewWindowRsp::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 RspMsg_ViewWindowRsp::z() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.z)
  return z_;
}
inline void RspMsg_ViewWindowRsp::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.z)
}

// int32 width = 5;
inline void RspMsg_ViewWindowRsp::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 RspMsg_ViewWindowRsp::width() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.width)
  return width_;
}
inline void RspMsg_ViewWindowRsp::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.width)
}

// int32 height = 6;
inline void RspMsg_ViewWindowRsp::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 RspMsg_ViewWindowRsp::height() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.height)
  return height_;
}
inline void RspMsg_ViewWindowRsp::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.height)
}

// double alpha = 7;
inline void RspMsg_ViewWindowRsp::clear_alpha() {
  alpha_ = 0;
}
inline double RspMsg_ViewWindowRsp::alpha() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.alpha)
  return alpha_;
}
inline void RspMsg_ViewWindowRsp::set_alpha(double value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.alpha)
}

// bool enableOverlay = 8;
inline void RspMsg_ViewWindowRsp::clear_enableoverlay() {
  enableoverlay_ = false;
}
inline bool RspMsg_ViewWindowRsp::enableoverlay() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ViewWindowRsp.enableOverlay)
  return enableoverlay_;
}
inline void RspMsg_ViewWindowRsp::set_enableoverlay(bool value) {
  
  enableoverlay_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.ViewWindowRsp.enableOverlay)
}

// -------------------------------------------------------------------

// RspMsg_DisplayCfgRsp

// bool result = 1;
inline void RspMsg_DisplayCfgRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_DisplayCfgRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.result)
  return result_;
}
inline void RspMsg_DisplayCfgRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.DisplayCfgRsp.result)
}

// string errStr = 2;
inline void RspMsg_DisplayCfgRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_DisplayCfgRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_DisplayCfgRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.DisplayCfgRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_DisplayCfgRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.DisplayCfgRsp.errStr)
}
#endif
inline void RspMsg_DisplayCfgRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.DisplayCfgRsp.errStr)
}
inline void RspMsg_DisplayCfgRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.DisplayCfgRsp.errStr)
}
inline ::std::string* RspMsg_DisplayCfgRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayCfgRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_DisplayCfgRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayCfgRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_DisplayCfgRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.DisplayCfgRsp.errStr)
}

// repeated .HaWC.RspMsg.FeedSourceRsp feedSrcs = 5;
inline int RspMsg_DisplayCfgRsp::feedsrcs_size() const {
  return feedsrcs_.size();
}
inline void RspMsg_DisplayCfgRsp::clear_feedsrcs() {
  feedsrcs_.Clear();
}
inline ::HaWC::RspMsg_FeedSourceRsp* RspMsg_DisplayCfgRsp::mutable_feedsrcs(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayCfgRsp.feedSrcs)
  return feedsrcs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_FeedSourceRsp >*
RspMsg_DisplayCfgRsp::mutable_feedsrcs() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.DisplayCfgRsp.feedSrcs)
  return &feedsrcs_;
}
inline const ::HaWC::RspMsg_FeedSourceRsp& RspMsg_DisplayCfgRsp::feedsrcs(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.feedSrcs)
  return feedsrcs_.Get(index);
}
inline ::HaWC::RspMsg_FeedSourceRsp* RspMsg_DisplayCfgRsp::add_feedsrcs() {
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.DisplayCfgRsp.feedSrcs)
  return feedsrcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_FeedSourceRsp >&
RspMsg_DisplayCfgRsp::feedsrcs() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.DisplayCfgRsp.feedSrcs)
  return feedsrcs_;
}

// .HaWC.RspMsg.OverlayRsp mainOverlaySet = 7;
inline bool RspMsg_DisplayCfgRsp::has_mainoverlayset() const {
  return this != internal_default_instance() && mainoverlayset_ != NULL;
}
inline void RspMsg_DisplayCfgRsp::clear_mainoverlayset() {
  if (GetArenaNoVirtual() == NULL && mainoverlayset_ != NULL) {
    delete mainoverlayset_;
  }
  mainoverlayset_ = NULL;
}
inline const ::HaWC::RspMsg_OverlayRsp& RspMsg_DisplayCfgRsp::_internal_mainoverlayset() const {
  return *mainoverlayset_;
}
inline const ::HaWC::RspMsg_OverlayRsp& RspMsg_DisplayCfgRsp::mainoverlayset() const {
  const ::HaWC::RspMsg_OverlayRsp* p = mainoverlayset_;
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.mainOverlaySet)
  return p != NULL ? *p : *reinterpret_cast<const ::HaWC::RspMsg_OverlayRsp*>(
      &::HaWC::_RspMsg_OverlayRsp_default_instance_);
}
inline ::HaWC::RspMsg_OverlayRsp* RspMsg_DisplayCfgRsp::release_mainoverlayset() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayCfgRsp.mainOverlaySet)
  
  ::HaWC::RspMsg_OverlayRsp* temp = mainoverlayset_;
  mainoverlayset_ = NULL;
  return temp;
}
inline ::HaWC::RspMsg_OverlayRsp* RspMsg_DisplayCfgRsp::mutable_mainoverlayset() {
  
  if (mainoverlayset_ == NULL) {
    auto* p = CreateMaybeMessage<::HaWC::RspMsg_OverlayRsp>(GetArenaNoVirtual());
    mainoverlayset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayCfgRsp.mainOverlaySet)
  return mainoverlayset_;
}
inline void RspMsg_DisplayCfgRsp::set_allocated_mainoverlayset(::HaWC::RspMsg_OverlayRsp* mainoverlayset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mainoverlayset_;
  }
  if (mainoverlayset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mainoverlayset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mainoverlayset, submessage_arena);
    }
    
  } else {
    
  }
  mainoverlayset_ = mainoverlayset;
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.DisplayCfgRsp.mainOverlaySet)
}

// repeated .HaWC.RspMsg.ViewFeedRsp viewFeeds = 9;
inline int RspMsg_DisplayCfgRsp::viewfeeds_size() const {
  return viewfeeds_.size();
}
inline void RspMsg_DisplayCfgRsp::clear_viewfeeds() {
  viewfeeds_.Clear();
}
inline ::HaWC::RspMsg_ViewFeedRsp* RspMsg_DisplayCfgRsp::mutable_viewfeeds(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayCfgRsp.viewFeeds)
  return viewfeeds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewFeedRsp >*
RspMsg_DisplayCfgRsp::mutable_viewfeeds() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.DisplayCfgRsp.viewFeeds)
  return &viewfeeds_;
}
inline const ::HaWC::RspMsg_ViewFeedRsp& RspMsg_DisplayCfgRsp::viewfeeds(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.viewFeeds)
  return viewfeeds_.Get(index);
}
inline ::HaWC::RspMsg_ViewFeedRsp* RspMsg_DisplayCfgRsp::add_viewfeeds() {
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.DisplayCfgRsp.viewFeeds)
  return viewfeeds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewFeedRsp >&
RspMsg_DisplayCfgRsp::viewfeeds() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.DisplayCfgRsp.viewFeeds)
  return viewfeeds_;
}

// repeated .HaWC.RspMsg.ViewWindowRsp viewWindows = 10;
inline int RspMsg_DisplayCfgRsp::viewwindows_size() const {
  return viewwindows_.size();
}
inline void RspMsg_DisplayCfgRsp::clear_viewwindows() {
  viewwindows_.Clear();
}
inline ::HaWC::RspMsg_ViewWindowRsp* RspMsg_DisplayCfgRsp::mutable_viewwindows(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayCfgRsp.viewWindows)
  return viewwindows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewWindowRsp >*
RspMsg_DisplayCfgRsp::mutable_viewwindows() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.DisplayCfgRsp.viewWindows)
  return &viewwindows_;
}
inline const ::HaWC::RspMsg_ViewWindowRsp& RspMsg_DisplayCfgRsp::viewwindows(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.viewWindows)
  return viewwindows_.Get(index);
}
inline ::HaWC::RspMsg_ViewWindowRsp* RspMsg_DisplayCfgRsp::add_viewwindows() {
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.DisplayCfgRsp.viewWindows)
  return viewwindows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_ViewWindowRsp >&
RspMsg_DisplayCfgRsp::viewwindows() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.DisplayCfgRsp.viewWindows)
  return viewwindows_;
}

// repeated .HaWC.RspMsg.OverlayRsp viewOverlaysSet = 12;
inline int RspMsg_DisplayCfgRsp::viewoverlaysset_size() const {
  return viewoverlaysset_.size();
}
inline void RspMsg_DisplayCfgRsp::clear_viewoverlaysset() {
  viewoverlaysset_.Clear();
}
inline ::HaWC::RspMsg_OverlayRsp* RspMsg_DisplayCfgRsp::mutable_viewoverlaysset(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayCfgRsp.viewOverlaysSet)
  return viewoverlaysset_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_OverlayRsp >*
RspMsg_DisplayCfgRsp::mutable_viewoverlaysset() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.DisplayCfgRsp.viewOverlaysSet)
  return &viewoverlaysset_;
}
inline const ::HaWC::RspMsg_OverlayRsp& RspMsg_DisplayCfgRsp::viewoverlaysset(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayCfgRsp.viewOverlaysSet)
  return viewoverlaysset_.Get(index);
}
inline ::HaWC::RspMsg_OverlayRsp* RspMsg_DisplayCfgRsp::add_viewoverlaysset() {
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.DisplayCfgRsp.viewOverlaysSet)
  return viewoverlaysset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HaWC::RspMsg_OverlayRsp >&
RspMsg_DisplayCfgRsp::viewoverlaysset() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.DisplayCfgRsp.viewOverlaysSet)
  return viewoverlaysset_;
}

// -------------------------------------------------------------------

// RspMsg_SaveDisplayRsp

// bool result = 1;
inline void RspMsg_SaveDisplayRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_SaveDisplayRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.SaveDisplayRsp.result)
  return result_;
}
inline void RspMsg_SaveDisplayRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.SaveDisplayRsp.result)
}

// string errStr = 2;
inline void RspMsg_SaveDisplayRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_SaveDisplayRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.SaveDisplayRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_SaveDisplayRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.SaveDisplayRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_SaveDisplayRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.SaveDisplayRsp.errStr)
}
#endif
inline void RspMsg_SaveDisplayRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.SaveDisplayRsp.errStr)
}
inline void RspMsg_SaveDisplayRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.SaveDisplayRsp.errStr)
}
inline ::std::string* RspMsg_SaveDisplayRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.SaveDisplayRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_SaveDisplayRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.SaveDisplayRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_SaveDisplayRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.SaveDisplayRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_LoadDisplayRsp

// bool result = 1;
inline void RspMsg_LoadDisplayRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_LoadDisplayRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadDisplayRsp.result)
  return result_;
}
inline void RspMsg_LoadDisplayRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadDisplayRsp.result)
}

// string errStr = 2;
inline void RspMsg_LoadDisplayRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_LoadDisplayRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadDisplayRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_LoadDisplayRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadDisplayRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_LoadDisplayRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.LoadDisplayRsp.errStr)
}
#endif
inline void RspMsg_LoadDisplayRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.LoadDisplayRsp.errStr)
}
inline void RspMsg_LoadDisplayRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.LoadDisplayRsp.errStr)
}
inline ::std::string* RspMsg_LoadDisplayRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.LoadDisplayRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_LoadDisplayRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.LoadDisplayRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_LoadDisplayRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.LoadDisplayRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_LoadFontsRsp

// bool result = 1;
inline void RspMsg_LoadFontsRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_LoadFontsRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadFontsRsp.result)
  return result_;
}
inline void RspMsg_LoadFontsRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadFontsRsp.result)
}

// string errStr = 2;
inline void RspMsg_LoadFontsRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_LoadFontsRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadFontsRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_LoadFontsRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadFontsRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_LoadFontsRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.LoadFontsRsp.errStr)
}
#endif
inline void RspMsg_LoadFontsRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.LoadFontsRsp.errStr)
}
inline void RspMsg_LoadFontsRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.LoadFontsRsp.errStr)
}
inline ::std::string* RspMsg_LoadFontsRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.LoadFontsRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_LoadFontsRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.LoadFontsRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_LoadFontsRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.LoadFontsRsp.errStr)
}

// repeated string fontFiles = 4;
inline int RspMsg_LoadFontsRsp::fontfiles_size() const {
  return fontfiles_.size();
}
inline void RspMsg_LoadFontsRsp::clear_fontfiles() {
  fontfiles_.Clear();
}
inline const ::std::string& RspMsg_LoadFontsRsp::fontfiles(int index) const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  return fontfiles_.Get(index);
}
inline ::std::string* RspMsg_LoadFontsRsp::mutable_fontfiles(int index) {
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  return fontfiles_.Mutable(index);
}
inline void RspMsg_LoadFontsRsp::set_fontfiles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  fontfiles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RspMsg_LoadFontsRsp::set_fontfiles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  fontfiles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RspMsg_LoadFontsRsp::set_fontfiles(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fontfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.LoadFontsRsp.fontFiles)
}
inline void RspMsg_LoadFontsRsp::set_fontfiles(int index, const char* value, size_t size) {
  fontfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.LoadFontsRsp.fontFiles)
}
inline ::std::string* RspMsg_LoadFontsRsp::add_fontfiles() {
  // @@protoc_insertion_point(field_add_mutable:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  return fontfiles_.Add();
}
inline void RspMsg_LoadFontsRsp::add_fontfiles(const ::std::string& value) {
  fontfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.LoadFontsRsp.fontFiles)
}
#if LANG_CXX11
inline void RspMsg_LoadFontsRsp::add_fontfiles(::std::string&& value) {
  fontfiles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HaWC.RspMsg.LoadFontsRsp.fontFiles)
}
#endif
inline void RspMsg_LoadFontsRsp::add_fontfiles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fontfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HaWC.RspMsg.LoadFontsRsp.fontFiles)
}
inline void RspMsg_LoadFontsRsp::add_fontfiles(const char* value, size_t size) {
  fontfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HaWC.RspMsg.LoadFontsRsp.fontFiles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RspMsg_LoadFontsRsp::fontfiles() const {
  // @@protoc_insertion_point(field_list:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  return fontfiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RspMsg_LoadFontsRsp::mutable_fontfiles() {
  // @@protoc_insertion_point(field_mutable_list:HaWC.RspMsg.LoadFontsRsp.fontFiles)
  return &fontfiles_;
}

// -------------------------------------------------------------------

// RspMsg_SaveOverlayToFileRsp

// bool result = 1;
inline void RspMsg_SaveOverlayToFileRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_SaveOverlayToFileRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.SaveOverlayToFileRsp.result)
  return result_;
}
inline void RspMsg_SaveOverlayToFileRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.SaveOverlayToFileRsp.result)
}

// string errStr = 2;
inline void RspMsg_SaveOverlayToFileRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_SaveOverlayToFileRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_SaveOverlayToFileRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_SaveOverlayToFileRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
}
#endif
inline void RspMsg_SaveOverlayToFileRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
}
inline void RspMsg_SaveOverlayToFileRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
}
inline ::std::string* RspMsg_SaveOverlayToFileRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_SaveOverlayToFileRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_SaveOverlayToFileRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.SaveOverlayToFileRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_LoadOverlayFromFileRsp

// bool result = 1;
inline void RspMsg_LoadOverlayFromFileRsp::clear_result() {
  result_ = false;
}
inline bool RspMsg_LoadOverlayFromFileRsp::result() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadOverlayFromFileRsp.result)
  return result_;
}
inline void RspMsg_LoadOverlayFromFileRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadOverlayFromFileRsp.result)
}

// string errStr = 2;
inline void RspMsg_LoadOverlayFromFileRsp::clear_errstr() {
  errstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_LoadOverlayFromFileRsp::errstr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
  return errstr_.GetNoArena();
}
inline void RspMsg_LoadOverlayFromFileRsp::set_errstr(const ::std::string& value) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
}
#if LANG_CXX11
inline void RspMsg_LoadOverlayFromFileRsp::set_errstr(::std::string&& value) {
  
  errstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
}
#endif
inline void RspMsg_LoadOverlayFromFileRsp::set_errstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
}
inline void RspMsg_LoadOverlayFromFileRsp::set_errstr(const char* value, size_t size) {
  
  errstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
}
inline ::std::string* RspMsg_LoadOverlayFromFileRsp::mutable_errstr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
  return errstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_LoadOverlayFromFileRsp::release_errstr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
  
  return errstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_LoadOverlayFromFileRsp::set_allocated_errstr(::std::string* errstr) {
  if (errstr != NULL) {
    
  } else {
    
  }
  errstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errstr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.LoadOverlayFromFileRsp.errStr)
}

// -------------------------------------------------------------------

// RspMsg_QosBcast

// string feedName = 1;
inline void RspMsg_QosBcast::clear_feedname() {
  feedname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_QosBcast::feedname() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.QosBcast.feedName)
  return feedname_.GetNoArena();
}
inline void RspMsg_QosBcast::set_feedname(const ::std::string& value) {
  
  feedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.QosBcast.feedName)
}
#if LANG_CXX11
inline void RspMsg_QosBcast::set_feedname(::std::string&& value) {
  
  feedname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.QosBcast.feedName)
}
#endif
inline void RspMsg_QosBcast::set_feedname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.QosBcast.feedName)
}
inline void RspMsg_QosBcast::set_feedname(const char* value, size_t size) {
  
  feedname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.QosBcast.feedName)
}
inline ::std::string* RspMsg_QosBcast::mutable_feedname() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.QosBcast.feedName)
  return feedname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_QosBcast::release_feedname() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.QosBcast.feedName)
  
  return feedname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_QosBcast::set_allocated_feedname(::std::string* feedname) {
  if (feedname != NULL) {
    
  } else {
    
  }
  feedname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedname);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.QosBcast.feedName)
}

// .HaWC.FeedType feedType = 2;
inline void RspMsg_QosBcast::clear_feedtype() {
  feedtype_ = 0;
}
inline ::HaWC::FeedType RspMsg_QosBcast::feedtype() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.QosBcast.feedType)
  return static_cast< ::HaWC::FeedType >(feedtype_);
}
inline void RspMsg_QosBcast::set_feedtype(::HaWC::FeedType value) {
  
  feedtype_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.QosBcast.feedType)
}

// string sourceStr = 3;
inline void RspMsg_QosBcast::clear_sourcestr() {
  sourcestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspMsg_QosBcast::sourcestr() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.QosBcast.sourceStr)
  return sourcestr_.GetNoArena();
}
inline void RspMsg_QosBcast::set_sourcestr(const ::std::string& value) {
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.QosBcast.sourceStr)
}
#if LANG_CXX11
inline void RspMsg_QosBcast::set_sourcestr(::std::string&& value) {
  
  sourcestr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HaWC.RspMsg.QosBcast.sourceStr)
}
#endif
inline void RspMsg_QosBcast::set_sourcestr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HaWC.RspMsg.QosBcast.sourceStr)
}
inline void RspMsg_QosBcast::set_sourcestr(const char* value, size_t size) {
  
  sourcestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HaWC.RspMsg.QosBcast.sourceStr)
}
inline ::std::string* RspMsg_QosBcast::mutable_sourcestr() {
  
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.QosBcast.sourceStr)
  return sourcestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspMsg_QosBcast::release_sourcestr() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.QosBcast.sourceStr)
  
  return sourcestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspMsg_QosBcast::set_allocated_sourcestr(::std::string* sourcestr) {
  if (sourcestr != NULL) {
    
  } else {
    
  }
  sourcestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcestr);
  // @@protoc_insertion_point(field_set_allocated:HaWC.RspMsg.QosBcast.sourceStr)
}

// .HaWC.QosStates qosState = 4;
inline void RspMsg_QosBcast::clear_qosstate() {
  qosstate_ = 0;
}
inline ::HaWC::QosStates RspMsg_QosBcast::qosstate() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.QosBcast.qosState)
  return static_cast< ::HaWC::QosStates >(qosstate_);
}
inline void RspMsg_QosBcast::set_qosstate(::HaWC::QosStates value) {
  
  qosstate_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.QosBcast.qosState)
}

// bool repeat = 5;
inline void RspMsg_QosBcast::clear_repeat() {
  repeat_ = false;
}
inline bool RspMsg_QosBcast::repeat() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.QosBcast.repeat)
  return repeat_;
}
inline void RspMsg_QosBcast::set_repeat(bool value) {
  
  repeat_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.QosBcast.repeat)
}

// int32 timeSinceFrame = 6;
inline void RspMsg_QosBcast::clear_timesinceframe() {
  timesinceframe_ = 0;
}
inline ::google::protobuf::int32 RspMsg_QosBcast::timesinceframe() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.QosBcast.timeSinceFrame)
  return timesinceframe_;
}
inline void RspMsg_QosBcast::set_timesinceframe(::google::protobuf::int32 value) {
  
  timesinceframe_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.QosBcast.timeSinceFrame)
}

// -------------------------------------------------------------------

// RspMsg_DisplayRsp

// .HaWC.RspMsg.DisplayCfgRsp displayCfgRsp = 1;
inline bool RspMsg_DisplayRsp::has_displaycfgrsp() const {
  return response_case() == kDisplayCfgRsp;
}
inline void RspMsg_DisplayRsp::set_has_displaycfgrsp() {
  _oneof_case_[0] = kDisplayCfgRsp;
}
inline void RspMsg_DisplayRsp::clear_displaycfgrsp() {
  if (has_displaycfgrsp()) {
    delete response_.displaycfgrsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_DisplayCfgRsp& RspMsg_DisplayRsp::_internal_displaycfgrsp() const {
  return *response_.displaycfgrsp_;
}
inline ::HaWC::RspMsg_DisplayCfgRsp* RspMsg_DisplayRsp::release_displaycfgrsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.displayCfgRsp)
  if (has_displaycfgrsp()) {
    clear_has_response();
      ::HaWC::RspMsg_DisplayCfgRsp* temp = response_.displaycfgrsp_;
    response_.displaycfgrsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_DisplayCfgRsp& RspMsg_DisplayRsp::displaycfgrsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.displayCfgRsp)
  return has_displaycfgrsp()
      ? *response_.displaycfgrsp_
      : *reinterpret_cast< ::HaWC::RspMsg_DisplayCfgRsp*>(&::HaWC::_RspMsg_DisplayCfgRsp_default_instance_);
}
inline ::HaWC::RspMsg_DisplayCfgRsp* RspMsg_DisplayRsp::mutable_displaycfgrsp() {
  if (!has_displaycfgrsp()) {
    clear_response();
    set_has_displaycfgrsp();
    response_.displaycfgrsp_ = CreateMaybeMessage< ::HaWC::RspMsg_DisplayCfgRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.displayCfgRsp)
  return response_.displaycfgrsp_;
}

// .HaWC.RspMsg.SaveDisplayRsp saveDisplayRsp = 5;
inline bool RspMsg_DisplayRsp::has_savedisplayrsp() const {
  return response_case() == kSaveDisplayRsp;
}
inline void RspMsg_DisplayRsp::set_has_savedisplayrsp() {
  _oneof_case_[0] = kSaveDisplayRsp;
}
inline void RspMsg_DisplayRsp::clear_savedisplayrsp() {
  if (has_savedisplayrsp()) {
    delete response_.savedisplayrsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_SaveDisplayRsp& RspMsg_DisplayRsp::_internal_savedisplayrsp() const {
  return *response_.savedisplayrsp_;
}
inline ::HaWC::RspMsg_SaveDisplayRsp* RspMsg_DisplayRsp::release_savedisplayrsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.saveDisplayRsp)
  if (has_savedisplayrsp()) {
    clear_has_response();
      ::HaWC::RspMsg_SaveDisplayRsp* temp = response_.savedisplayrsp_;
    response_.savedisplayrsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_SaveDisplayRsp& RspMsg_DisplayRsp::savedisplayrsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.saveDisplayRsp)
  return has_savedisplayrsp()
      ? *response_.savedisplayrsp_
      : *reinterpret_cast< ::HaWC::RspMsg_SaveDisplayRsp*>(&::HaWC::_RspMsg_SaveDisplayRsp_default_instance_);
}
inline ::HaWC::RspMsg_SaveDisplayRsp* RspMsg_DisplayRsp::mutable_savedisplayrsp() {
  if (!has_savedisplayrsp()) {
    clear_response();
    set_has_savedisplayrsp();
    response_.savedisplayrsp_ = CreateMaybeMessage< ::HaWC::RspMsg_SaveDisplayRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.saveDisplayRsp)
  return response_.savedisplayrsp_;
}

// .HaWC.RspMsg.LoadDisplayRsp loadDisplayRsp = 7;
inline bool RspMsg_DisplayRsp::has_loaddisplayrsp() const {
  return response_case() == kLoadDisplayRsp;
}
inline void RspMsg_DisplayRsp::set_has_loaddisplayrsp() {
  _oneof_case_[0] = kLoadDisplayRsp;
}
inline void RspMsg_DisplayRsp::clear_loaddisplayrsp() {
  if (has_loaddisplayrsp()) {
    delete response_.loaddisplayrsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_LoadDisplayRsp& RspMsg_DisplayRsp::_internal_loaddisplayrsp() const {
  return *response_.loaddisplayrsp_;
}
inline ::HaWC::RspMsg_LoadDisplayRsp* RspMsg_DisplayRsp::release_loaddisplayrsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.loadDisplayRsp)
  if (has_loaddisplayrsp()) {
    clear_has_response();
      ::HaWC::RspMsg_LoadDisplayRsp* temp = response_.loaddisplayrsp_;
    response_.loaddisplayrsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_LoadDisplayRsp& RspMsg_DisplayRsp::loaddisplayrsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.loadDisplayRsp)
  return has_loaddisplayrsp()
      ? *response_.loaddisplayrsp_
      : *reinterpret_cast< ::HaWC::RspMsg_LoadDisplayRsp*>(&::HaWC::_RspMsg_LoadDisplayRsp_default_instance_);
}
inline ::HaWC::RspMsg_LoadDisplayRsp* RspMsg_DisplayRsp::mutable_loaddisplayrsp() {
  if (!has_loaddisplayrsp()) {
    clear_response();
    set_has_loaddisplayrsp();
    response_.loaddisplayrsp_ = CreateMaybeMessage< ::HaWC::RspMsg_LoadDisplayRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.loadDisplayRsp)
  return response_.loaddisplayrsp_;
}

// .HaWC.RspMsg.LoadFontsRsp loadFontsRsp = 10;
inline bool RspMsg_DisplayRsp::has_loadfontsrsp() const {
  return response_case() == kLoadFontsRsp;
}
inline void RspMsg_DisplayRsp::set_has_loadfontsrsp() {
  _oneof_case_[0] = kLoadFontsRsp;
}
inline void RspMsg_DisplayRsp::clear_loadfontsrsp() {
  if (has_loadfontsrsp()) {
    delete response_.loadfontsrsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_LoadFontsRsp& RspMsg_DisplayRsp::_internal_loadfontsrsp() const {
  return *response_.loadfontsrsp_;
}
inline ::HaWC::RspMsg_LoadFontsRsp* RspMsg_DisplayRsp::release_loadfontsrsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.loadFontsRsp)
  if (has_loadfontsrsp()) {
    clear_has_response();
      ::HaWC::RspMsg_LoadFontsRsp* temp = response_.loadfontsrsp_;
    response_.loadfontsrsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_LoadFontsRsp& RspMsg_DisplayRsp::loadfontsrsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.loadFontsRsp)
  return has_loadfontsrsp()
      ? *response_.loadfontsrsp_
      : *reinterpret_cast< ::HaWC::RspMsg_LoadFontsRsp*>(&::HaWC::_RspMsg_LoadFontsRsp_default_instance_);
}
inline ::HaWC::RspMsg_LoadFontsRsp* RspMsg_DisplayRsp::mutable_loadfontsrsp() {
  if (!has_loadfontsrsp()) {
    clear_response();
    set_has_loadfontsrsp();
    response_.loadfontsrsp_ = CreateMaybeMessage< ::HaWC::RspMsg_LoadFontsRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.loadFontsRsp)
  return response_.loadfontsrsp_;
}

// .HaWC.RspMsg.SaveOverlayToFileRsp saveOverlayToFileRsp = 15;
inline bool RspMsg_DisplayRsp::has_saveoverlaytofilersp() const {
  return response_case() == kSaveOverlayToFileRsp;
}
inline void RspMsg_DisplayRsp::set_has_saveoverlaytofilersp() {
  _oneof_case_[0] = kSaveOverlayToFileRsp;
}
inline void RspMsg_DisplayRsp::clear_saveoverlaytofilersp() {
  if (has_saveoverlaytofilersp()) {
    delete response_.saveoverlaytofilersp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_SaveOverlayToFileRsp& RspMsg_DisplayRsp::_internal_saveoverlaytofilersp() const {
  return *response_.saveoverlaytofilersp_;
}
inline ::HaWC::RspMsg_SaveOverlayToFileRsp* RspMsg_DisplayRsp::release_saveoverlaytofilersp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.saveOverlayToFileRsp)
  if (has_saveoverlaytofilersp()) {
    clear_has_response();
      ::HaWC::RspMsg_SaveOverlayToFileRsp* temp = response_.saveoverlaytofilersp_;
    response_.saveoverlaytofilersp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_SaveOverlayToFileRsp& RspMsg_DisplayRsp::saveoverlaytofilersp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.saveOverlayToFileRsp)
  return has_saveoverlaytofilersp()
      ? *response_.saveoverlaytofilersp_
      : *reinterpret_cast< ::HaWC::RspMsg_SaveOverlayToFileRsp*>(&::HaWC::_RspMsg_SaveOverlayToFileRsp_default_instance_);
}
inline ::HaWC::RspMsg_SaveOverlayToFileRsp* RspMsg_DisplayRsp::mutable_saveoverlaytofilersp() {
  if (!has_saveoverlaytofilersp()) {
    clear_response();
    set_has_saveoverlaytofilersp();
    response_.saveoverlaytofilersp_ = CreateMaybeMessage< ::HaWC::RspMsg_SaveOverlayToFileRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.saveOverlayToFileRsp)
  return response_.saveoverlaytofilersp_;
}

// .HaWC.RspMsg.LoadOverlayFromFileRsp loadOverlayFromFileRsp = 16;
inline bool RspMsg_DisplayRsp::has_loadoverlayfromfilersp() const {
  return response_case() == kLoadOverlayFromFileRsp;
}
inline void RspMsg_DisplayRsp::set_has_loadoverlayfromfilersp() {
  _oneof_case_[0] = kLoadOverlayFromFileRsp;
}
inline void RspMsg_DisplayRsp::clear_loadoverlayfromfilersp() {
  if (has_loadoverlayfromfilersp()) {
    delete response_.loadoverlayfromfilersp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_LoadOverlayFromFileRsp& RspMsg_DisplayRsp::_internal_loadoverlayfromfilersp() const {
  return *response_.loadoverlayfromfilersp_;
}
inline ::HaWC::RspMsg_LoadOverlayFromFileRsp* RspMsg_DisplayRsp::release_loadoverlayfromfilersp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.loadOverlayFromFileRsp)
  if (has_loadoverlayfromfilersp()) {
    clear_has_response();
      ::HaWC::RspMsg_LoadOverlayFromFileRsp* temp = response_.loadoverlayfromfilersp_;
    response_.loadoverlayfromfilersp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_LoadOverlayFromFileRsp& RspMsg_DisplayRsp::loadoverlayfromfilersp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.loadOverlayFromFileRsp)
  return has_loadoverlayfromfilersp()
      ? *response_.loadoverlayfromfilersp_
      : *reinterpret_cast< ::HaWC::RspMsg_LoadOverlayFromFileRsp*>(&::HaWC::_RspMsg_LoadOverlayFromFileRsp_default_instance_);
}
inline ::HaWC::RspMsg_LoadOverlayFromFileRsp* RspMsg_DisplayRsp::mutable_loadoverlayfromfilersp() {
  if (!has_loadoverlayfromfilersp()) {
    clear_response();
    set_has_loadoverlayfromfilersp();
    response_.loadoverlayfromfilersp_ = CreateMaybeMessage< ::HaWC::RspMsg_LoadOverlayFromFileRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.loadOverlayFromFileRsp)
  return response_.loadoverlayfromfilersp_;
}

// .HaWC.RspMsg.QosBcast qosBcast = 20;
inline bool RspMsg_DisplayRsp::has_qosbcast() const {
  return response_case() == kQosBcast;
}
inline void RspMsg_DisplayRsp::set_has_qosbcast() {
  _oneof_case_[0] = kQosBcast;
}
inline void RspMsg_DisplayRsp::clear_qosbcast() {
  if (has_qosbcast()) {
    delete response_.qosbcast_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_QosBcast& RspMsg_DisplayRsp::_internal_qosbcast() const {
  return *response_.qosbcast_;
}
inline ::HaWC::RspMsg_QosBcast* RspMsg_DisplayRsp::release_qosbcast() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.DisplayRsp.qosBcast)
  if (has_qosbcast()) {
    clear_has_response();
      ::HaWC::RspMsg_QosBcast* temp = response_.qosbcast_;
    response_.qosbcast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_QosBcast& RspMsg_DisplayRsp::qosbcast() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.DisplayRsp.qosBcast)
  return has_qosbcast()
      ? *response_.qosbcast_
      : *reinterpret_cast< ::HaWC::RspMsg_QosBcast*>(&::HaWC::_RspMsg_QosBcast_default_instance_);
}
inline ::HaWC::RspMsg_QosBcast* RspMsg_DisplayRsp::mutable_qosbcast() {
  if (!has_qosbcast()) {
    clear_response();
    set_has_qosbcast();
    response_.qosbcast_ = CreateMaybeMessage< ::HaWC::RspMsg_QosBcast >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.DisplayRsp.qosBcast)
  return response_.qosbcast_;
}

inline bool RspMsg_DisplayRsp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void RspMsg_DisplayRsp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline RspMsg_DisplayRsp::ResponseCase RspMsg_DisplayRsp::response_case() const {
  return RspMsg_DisplayRsp::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RspMsg_IO_Bcast

// bool newData = 1;
inline void RspMsg_IO_Bcast::clear_newdata() {
  newdata_ = false;
}
inline bool RspMsg_IO_Bcast::newdata() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.newData)
  return newdata_;
}
inline void RspMsg_IO_Bcast::set_newdata(bool value) {
  
  newdata_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.newData)
}

// uint32 sessionID = 2;
inline void RspMsg_IO_Bcast::clear_sessionid() {
  sessionid_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_IO_Bcast::sessionid() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.sessionID)
  return sessionid_;
}
inline void RspMsg_IO_Bcast::set_sessionid(::google::protobuf::uint32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.sessionID)
}

// uint32 btns = 5;
inline void RspMsg_IO_Bcast::clear_btns() {
  btns_ = 0u;
}
inline ::google::protobuf::uint32 RspMsg_IO_Bcast::btns() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.btns)
  return btns_;
}
inline void RspMsg_IO_Bcast::set_btns(::google::protobuf::uint32 value) {
  
  btns_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.btns)
}

// sint32 leftRocker = 6;
inline void RspMsg_IO_Bcast::clear_leftrocker() {
  leftrocker_ = 0;
}
inline ::google::protobuf::int32 RspMsg_IO_Bcast::leftrocker() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.leftRocker)
  return leftrocker_;
}
inline void RspMsg_IO_Bcast::set_leftrocker(::google::protobuf::int32 value) {
  
  leftrocker_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.leftRocker)
}

// sint32 leftX = 7;
inline void RspMsg_IO_Bcast::clear_leftx() {
  leftx_ = 0;
}
inline ::google::protobuf::int32 RspMsg_IO_Bcast::leftx() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.leftX)
  return leftx_;
}
inline void RspMsg_IO_Bcast::set_leftx(::google::protobuf::int32 value) {
  
  leftx_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.leftX)
}

// sint32 leftY = 8;
inline void RspMsg_IO_Bcast::clear_lefty() {
  lefty_ = 0;
}
inline ::google::protobuf::int32 RspMsg_IO_Bcast::lefty() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.leftY)
  return lefty_;
}
inline void RspMsg_IO_Bcast::set_lefty(::google::protobuf::int32 value) {
  
  lefty_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.leftY)
}

// sint32 rightRocker = 9;
inline void RspMsg_IO_Bcast::clear_rightrocker() {
  rightrocker_ = 0;
}
inline ::google::protobuf::int32 RspMsg_IO_Bcast::rightrocker() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.rightRocker)
  return rightrocker_;
}
inline void RspMsg_IO_Bcast::set_rightrocker(::google::protobuf::int32 value) {
  
  rightrocker_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.rightRocker)
}

// sint32 rightX = 10;
inline void RspMsg_IO_Bcast::clear_rightx() {
  rightx_ = 0;
}
inline ::google::protobuf::int32 RspMsg_IO_Bcast::rightx() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.rightX)
  return rightx_;
}
inline void RspMsg_IO_Bcast::set_rightx(::google::protobuf::int32 value) {
  
  rightx_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.rightX)
}

// sint32 rightY = 11;
inline void RspMsg_IO_Bcast::clear_righty() {
  righty_ = 0;
}
inline ::google::protobuf::int32 RspMsg_IO_Bcast::righty() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Bcast.rightY)
  return righty_;
}
inline void RspMsg_IO_Bcast::set_righty(::google::protobuf::int32 value) {
  
  righty_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.IO_Bcast.rightY)
}

// -------------------------------------------------------------------

// RspMsg_IO_Rsp

// .HaWC.RspMsg.IO_Bcast ioBcast = 25;
inline bool RspMsg_IO_Rsp::has_iobcast() const {
  return response_case() == kIoBcast;
}
inline void RspMsg_IO_Rsp::set_has_iobcast() {
  _oneof_case_[0] = kIoBcast;
}
inline void RspMsg_IO_Rsp::clear_iobcast() {
  if (has_iobcast()) {
    delete response_.iobcast_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_IO_Bcast& RspMsg_IO_Rsp::_internal_iobcast() const {
  return *response_.iobcast_;
}
inline ::HaWC::RspMsg_IO_Bcast* RspMsg_IO_Rsp::release_iobcast() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.IO_Rsp.ioBcast)
  if (has_iobcast()) {
    clear_has_response();
      ::HaWC::RspMsg_IO_Bcast* temp = response_.iobcast_;
    response_.iobcast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_IO_Bcast& RspMsg_IO_Rsp::iobcast() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.IO_Rsp.ioBcast)
  return has_iobcast()
      ? *response_.iobcast_
      : *reinterpret_cast< ::HaWC::RspMsg_IO_Bcast*>(&::HaWC::_RspMsg_IO_Bcast_default_instance_);
}
inline ::HaWC::RspMsg_IO_Bcast* RspMsg_IO_Rsp::mutable_iobcast() {
  if (!has_iobcast()) {
    clear_response();
    set_has_iobcast();
    response_.iobcast_ = CreateMaybeMessage< ::HaWC::RspMsg_IO_Bcast >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.IO_Rsp.ioBcast)
  return response_.iobcast_;
}

inline bool RspMsg_IO_Rsp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void RspMsg_IO_Rsp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline RspMsg_IO_Rsp::ResponseCase RspMsg_IO_Rsp::response_case() const {
  return RspMsg_IO_Rsp::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RspMsg

// int32 seqNum = 1;
inline void RspMsg::clear_seqnum() {
  seqnum_ = 0;
}
inline ::google::protobuf::int32 RspMsg::seqnum() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.seqNum)
  return seqnum_;
}
inline void RspMsg::set_seqnum(::google::protobuf::int32 value) {
  
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:HaWC.RspMsg.seqNum)
}

// .HaWC.RspMsg.AppManagerRsp appRsp = 4;
inline bool RspMsg::has_apprsp() const {
  return response_case() == kAppRsp;
}
inline void RspMsg::set_has_apprsp() {
  _oneof_case_[0] = kAppRsp;
}
inline void RspMsg::clear_apprsp() {
  if (has_apprsp()) {
    delete response_.apprsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_AppManagerRsp& RspMsg::_internal_apprsp() const {
  return *response_.apprsp_;
}
inline ::HaWC::RspMsg_AppManagerRsp* RspMsg::release_apprsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.appRsp)
  if (has_apprsp()) {
    clear_has_response();
      ::HaWC::RspMsg_AppManagerRsp* temp = response_.apprsp_;
    response_.apprsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_AppManagerRsp& RspMsg::apprsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.appRsp)
  return has_apprsp()
      ? *response_.apprsp_
      : *reinterpret_cast< ::HaWC::RspMsg_AppManagerRsp*>(&::HaWC::_RspMsg_AppManagerRsp_default_instance_);
}
inline ::HaWC::RspMsg_AppManagerRsp* RspMsg::mutable_apprsp() {
  if (!has_apprsp()) {
    clear_response();
    set_has_apprsp();
    response_.apprsp_ = CreateMaybeMessage< ::HaWC::RspMsg_AppManagerRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.appRsp)
  return response_.apprsp_;
}

// .HaWC.RspMsg.DisplayRsp displayRsp = 5;
inline bool RspMsg::has_displayrsp() const {
  return response_case() == kDisplayRsp;
}
inline void RspMsg::set_has_displayrsp() {
  _oneof_case_[0] = kDisplayRsp;
}
inline void RspMsg::clear_displayrsp() {
  if (has_displayrsp()) {
    delete response_.displayrsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_DisplayRsp& RspMsg::_internal_displayrsp() const {
  return *response_.displayrsp_;
}
inline ::HaWC::RspMsg_DisplayRsp* RspMsg::release_displayrsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.displayRsp)
  if (has_displayrsp()) {
    clear_has_response();
      ::HaWC::RspMsg_DisplayRsp* temp = response_.displayrsp_;
    response_.displayrsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_DisplayRsp& RspMsg::displayrsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.displayRsp)
  return has_displayrsp()
      ? *response_.displayrsp_
      : *reinterpret_cast< ::HaWC::RspMsg_DisplayRsp*>(&::HaWC::_RspMsg_DisplayRsp_default_instance_);
}
inline ::HaWC::RspMsg_DisplayRsp* RspMsg::mutable_displayrsp() {
  if (!has_displayrsp()) {
    clear_response();
    set_has_displayrsp();
    response_.displayrsp_ = CreateMaybeMessage< ::HaWC::RspMsg_DisplayRsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.displayRsp)
  return response_.displayrsp_;
}

// .HaWC.RspMsg.IO_Rsp ioRsp = 6;
inline bool RspMsg::has_iorsp() const {
  return response_case() == kIoRsp;
}
inline void RspMsg::set_has_iorsp() {
  _oneof_case_[0] = kIoRsp;
}
inline void RspMsg::clear_iorsp() {
  if (has_iorsp()) {
    delete response_.iorsp_;
    clear_has_response();
  }
}
inline const ::HaWC::RspMsg_IO_Rsp& RspMsg::_internal_iorsp() const {
  return *response_.iorsp_;
}
inline ::HaWC::RspMsg_IO_Rsp* RspMsg::release_iorsp() {
  // @@protoc_insertion_point(field_release:HaWC.RspMsg.ioRsp)
  if (has_iorsp()) {
    clear_has_response();
      ::HaWC::RspMsg_IO_Rsp* temp = response_.iorsp_;
    response_.iorsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HaWC::RspMsg_IO_Rsp& RspMsg::iorsp() const {
  // @@protoc_insertion_point(field_get:HaWC.RspMsg.ioRsp)
  return has_iorsp()
      ? *response_.iorsp_
      : *reinterpret_cast< ::HaWC::RspMsg_IO_Rsp*>(&::HaWC::_RspMsg_IO_Rsp_default_instance_);
}
inline ::HaWC::RspMsg_IO_Rsp* RspMsg::mutable_iorsp() {
  if (!has_iorsp()) {
    clear_response();
    set_has_iorsp();
    response_.iorsp_ = CreateMaybeMessage< ::HaWC::RspMsg_IO_Rsp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:HaWC.RspMsg.ioRsp)
  return response_.iorsp_;
}

inline bool RspMsg::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void RspMsg::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline RspMsg::ResponseCase RspMsg::response_case() const {
  return RspMsg::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HaWC

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::HaWC::CmdMsg_CloseAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::CmdMsg_CloseAction>() {
  return ::HaWC::CmdMsg_CloseAction_descriptor();
}
template <> struct is_proto_enum< ::HaWC::CmdMsg_FillMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::CmdMsg_FillMode>() {
  return ::HaWC::CmdMsg_FillMode_descriptor();
}
template <> struct is_proto_enum< ::HaWC::CmdMsg_WrapMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::CmdMsg_WrapMode>() {
  return ::HaWC::CmdMsg_WrapMode_descriptor();
}
template <> struct is_proto_enum< ::HaWC::CmdMsg_TextFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::CmdMsg_TextFormat>() {
  return ::HaWC::CmdMsg_TextFormat_descriptor();
}
template <> struct is_proto_enum< ::HaWC::RspMsg_DataTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::RspMsg_DataTypes>() {
  return ::HaWC::RspMsg_DataTypes_descriptor();
}
template <> struct is_proto_enum< ::HaWC::Targets> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::Targets>() {
  return ::HaWC::Targets_descriptor();
}
template <> struct is_proto_enum< ::HaWC::FeedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::FeedType>() {
  return ::HaWC::FeedType_descriptor();
}
template <> struct is_proto_enum< ::HaWC::FeedID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::FeedID>() {
  return ::HaWC::FeedID_descriptor();
}
template <> struct is_proto_enum< ::HaWC::QosStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HaWC::QosStates>() {
  return ::HaWC::QosStates_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_HaWC_2eproto
